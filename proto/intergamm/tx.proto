syntax = "proto3";
package quasarlabs.quasarnode.intergamm;

// this line is used by starport scaffolding # proto/tx/import
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/quasarlabs/quasarnode/x/intergamm/types";

// Msg defines the Msg service.
service Msg {
  rpc TestScenario(MsgTestScenario) returns (MsgTestScenarioResponse);
  rpc TransmitIbcJoinPool(MsgTransmitIbcJoinPool) returns (MsgTransmitIbcJoinPoolResponse);
  rpc TransmitIbcExitPool(MsgTransmitIbcExitPool) returns (MsgTransmitIbcExitPoolResponse);
  rpc TransmitIbcLockTokens(MsgTransmitIbcLockTokens) returns (MsgTransmitIbcLockTokensResponse);
  rpc TransmitIbcBeginUnlocking(MsgTransmitIbcBeginUnlocking) returns (MsgTransmitIbcBeginUnlockingResponse);
  rpc TransmitIbcJoinSwapExternAmountIn(MsgTransmitIbcJoinSwapExternAmountIn) returns (MsgTransmitIbcJoinSwapExternAmountInResponse);
  rpc TransmitIbcExitSwapExternAmountOut(MsgTransmitIbcExitSwapExternAmountOut) returns (MsgTransmitIbcExitSwapExternAmountOutResponse);
  rpc SendToken(MsgSendToken) returns (MsgSendTokenResponse);
  rpc TransmitICATransfer(MsgTransmitICATransfer) returns (MsgTransmitICATransferResponse);
  rpc RegisterICAOnZone(MsgRegisterICAOnZone) returns (MsgRegisterICAOnZoneResponse);
  rpc RegisterICAOnDenomNativeZone(MsgRegisterICAOnDenomNativeZone) returns (MsgRegisterICAOnDenomNativeZoneResponse);
  rpc SendTokenToICA(MsgSendTokenToICA) returns (MsgSendTokenToICAResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgEmptyIbcResponse {
}

message MsgTestScenario {
  string creator = 1;
  string scenario = 2;
}

message MsgTestScenarioResponse {
  string result = 1;
  int64 exitCode = 2;
}

message MsgSendToken {
  string fromAddress = 1;
  string toZoneId = 2;
  string toAddress = 3;
  cosmos.base.v1beta1.Coin coin = 4 [(gogoproto.nullable) = false];
}

message MsgSendTokenResponse {
  uint64 seq = 1;
  string channel = 2;
  string portId = 3;
}

message MsgRegisterInterchainAccount {
  string creator = 1;
  string connectionId = 2;
}

message MsgRegisterInterchainAccountResponse {
}

message MsgRegisterInterchainAccount {
  string creator = 1;
  string connectionId = 2;
}

message MsgRegisterInterchainAccountResponse {
}

message MsgTransmitIbcJoinPool {
  string creator = 1;
  string connectionId = 2;
  uint64 timeoutTimestamp = 3;
  uint64 poolId = 4;
  int64 shareOutAmount = 5;
  repeated cosmos.base.v1beta1.Coin tokenInMaxs = 6 [ (gogoproto.nullable) = false ];
}

message MsgTransmitIbcJoinPoolResponse {
  uint64 seq = 1;
  string channel = 2;
  string portId = 3;
}

message MsgTransmitIbcExitPool {
  string creator = 1;
  string connectionId = 2;
  uint64 timeoutTimestamp = 3;
  uint64 poolId = 4;
  int64 shareInAmount = 5;
  repeated cosmos.base.v1beta1.Coin tokenOutMins = 6 [ (gogoproto.nullable) = false ];
}

message MsgTransmitIbcExitPoolResponse {
  uint64 seq = 1;
  string channel = 2;
  string portId = 3;
}

message MsgTransmitIbcLockTokens {
  string creator = 1;
  string connectionId = 2;
  uint64 timeoutTimestamp = 3;
  uint64 duration = 4 [
  (gogoproto.stdduration) = true,
  (gogoproto.jsontag) = "duration,omitempty",
  (gogoproto.moretags) = "yaml:\"duration\"" ];
  repeated cosmos.base.v1beta1.Coin coins  = 5 [ (gogoproto.nullable) = false ];
}

message MsgTransmitIbcLockTokensResponse {
  uint64 seq = 1;
  string channel = 2;
  string portId = 3;
}

message MsgTransmitIbcBeginUnlocking {
  string creator = 1;
  string connectionId = 2;
  uint64 timeoutTimestamp = 3;
  uint64 id = 4;
  repeated cosmos.base.v1beta1.Coin coins  = 5 [ (gogoproto.nullable) = false ];
}

message MsgTransmitIbcBeginUnlockingResponse {
  uint64 seq = 1;
  string channel = 2;
  string portId = 3;
}

message MsgTransmitIbcJoinSwapExternAmountIn {
  string creator = 1;
  string connectionId = 2;
  uint64 timeoutTimestamp = 3;
  uint64 poolId = 4;
  int64 shareOutMinAmount = 5;
  cosmos.base.v1beta1.Coin tokenIn = 6 [ (gogoproto.nullable) = false ];
}

message MsgTransmitIbcJoinSwapExternAmountInResponse {
  uint64 seq = 1;
  string channel = 2;
  string portId = 3;
}

message MsgTransmitIbcExitSwapExternAmountOut{
  string creator = 1;
  string connectionId = 2;
  uint64 timeoutTimestamp = 3;
  uint64 poolId = 4;
  int64 shareInAmount = 5;
  cosmos.base.v1beta1.Coin tokenOutMins = 6 [ (gogoproto.nullable) = false ];
}

message MsgTransmitIbcExitSwapExternAmountOutResponse {
  uint64 seq = 1;
  string channel = 2;
  string portId = 3;
}

message MsgTransmitICATransfer {
  string icaOwnerAddress = 1;
  string toAddress = 3;
  cosmos.base.v1beta1.Coin coin = 4 [(gogoproto.nullable) = false];
}

message MsgTransmitICATransferResponse {
  uint64 seq = 1;
  string channel = 2;
  string portId = 3;
}

message MsgRegisterICAOnZone {
  string ownerAddress = 1;
  string zoneId = 2;
}

message MsgRegisterICAOnZoneResponse {
}

message MsgRegisterICAOnDenomNativeZone {
  string ownerAddress = 1;
  string denom = 2;
}

message MsgRegisterICAOnDenomNativeZoneResponse {
}

message MsgSendTokenToICA {
  string fromAddress = 1;
  string toZoneId = 2;
  cosmos.base.v1beta1.Coin coin = 3 [(gogoproto.nullable) = false];
}

message MsgSendTokenToICAResponse {
  uint64 seq = 1;
  string channel = 2;
  string portId = 3;
}

// this line is used by starport scaffolding # proto/tx/message
