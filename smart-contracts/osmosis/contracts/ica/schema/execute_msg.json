{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "join_pool"
      ],
      "properties": {
        "join_pool": {
          "type": "object",
          "required": [
            "channel",
            "pool_id",
            "sender",
            "share_out_amount",
            "token_in_maxs"
          ],
          "properties": {
            "channel": {
              "type": "string"
            },
            "pool_id": {
              "$ref": "#/definitions/Uint64"
            },
            "sender": {
              "type": "string"
            },
            "share_out_amount": {
              "type": "string"
            },
            "token_in_maxs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "type": "string"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
