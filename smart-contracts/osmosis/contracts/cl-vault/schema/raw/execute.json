{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "The default ExecuteMsg variants that all vaults must implement. This enum can be extended with additional variants by defining an extension enum and then passing it as the generic argument `T` to this enum.",
  "oneOf": [
    {
      "description": "Called to deposit an any of the assets into the vault. Assets are passed in the funds parameter. This should functions as a deposit function that \"just handles the deposit\", it might swap user funds to the ratio needed. This should support both single sided deposits aswell as unbalanced deposits",
      "type": "object",
      "required": [
        "any_deposit"
      ],
      "properties": {
        "any_deposit": {
          "type": "object",
          "required": [
            "amount",
            "asset",
            "max_slippage"
          ],
          "properties": {
            "amount": {
              "description": "The amount of tokens to deposit.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "asset": {
              "description": "the asset to deposit",
              "type": "string"
            },
            "max_slippage": {
              "description": "The maximum slippage allowed for swap between vault assets for deposit",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            },
            "recipient": {
              "description": "The optional recipient of the vault token. If not set, the caller address will be used instead.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Called to deposit multiple assets into the vault. The assets should be passed in the funds parameter. The vault should either accept funds in the correct ratio and error on incorrect ratio's, or refund and funds that are not in the correct ratio",
      "type": "object",
      "required": [
        "exact_deposit"
      ],
      "properties": {
        "exact_deposit": {
          "type": "object",
          "properties": {
            "recipient": {
              "description": "The optional recipient of the vault token. If not set, the caller address will be used instead.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Called to redeem vault tokens and receive assets back from the vault. The native vault token must be passed in the funds parameter, unless the lockup extension is called, in which case the vault token has already been passed to ExecuteMsg::Unlock.",
      "type": "object",
      "required": [
        "redeem"
      ],
      "properties": {
        "redeem": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "description": "The amount of vault tokens sent to the contract. In the case that the vault token is a Cosmos native denom, we of course have this information in info.funds, but if the vault implements the Cw4626 API, then we need this argument. We figured it's better to have one API for both types of vaults, so we require this argument.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "recipient": {
              "description": "An optional field containing which address should receive the withdrawn base tokens. If not set, the caller address will be used instead.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Called to execute functionality of any enabled extensions.",
      "type": "object",
      "required": [
        "vault_extension"
      ],
      "properties": {
        "vault_extension": {
          "$ref": "#/definitions/ExtensionExecuteMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AdminExtensionExecuteMsg": {
      "description": "Apollo extension messages define functionality that is part of all apollo vaults, but not part of the standard.",
      "oneOf": [
        {
          "description": "Update the vault admin.",
          "type": "object",
          "required": [
            "update_admin"
          ],
          "properties": {
            "update_admin": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "The new admin address.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Update the range adming,",
          "type": "object",
          "required": [
            "update_range_admin"
          ],
          "properties": {
            "update_range_admin": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "the new range admin",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Update the configuration of the vault.",
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "required": [
                "updates"
              ],
              "properties": {
                "updates": {
                  "description": "The config updates.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/VaultConfig"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_metadata"
          ],
          "properties": {
            "update_metadata": {
              "type": "object",
              "required": [
                "updates"
              ],
              "properties": {
                "updates": {
                  "description": "The metadata updates.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Metadata"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Update the dex router address.",
          "type": "object",
          "required": [
            "update_dex_router"
          ],
          "properties": {
            "update_dex_router": {
              "type": "object",
              "properties": {
                "address": {
                  "description": "The new dex router address.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Build tick exponent cache",
          "type": "object",
          "required": [
            "build_tick_cache"
          ],
          "properties": {
            "build_tick_cache": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AuthzExtension": {
      "description": "Extension messages for Authz. This interface basically reexports certain vault functionality but sets recipient forcibly to None",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "exact_deposit"
          ],
          "properties": {
            "exact_deposit": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "any_deposit"
          ],
          "properties": {
            "any_deposit": {
              "type": "object",
              "required": [
                "max_slippage"
              ],
              "properties": {
                "max_slippage": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "redeem"
          ],
          "properties": {
            "redeem": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "ExtensionExecuteMsg": {
      "description": "Extension execute messages for an apollo autocompounding vault",
      "oneOf": [
        {
          "description": "Execute Admin operations.",
          "type": "object",
          "required": [
            "admin"
          ],
          "properties": {
            "admin": {
              "$ref": "#/definitions/AdminExtensionExecuteMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "An interface of certain vault interaction with forced values for authz",
          "type": "object",
          "required": [
            "authz"
          ],
          "properties": {
            "authz": {
              "$ref": "#/definitions/AuthzExtension"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Rebalance our liquidity range based on an off-chain message given to us by RANGE_ADMIN",
          "type": "object",
          "required": [
            "modify_range"
          ],
          "properties": {
            "modify_range": {
              "$ref": "#/definitions/ModifyRangeMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "provides a fungify callback interface for the contract to use",
          "type": "object",
          "required": [
            "merge"
          ],
          "properties": {
            "merge": {
              "$ref": "#/definitions/MergePositionMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "provides an entry point for autocompounding idle funds to current position",
          "type": "object",
          "required": [
            "autocompound"
          ],
          "properties": {
            "autocompound": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Distribute any rewards over all users",
          "type": "object",
          "required": [
            "collect_rewards"
          ],
          "properties": {
            "collect_rewards": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "MigrationStep",
          "type": "object",
          "required": [
            "migration_step"
          ],
          "properties": {
            "migration_step": {
              "type": "object",
              "required": [
                "amount_of_users"
              ],
              "properties": {
                "amount_of_users": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "SwapNonVaultFunds",
          "type": "object",
          "required": [
            "swap_non_vault_funds"
          ],
          "properties": {
            "swap_non_vault_funds": {
              "type": "object",
              "required": [
                "swap_operations"
              ],
              "properties": {
                "swap_operations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SwapOperation"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MergePositionMsg": {
      "type": "object",
      "required": [
        "position_ids"
      ],
      "properties": {
        "position_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "Metadata": {
      "description": "metadata useful for display purposes",
      "type": "object",
      "required": [
        "name",
        "thesis"
      ],
      "properties": {
        "name": {
          "description": "the name of the vault",
          "type": "string"
        },
        "thesis": {
          "description": "the underlying thesis of the vault's positions, eg aggresive",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ModifyRangeMsg": {
      "type": "object",
      "required": [
        "lower_price",
        "max_slippage",
        "ratio_of_swappable_funds_to_use",
        "twap_window_seconds",
        "upper_price"
      ],
      "properties": {
        "claim_after": {
          "description": "claim_after optional field, if we off chain computed that incentives have some forfeit duration. this will be persisted in POSITION state",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "forced_swap_route": {
          "description": "forced swap route to take",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/SwapAmountInRoute"
          }
        },
        "lower_price": {
          "description": "The new lower bound of the range, this is converted to an 18 precision digit decimal",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "max_slippage": {
          "description": "max position slippage",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "ratio_of_swappable_funds_to_use": {
          "description": "desired percent of funds to use during the swap step",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "twap_window_seconds": {
          "description": "twap window to use in seconds",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "upper_price": {
          "description": "The new upper bound of the range, this is converted to an 18 precision digit decimal",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "SwapAmountInRoute": {
      "type": "object",
      "required": [
        "pool_id",
        "token_out_denom"
      ],
      "properties": {
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token_out_denom": {
          "type": "string"
        }
      }
    },
    "SwapOperation": {
      "type": "object",
      "required": [
        "pool_id_0",
        "pool_id_1",
        "token_in_denom"
      ],
      "properties": {
        "forced_swap_route_token_0": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/SwapAmountInRoute"
          }
        },
        "forced_swap_route_token_1": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/SwapAmountInRoute"
          }
        },
        "pool_id_0": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pool_id_1": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token_in_denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VaultConfig": {
      "description": "VAULT_CONFIG: Base config struct for the contract.",
      "type": "object",
      "required": [
        "dex_router",
        "performance_fee",
        "swap_max_slippage",
        "treasury"
      ],
      "properties": {
        "dex_router": {
          "description": "Dex router address",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "performance_fee": {
          "description": "Percentage of profit to be charged as performance fee",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "swap_max_slippage": {
          "description": "swap max slippage",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "treasury": {
          "description": "Account to receive fee payments",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
