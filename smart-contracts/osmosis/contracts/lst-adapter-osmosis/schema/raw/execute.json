{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "unbond"
      ],
      "properties": {
        "unbond": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "confirm_unbond"
      ],
      "properties": {
        "confirm_unbond": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "confirm_unbond_finished"
      ],
      "properties": {
        "confirm_unbond_finished": {
          "type": "object",
          "required": [
            "unbond_start_time"
          ],
          "properties": {
            "unbond_start_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_ibc_config"
      ],
      "properties": {
        "update_ibc_config": {
          "type": "object",
          "required": [
            "channel",
            "remote_chain"
          ],
          "properties": {
            "block_offset": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "channel": {
              "type": "string"
            },
            "remote_chain": {
              "type": "string"
            },
            "revision": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "timeout_secs": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update"
      ],
      "properties": {
        "update": {
          "type": "object",
          "properties": {
            "denoms": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Denoms"
                },
                {
                  "type": "null"
                }
              ]
            },
            "observer": {
              "type": [
                "string",
                "null"
              ]
            },
            "stride_oracle": {
              "type": [
                "string",
                "null"
              ]
            },
            "unbond_period_secs": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "vault": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_owner"
      ],
      "properties": {
        "update_owner": {
          "$ref": "#/definitions/OwnerUpdate"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Denoms": {
      "type": "object",
      "required": [
        "lst",
        "underlying"
      ],
      "properties": {
        "lst": {
          "type": "string"
        },
        "underlying": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "OwnerUpdate": {
      "oneOf": [
        {
          "description": "Proposes a new owner to take role. Only current owner can execute.",
          "type": "object",
          "required": [
            "propose_new_owner"
          ],
          "properties": {
            "propose_new_owner": {
              "type": "object",
              "required": [
                "proposed"
              ],
              "properties": {
                "proposed": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Clears the currently proposed owner. Only current owner can execute.",
          "type": "string",
          "enum": [
            "clear_proposed"
          ]
        },
        {
          "description": "Promotes the proposed owner to be the current one. Only the proposed owner can execute.",
          "type": "string",
          "enum": [
            "accept_proposed"
          ]
        },
        {
          "description": "Throws away the keys to the Owner role forever. Once done, no owner can ever be set later.",
          "type": "string",
          "enum": [
            "abolish_owner_role"
          ]
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
