/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type ExecuteMsg = {
  bond: {
    id: string;
  };
} | {
  start_unbond: {
    id: string;
    share_amount: Uint128;
  };
} | {
  unbond: {
    id: string;
  };
} | {
  set_depositor: {
    depositor: string;
  };
} | {
  accept_returning_funds: {
    id: number;
  };
} | {
  close_channel: {
    channel_id: string;
  };
} | {
  return_transfer: {
    amount: Uint128;
  };
} | {
  ack: {
    ack: IbcPacketAckMsg;
  };
} | {
  try_icq: {};
} | {
  unlock: {
    unlock_only: UnlockOnly;
  };
} | {
  manual_timeout: {
    channel: string;
    seq: number;
    should_unlock: boolean;
  };
};
export type Uint128 = string;
export type Binary = string;
export type Timestamp = Uint64;
export type Uint64 = string;
export type UnlockOnly = "bond" | "start_unbond" | "unbond";
export interface IbcPacketAckMsg {
  acknowledgement: IbcAcknowledgement;
  original_packet: IbcPacket;
  [k: string]: unknown;
}
export interface IbcAcknowledgement {
  data: Binary;
  [k: string]: unknown;
}
export interface IbcPacket {
  data: Binary;
  dest: IbcEndpoint;
  sequence: number;
  src: IbcEndpoint;
  timeout: IbcTimeout;
  [k: string]: unknown;
}
export interface IbcEndpoint {
  channel_id: string;
  port_id: string;
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  base_denom: string;
  expected_connection: string;
  local_denom: string;
  lock_period: number;
  pool_denom: string;
  pool_id: number;
  quote_denom: string;
  return_source_channel: string;
  transfer_channel: string;
}
export type QueryMsg = {
  channels: {};
} | {
  config: {};
} | {
  ica_address: {};
} | {
  lock: {};
} | {
  lp_shares: {};
} | {
  primitive_shares: {};
} | {
  ica_balance: {};
} | {
  ica_channel: {};
} | {
  trapped_errors: {};
} | {
  unbonding_claim: {
    addr: Addr;
    id: string;
  };
} | {
  list_unbonding_claims: {};
} | {
  list_bonding_claims: {};
} | {
  list_primitive_shares: {};
} | {
  list_pending_acks: {};
} | {
  list_replies: {};
} | {
  osmo_lock: {};
} | {
  simulated_join: {};
} | {
  get_queues: {};
};
export type Addr = string;
export type ChannelType = {
  icq: {
    channel_ty: string;
    [k: string]: unknown;
  };
} | {
  ica: {
    channel_ty: IcaMetadata;
    counter_party_address?: string | null;
    [k: string]: unknown;
  };
} | {
  ics20: {
    channel_ty: string;
    [k: string]: unknown;
  };
};
export type Encoding = "proto3";
export type TxType = "sdk_multi_msg";
export type Version = "ics27-1";
export type HandshakeState = "init" | "try_open" | "open" | "closed";
export interface ChannelsResponse {
  channels: ChannelInfo[];
}
export interface ChannelInfo {
  channel_type: ChannelType;
  connection_id: string;
  counterparty_endpoint: IbcEndpoint;
  handshake_state: HandshakeState;
  id: string;
  [k: string]: unknown;
}
export interface IcaMetadata {
  controller_connection_id?: string | null;
  encoding: Encoding;
  host_connection_id?: string | null;
  tx_type: TxType;
  version: Version;
  [k: string]: unknown;
}
export interface ConfigResponse {
  config: Config;
}
export interface Config {
  base_denom: string;
  expected_connection: string;
  local_denom: string;
  lock_period: number;
  pool_denom: string;
  pool_id: number;
  quote_denom: string;
  return_source_channel: string;
  transfer_channel: string;
  [k: string]: unknown;
}
export interface GetQueuesResponse {
  bond_queue: Bond[];
  pending_bond_queue: Bond[];
  start_unbond_queue: StartUnbond[];
  unbond_queue: Unbond[];
}
export interface Bond {
  amount: Uint128;
  bond_id: string;
  owner: Addr;
  [k: string]: unknown;
}
export interface StartUnbond {
  id: string;
  owner: Addr;
  primitive_shares: Uint128;
  [k: string]: unknown;
}
export interface Unbond {
  attempted: boolean;
  id: string;
  lp_shares: Uint128;
  owner: Addr;
  unlock_time: Timestamp;
  [k: string]: unknown;
}
export interface IcaAddressResponse {
  address: string;
}
export interface IcaBalanceResponse {
  amount: Coin;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface IcaChannelResponse {
  channel: string;
}
export interface ListBondingClaimsResponse {
  bonds: {
    [k: string]: [string, Uint128];
  };
}
export type IbcMsgKind = "icq" | {
  transfer: {
    amount: Uint128;
    pending: PendingBond;
    [k: string]: unknown;
  };
} | {
  ica: IcaMessages;
};
export type RawAmount = {
  local_denom: Uint128;
} | {
  lp_shares: Uint128;
};
export type IcaMessages = {
  join_swap_extern_amount_in: PendingBond;
} | {
  lock_tokens: [PendingBond, Uint128];
} | {
  begin_unlocking: [PendingSingleUnbond[], Uint128];
} | {
  exit_pool: PendingReturningUnbonds;
} | {
  return_transfer: PendingReturningUnbonds;
} | {
  recovery_exit_pool: PendingReturningRecovery;
} | {
  recovery_return_transfer: PendingReturningRecovery;
};
export type FundPath = {
  bond: {
    id: string;
    [k: string]: unknown;
  };
} | {
  unbond: {
    id: string;
    [k: string]: unknown;
  };
};
export interface ListPendingAcksResponse {
  pending: {
    [k: string]: IbcMsgKind;
  };
}
export interface PendingBond {
  bonds: OngoingDeposit[];
  [k: string]: unknown;
}
export interface OngoingDeposit {
  bond_id: string;
  claim_amount: Uint128;
  owner: Addr;
  raw_amount: RawAmount;
  [k: string]: unknown;
}
export interface PendingSingleUnbond {
  id: string;
  lp_shares: Uint128;
  owner: Addr;
  primitive_shares: Uint128;
  [k: string]: unknown;
}
export interface PendingReturningUnbonds {
  unbonds: ReturningUnbond[];
  [k: string]: unknown;
}
export interface ReturningUnbond {
  amount: RawAmount;
  id: string;
  owner: Addr;
  [k: string]: unknown;
}
export interface PendingReturningRecovery {
  returning: ReturningRecovery[];
  trapped_id: number;
  [k: string]: unknown;
}
export interface ReturningRecovery {
  amount: RawAmount;
  id: FundPath;
  owner: Addr;
  [k: string]: unknown;
}
export interface ListPrimitiveSharesResponse {
  shares: {
    [k: string]: Uint128;
  };
}
export type SubMsgKind = {
  ibc: [IbcMsgKind, string];
} | {
  ack: [number, string];
} | {
  callback: ContractCallback;
};
export type ContractCallback = {
  callback: {
    amount?: Uint128 | null;
    callback: Callback;
    owner: Addr;
    [k: string]: unknown;
  };
} | {
  bank: {
    bank_msg: BankMsg;
    unbond_id: string;
    [k: string]: unknown;
  };
};
export type Callback = {
  bond_response: BondResponse;
} | {
  start_unbond_response: StartUnbondResponse;
} | {
  unbond_response: UnbondResponse;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export interface ListRepliesResponse {
  replies: {
    [k: string]: SubMsgKind;
  };
}
export interface BondResponse {
  bond_id: string;
  share_amount: Uint128;
  [k: string]: unknown;
}
export interface StartUnbondResponse {
  unbond_id: string;
  unlock_time: Timestamp;
  [k: string]: unknown;
}
export interface UnbondResponse {
  unbond_id: string;
  [k: string]: unknown;
}
export interface ListUnbondingClaimsResponse {
  unbonds: {
    [k: string]: [string, Unbond];
  };
}
export type IbcLock = "locked" | "unlocked";
export interface LockResponse {
  lock: Lock;
}
export interface Lock {
  bond: IbcLock;
  recovery: IbcLock;
  start_unbond: IbcLock;
  unbond: IbcLock;
  [k: string]: unknown;
}
export interface LpSharesResponse {
  lp_shares: LpCache;
}
export interface LpCache {
  d_unlocked_shares: Uint128;
  locked_shares: Uint128;
  w_unlocked_shares: Uint128;
  [k: string]: unknown;
}
export interface OsmoLockResponse {
  lock_id: number;
}
export interface PrimitiveSharesResponse {
  total: Uint128;
}
export interface SimulatedJoinResponse {
  amount?: Uint128 | null;
  result?: Uint128 | null;
}
export interface TrappedErrorsResponse {
  errors: {
    [k: string]: Trap;
  };
}
export interface Trap {
  error: string;
  last_succesful: boolean;
  step: IbcMsgKind;
  [k: string]: unknown;
}
export interface UnbondingClaimResponse {
  unbond?: Unbond | null;
}