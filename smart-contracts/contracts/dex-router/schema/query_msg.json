{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "simulate_swaps"
      ],
      "properties": {
        "simulate_swaps": {
          "type": "object",
          "required": [
            "offer",
            "path"
          ],
          "properties": {
            "offer": {
              "$ref": "#/definitions/Coin"
            },
            "path": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapAmountInRoute"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns all the current path for a given (offer_asset, ask_asset) pair.",
      "type": "object",
      "required": [
        "paths_for_pair"
      ],
      "properties": {
        "paths_for_pair": {
          "type": "object",
          "required": [
            "ask_denom",
            "offer_denom"
          ],
          "properties": {
            "ask_denom": {
              "type": "string"
            },
            "offer_denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "finds the best path for a given (offer_asset, ask_asset) pair. if no path is found, returns None.",
      "type": "object",
      "required": [
        "best_path_for_pair"
      ],
      "properties": {
        "best_path_for_pair": {
          "type": "object",
          "required": [
            "ask_denom",
            "offer"
          ],
          "properties": {
            "ask_denom": {
              "type": "string"
            },
            "offer": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns all the assets from which there are paths to a given ask asset.",
      "type": "object",
      "required": [
        "supported_offer_assets"
      ],
      "properties": {
        "supported_offer_assets": {
          "type": "object",
          "required": [
            "ask_denom"
          ],
          "properties": {
            "ask_denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns all the assets to which there are paths from a given offer asset.",
      "type": "object",
      "required": [
        "supported_ask_assets"
      ],
      "properties": {
        "supported_ask_assets": {
          "type": "object",
          "required": [
            "offer_denom"
          ],
          "properties": {
            "offer_denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "SwapAmountInRoute": {
      "type": "object",
      "required": [
        "pool_id",
        "token_out_denom"
      ],
      "properties": {
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "token_out_denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
