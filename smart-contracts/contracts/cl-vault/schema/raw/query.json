{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "description": "The default QueryMsg variants that all vaults must implement. This enum can be extended with additional variants by defining an extension enum and then passing it as the generic argument `T` to this enum.",
  "oneOf": [
    {
      "description": "Returns `VaultStandardInfoResponse` with information on the version of the vault standard used as well as any enabled extensions.",
      "type": "object",
      "required": [
        "vault_standard_info"
      ],
      "properties": {
        "vault_standard_info": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns `VaultInfoResponse` representing vault requirements, lockup, & vault token denom.",
      "type": "object",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns `Uint128` amount of vault tokens that will be returned for the passed in assets. If the vault cannot accept this set tokens, the query should error. This can be due to wrong ratio's, or missing or superfluous assets\n\nAllows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\n\nMust return as close to and no more than the exact amount of vault tokens that would be minted in a deposit call in the same transaction. I.e. Deposit should return the same or more vault tokens as PreviewDeposit if called in the same transaction.",
      "type": "object",
      "required": [
        "preview_deposit"
      ],
      "properties": {
        "preview_deposit": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "description": "The of assets to deposit.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the ratio in which the underlying assets should be deposited. If no ratio is applicable, should return None. Ratios are expressed as a Vec<Coin>. This should be interpreted as a deposit should be some multiplicative of the returned vec.\n\nA vault does not have to guarantee that this ratio is stable.",
      "type": "string",
      "enum": [
        "deposit_ratio"
      ]
    },
    {
      "description": "Returns `Uint128` amount of base tokens that would be withdrawn in exchange for redeeming `amount` of vault tokens.\n\nAllows an on-chain or off-chain user to simulate the effects of their redeem at the current block, given current on-chain conditions.\n\nMust return as close to and no more than the exact amount of base tokens that would be withdrawn in a redeem call in the same transaction.",
      "type": "object",
      "required": [
        "preview_redeem"
      ],
      "properties": {
        "preview_redeem": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "description": "The amount of vault tokens to preview redeeming.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the amount of assets managed by the vault denominated in underlying tokens. Useful for display purposes.",
      "type": "object",
      "required": [
        "total_assets"
      ],
      "properties": {
        "total_assets": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns `Uint128` total amount of vault tokens in circulation.",
      "type": "object",
      "required": [
        "total_vault_token_supply"
      ],
      "properties": {
        "total_vault_token_supply": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The amount of vault tokens that the vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met.\n\nUseful for display purposes and does not have to confer the exact amount of vault tokens returned by the vault if the passed in assets were deposited. This calculation should not reflect the \"per-user\" price-per-share, and instead should reflect the \"average-user’s\" price-per-share, meaning what the average user should expect to see when exchanging to and from.",
      "type": "object",
      "required": [
        "convert_to_shares"
      ],
      "properties": {
        "convert_to_shares": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "description": "The amount of base tokens to convert to vault tokens.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the amount of base tokens that the Vault would exchange for the `amount` of vault tokens provided, in an ideal scenario where all the conditions are met.\n\nUseful for display purposes and does not have to confer the exact amount of assets returned by the vault if the passed in vault tokens were redeemed. This calculation should not reflect the \"per-user\" price-per-share, and instead should reflect the \"average-user’s\" price-per-share, meaning what the average user should expect to see when exchanging to and from.",
      "type": "object",
      "required": [
        "convert_to_assets"
      ],
      "properties": {
        "convert_to_assets": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "description": "The amount of vault tokens to convert to base tokens.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Handle queries of any enabled extensions.",
      "type": "object",
      "required": [
        "vault_extension"
      ],
      "properties": {
        "vault_extension": {
          "$ref": "#/definitions/ExtensionQueryMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "ClQueryMsg": {
      "description": "Extension query messages for related concentrated liquidity",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "verify_tick_cache"
          ]
        },
        {
          "description": "Get the underlying pool of the vault",
          "type": "object",
          "required": [
            "pool"
          ],
          "properties": {
            "pool": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "position"
          ],
          "properties": {
            "position": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "range_admin"
          ],
          "properties": {
            "range_admin": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ExtensionQueryMsg": {
      "description": "Extension query messages for an apollo autocompounding vault",
      "oneOf": [
        {
          "description": "Metadata surrounding the vault",
          "type": "object",
          "required": [
            "metadata"
          ],
          "properties": {
            "metadata": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Queries related to the lockup extension.",
          "type": "object",
          "required": [
            "balances"
          ],
          "properties": {
            "balances": {
              "$ref": "#/definitions/UserBalanceQueryMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Queries related to Concentrated Liquidity",
          "type": "object",
          "required": [
            "concentrated_liquidity"
          ],
          "properties": {
            "concentrated_liquidity": {
              "$ref": "#/definitions/ClQueryMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Query the DexRouter address",
          "type": "object",
          "required": [
            "dex_router"
          ],
          "properties": {
            "dex_router": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UserBalanceQueryMsg": {
      "description": "Extension query messages for user balance related queries",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "user_shares_balance"
          ],
          "properties": {
            "user_shares_balance": {
              "type": "object",
              "required": [
                "user"
              ],
              "properties": {
                "user": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "user_assets_balance"
          ],
          "properties": {
            "user_assets_balance": {
              "type": "object",
              "required": [
                "user"
              ],
              "properties": {
                "user": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
