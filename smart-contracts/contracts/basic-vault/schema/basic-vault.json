{
  "contract_name": "basic-vault",
  "contract_version": "0.14.2",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "decimals",
      "min_withdrawal",
      "name",
      "primitives",
      "reward_distribution_schedules",
      "reward_token",
      "symbol",
      "thesis",
      "total_cap",
      "vault_rewards_code_id"
    ],
    "properties": {
      "decimals": {
        "description": "decimal places of the derivative token (for UI)",
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      },
      "min_withdrawal": {
        "description": "This is the minimum amount we will pull out to reinvest, as well as a minimum that can be unbonded (to avoid needless staking tx)",
        "allOf": [
          {
            "$ref": "#/definitions/Uint128"
          }
        ]
      },
      "name": {
        "description": "name of the derivative token",
        "type": "string"
      },
      "primitives": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/PrimitiveConfig"
        }
      },
      "reward_distribution_schedules": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/DistributionSchedule"
        }
      },
      "reward_token": {
        "$ref": "#/definitions/AssetInfoBase_for_Addr"
      },
      "symbol": {
        "description": "symbol / ticker of the derivative token",
        "type": "string"
      },
      "thesis": {
        "description": "description of the derivative token",
        "type": "string"
      },
      "total_cap": {
        "$ref": "#/definitions/Uint128"
      },
      "vault_rewards_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AssetInfoBase_for_Addr": {
        "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DistributionSchedule": {
        "type": "object",
        "required": [
          "amount",
          "end",
          "start"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "end": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "start": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "InstantiateMsg": {
        "type": "object",
        "required": [
          "base_denom",
          "expected_connection",
          "local_denom",
          "lock_period",
          "pool_denom",
          "pool_id",
          "quote_denom",
          "return_source_channel",
          "transfer_channel"
        ],
        "properties": {
          "base_denom": {
            "type": "string"
          },
          "expected_connection": {
            "type": "string"
          },
          "local_denom": {
            "type": "string"
          },
          "lock_period": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "pool_denom": {
            "type": "string"
          },
          "pool_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "quote_denom": {
            "type": "string"
          },
          "return_source_channel": {
            "type": "string"
          },
          "transfer_channel": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PrimitiveConfig": {
        "type": "object",
        "required": [
          "address",
          "init",
          "weight"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "init": {
            "$ref": "#/definitions/PrimitiveInitMsg"
          },
          "weight": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "PrimitiveInitMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "l_p"
            ],
            "properties": {
              "l_p": {
                "$ref": "#/definitions/InstantiateMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Bond will bond all staking tokens sent with the message and release derivative tokens recipient will receive the minted vault tokens",
        "type": "object",
        "required": [
          "bond"
        ],
        "properties": {
          "bond": {
            "type": "object",
            "properties": {
              "recipient": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Unbond will \"burn\" the given amount of derivative tokens and send the unbonded staking tokens to the message sender (after exit tax is deducted)",
        "type": "object",
        "required": [
          "unbond"
        ],
        "properties": {
          "unbond": {
            "type": "object",
            "properties": {
              "amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claim is used to claim your native tokens that you previously \"unbonded\" after the chain-defined waiting period (eg. 3 weeks)",
        "type": "object",
        "required": [
          "claim"
        ],
        "properties": {
          "claim": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "bond_response"
        ],
        "properties": {
          "bond_response": {
            "$ref": "#/definitions/BondResponse"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "start_unbond_response"
        ],
        "properties": {
          "start_unbond_response": {
            "$ref": "#/definitions/StartUnbondResponse"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unbond_response"
        ],
        "properties": {
          "unbond_response": {
            "$ref": "#/definitions/UnbondResponse"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20. Transfer is a base message to move tokens to another account without triggering actions",
        "type": "object",
        "required": [
          "transfer"
        ],
        "properties": {
          "transfer": {
            "type": "object",
            "required": [
              "amount",
              "recipient"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "recipient": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20. Burn is a base message to destroy tokens forever",
        "type": "object",
        "required": [
          "burn"
        ],
        "properties": {
          "burn": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20.  Send is a base message to transfer tokens to a contract and trigger an action on the receiving contract.",
        "type": "object",
        "required": [
          "send"
        ],
        "properties": {
          "send": {
            "type": "object",
            "required": [
              "amount",
              "contract",
              "msg"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "contract": {
                "type": "string"
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Allows spender to access an additional amount tokens from the owner's (env.sender) account. If expires is Some(), overwrites current allowance expiration with this one.",
        "type": "object",
        "required": [
          "increase_allowance"
        ],
        "properties": {
          "increase_allowance": {
            "type": "object",
            "required": [
              "amount",
              "spender"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "spender": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Lowers the spender's access of tokens from the owner's (env.sender) account by amount. If expires is Some(), overwrites current allowance expiration with this one.",
        "type": "object",
        "required": [
          "decrease_allowance"
        ],
        "properties": {
          "decrease_allowance": {
            "type": "object",
            "required": [
              "amount",
              "spender"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "spender": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Transfers amount tokens from owner -> recipient if `env.sender` has sufficient pre-approval.",
        "type": "object",
        "required": [
          "transfer_from"
        ],
        "properties": {
          "transfer_from": {
            "type": "object",
            "required": [
              "amount",
              "owner",
              "recipient"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "owner": {
                "type": "string"
              },
              "recipient": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Sends amount tokens from owner -> contract if `env.sender` has sufficient pre-approval.",
        "type": "object",
        "required": [
          "send_from"
        ],
        "properties": {
          "send_from": {
            "type": "object",
            "required": [
              "amount",
              "contract",
              "msg",
              "owner"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "contract": {
                "type": "string"
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              },
              "owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Destroys tokens forever",
        "type": "object",
        "required": [
          "burn_from"
        ],
        "properties": {
          "burn_from": {
            "type": "object",
            "required": [
              "amount",
              "owner"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "clear_cache"
        ],
        "properties": {
          "clear_cache": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "BondResponse": {
        "description": "BondResponse is the response of a the primitive once the funds are succesfully bonded",
        "type": "object",
        "required": [
          "bond_id",
          "share_amount"
        ],
        "properties": {
          "bond_id": {
            "type": "string"
          },
          "share_amount": {
            "description": "the amount of tokens that were bonded",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          }
        }
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "StartUnbondResponse": {
        "description": "UnbondResponse is the response of a primitive once shares succesfully start unbonding",
        "type": "object",
        "required": [
          "unbond_id",
          "unlock_time"
        ],
        "properties": {
          "unbond_id": {
            "type": "string"
          },
          "unlock_time": {
            "$ref": "#/definitions/Timestamp"
          }
        }
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UnbondResponse": {
        "type": "object",
        "required": [
          "unbond_id"
        ],
        "properties": {
          "unbond_id": {
            "type": "string"
          }
        }
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Claims shows the number of tokens this address can access when they are done unbonding",
        "type": "object",
        "required": [
          "claims"
        ],
        "properties": {
          "claims": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_cap"
        ],
        "properties": {
          "get_cap": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Investment shows metadata on the staking info of the contract",
        "type": "object",
        "required": [
          "investment"
        ],
        "properties": {
          "investment": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "DepositRatio shows the ratio of tokens that should be sent for a deposit given list of available tokens",
        "type": "object",
        "required": [
          "deposit_ratio"
        ],
        "properties": {
          "deposit_ratio": {
            "type": "object",
            "required": [
              "funds"
            ],
            "properties": {
              "funds": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "PendingBonds shows the bonds that are currently in the process of being deposited for a user",
        "type": "object",
        "required": [
          "pending_bonds"
        ],
        "properties": {
          "pending_bonds": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "GetTvlInfo gets all info necessary for",
        "type": "object",
        "required": [
          "get_tvl_info"
        ],
        "properties": {
          "get_tvl_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get all unbonding claims of a user",
        "type": "object",
        "required": [
          "pending_unbonds"
        ],
        "properties": {
          "pending_unbonds": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "GetDebug shows us debug string info",
        "type": "object",
        "required": [
          "get_debug"
        ],
        "properties": {
          "get_debug": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20. Returns the current balance of the given address, 0 if unset.",
        "type": "object",
        "required": [
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20. Returns metadata on the contract - name, decimals, supply, etc.",
        "type": "object",
        "required": [
          "token_info"
        ],
        "properties": {
          "token_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Additional token metadata, includes regular token info too",
        "type": "object",
        "required": [
          "additional_token_info"
        ],
        "properties": {
          "additional_token_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"allowance\" extension. Returns how much spender can use from owner account, 0 if unset.",
        "type": "object",
        "required": [
          "allowance"
        ],
        "properties": {
          "allowance": {
            "type": "object",
            "required": [
              "owner",
              "spender"
            ],
            "properties": {
              "owner": {
                "type": "string"
              },
              "spender": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "additional_token_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VaultTokenInfoResponse",
      "type": "object",
      "required": [
        "creation_time",
        "decimals",
        "name",
        "symbol",
        "thesis",
        "total_supply"
      ],
      "properties": {
        "creation_time": {
          "$ref": "#/definitions/Timestamp"
        },
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "thesis": {
          "type": "string"
        },
        "total_supply": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "allowance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllowanceResponse",
      "type": "object",
      "required": [
        "allowance",
        "expires"
      ],
      "properties": {
        "allowance": {
          "$ref": "#/definitions/Uint128"
        },
        "expires": {
          "$ref": "#/definitions/Expiration"
        }
      },
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BalanceResponse",
      "type": "object",
      "required": [
        "balance"
      ],
      "properties": {
        "balance": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "claims": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ClaimsResponse",
      "type": "object",
      "required": [
        "claims"
      ],
      "properties": {
        "claims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Claim"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Claim": {
          "type": "object",
          "required": [
            "amount",
            "release_at"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "release_at": {
              "$ref": "#/definitions/Expiration"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "deposit_ratio": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DepositRatioResponse",
      "type": "object",
      "required": [
        "primitive_funding_amounts",
        "remainder"
      ],
      "properties": {
        "primitive_funding_amounts": {
          "description": "the ratio of tokens that should be sent for a deposit given list of available tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "remainder": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_cap": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetCapResponse",
      "type": "object",
      "required": [
        "cap"
      ],
      "properties": {
        "cap": {
          "$ref": "#/definitions/Cap"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Cap": {
          "type": "object",
          "required": [
            "cap_admin",
            "current",
            "total"
          ],
          "properties": {
            "cap_admin": {
              "$ref": "#/definitions/Addr"
            },
            "current": {
              "$ref": "#/definitions/Uint128"
            },
            "total": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_debug": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetDebugResponse",
      "type": "object",
      "required": [
        "debug"
      ],
      "properties": {
        "debug": {
          "description": "the debug string",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "get_tvl_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TvlInfoResponse",
      "type": "object",
      "required": [
        "primitives"
      ],
      "properties": {
        "primitives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PrimitiveInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "LpCache": {
          "type": "object",
          "required": [
            "d_unlocked_shares",
            "locked_shares",
            "w_unlocked_shares"
          ],
          "properties": {
            "d_unlocked_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "locked_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "w_unlocked_shares": {
              "$ref": "#/definitions/Uint128"
            }
          }
        },
        "PrimitiveInfo": {
          "type": "object",
          "required": [
            "base_denom",
            "ica_address",
            "lp_denom",
            "lp_shares",
            "quote_denom"
          ],
          "properties": {
            "base_denom": {
              "type": "string"
            },
            "ica_address": {
              "type": "string"
            },
            "lp_denom": {
              "type": "string"
            },
            "lp_shares": {
              "$ref": "#/definitions/LpCache"
            },
            "quote_denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "investment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InvestmentResponse",
      "type": "object",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "$ref": "#/definitions/InvestmentInfo"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "InstantiateMsg": {
          "type": "object",
          "required": [
            "base_denom",
            "expected_connection",
            "local_denom",
            "lock_period",
            "pool_denom",
            "pool_id",
            "quote_denom",
            "return_source_channel",
            "transfer_channel"
          ],
          "properties": {
            "base_denom": {
              "type": "string"
            },
            "expected_connection": {
              "type": "string"
            },
            "local_denom": {
              "type": "string"
            },
            "lock_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pool_denom": {
              "type": "string"
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "quote_denom": {
              "type": "string"
            },
            "return_source_channel": {
              "type": "string"
            },
            "transfer_channel": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "InvestmentInfo": {
          "description": "Investment info is fixed at instantiation, and is used to control the function of the contract",
          "type": "object",
          "required": [
            "min_withdrawal",
            "owner",
            "primitives"
          ],
          "properties": {
            "min_withdrawal": {
              "description": "This is the minimum amount we will pull out to reinvest, as well as a minimum that can be unbonded (to avoid needless staking tx)",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "owner": {
              "description": "Owner created the contract and takes a cut",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "primitives": {
              "description": "this is the array of primitives that this vault will subscribe to",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PrimitiveConfig"
              }
            }
          },
          "additionalProperties": false
        },
        "PrimitiveConfig": {
          "type": "object",
          "required": [
            "address",
            "init",
            "weight"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "init": {
              "$ref": "#/definitions/PrimitiveInitMsg"
            },
            "weight": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "PrimitiveInitMsg": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "l_p"
              ],
              "properties": {
                "l_p": {
                  "$ref": "#/definitions/InstantiateMsg"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "pending_bonds": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PendingBondsResponse",
      "type": "object",
      "required": [
        "pending_bond_ids",
        "pending_bonds"
      ],
      "properties": {
        "pending_bond_ids": {
          "description": "the bond ids that are registered as pending for a user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pending_bonds": {
          "description": "the bonds that are currently in the process of being deposited for a user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BondingStub"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "BondResponse": {
          "description": "BondResponse is the response of a the primitive once the funds are succesfully bonded",
          "type": "object",
          "required": [
            "bond_id",
            "share_amount"
          ],
          "properties": {
            "bond_id": {
              "type": "string"
            },
            "share_amount": {
              "description": "the amount of tokens that were bonded",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          }
        },
        "BondingStub": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "bond_response": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BondResponse"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "pending_unbonds": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PendingUnbondsResponse",
      "type": "object",
      "required": [
        "pending_unbond_ids",
        "pending_unbonds"
      ],
      "properties": {
        "pending_unbond_ids": {
          "description": "the bond ids that are registered as pending for a user",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pending_unbonds": {
          "description": "the unbonds that are currently in the process of being withdrawn by an user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Unbond"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Unbond": {
          "type": "object",
          "required": [
            "shares",
            "stub"
          ],
          "properties": {
            "shares": {
              "$ref": "#/definitions/Uint128"
            },
            "stub": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnbondingStub"
              }
            }
          },
          "additionalProperties": false
        },
        "UnbondResponse": {
          "type": "object",
          "required": [
            "unbond_id"
          ],
          "properties": {
            "unbond_id": {
              "type": "string"
            }
          }
        },
        "UnbondingStub": {
          "type": "object",
          "required": [
            "address",
            "unbond_funds"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "unbond_funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "unbond_response": {
              "anyOf": [
                {
                  "$ref": "#/definitions/UnbondResponse"
                },
                {
                  "type": "null"
                }
              ]
            },
            "unlock_time": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      }
    },
    "token_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokenInfoResponse",
      "type": "object",
      "required": [
        "decimals",
        "name",
        "symbol",
        "total_supply"
      ],
      "properties": {
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "total_supply": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
