{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TvlInfoResponse",
  "type": "object",
  "required": [
    "primitives"
  ],
  "properties": {
    "primitives": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PrimitiveInfo"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "LpCache": {
      "type": "object",
      "required": [
        "d_unlocked_shares",
        "locked_shares",
        "w_unlocked_shares"
      ],
      "properties": {
        "d_unlocked_shares": {
          "$ref": "#/definitions/Uint128"
        },
        "locked_shares": {
          "$ref": "#/definitions/Uint128"
        },
        "w_unlocked_shares": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "PrimitiveInfo": {
      "type": "object",
      "required": [
        "base_denom",
        "ica_address",
        "lp_denom",
        "lp_shares",
        "quote_denom"
      ],
      "properties": {
        "base_denom": {
          "type": "string"
        },
        "ica_address": {
          "type": "string"
        },
        "lp_denom": {
          "type": "string"
        },
        "lp_shares": {
          "$ref": "#/definitions/LpCache"
        },
        "quote_denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
