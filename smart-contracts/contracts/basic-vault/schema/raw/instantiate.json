{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "decimals",
    "min_withdrawal",
    "name",
    "primitives",
    "symbol"
  ],
  "properties": {
    "decimals": {
      "description": "decimal places of the derivative token (for UI)",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "min_withdrawal": {
      "description": "This is the minimum amount we will pull out to reinvest, as well as a minimum that can be unbonded (to avoid needless staking tx)",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "name": {
      "description": "name of the derivative token",
      "type": "string"
    },
    "primitives": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PrimitiveConfig"
      }
    },
    "symbol": {
      "description": "symbol / ticker of the derivative token",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "InstantiateMsg": {
      "type": "object",
      "required": [
        "base_denom",
        "local_denom",
        "lock_period",
        "pool_denom",
        "pool_id",
        "quote_denom",
        "return_source_channel",
        "transfer_channel"
      ],
      "properties": {
        "base_denom": {
          "type": "string"
        },
        "local_denom": {
          "type": "string"
        },
        "lock_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pool_denom": {
          "type": "string"
        },
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "quote_denom": {
          "type": "string"
        },
        "return_source_channel": {
          "type": "string"
        },
        "transfer_channel": {
          "type": "string"
        }
      }
    },
    "PrimitiveConfig": {
      "type": "object",
      "required": [
        "address",
        "init",
        "weight"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "init": {
          "$ref": "#/definitions/PrimitiveInitMsg"
        },
        "weight": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "PrimitiveInitMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "l_p"
          ],
          "properties": {
            "l_p": {
              "$ref": "#/definitions/InstantiateMsg"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
