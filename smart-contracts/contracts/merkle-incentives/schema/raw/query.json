{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "range queries",
      "type": "object",
      "required": [
        "incentives_query"
      ],
      "properties": {
        "incentives_query": {
          "$ref": "#/definitions/IncentivesQueryMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "admin queries",
      "type": "object",
      "required": [
        "admin_query"
      ],
      "properties": {
        "admin_query": {
          "$ref": "#/definitions/AdminQueryMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AdminQueryMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "get_incentives_admin"
          ],
          "properties": {
            "get_incentives_admin": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CoinVec": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      }
    },
    "IncentivesQueryMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "merkle_root"
          ],
          "properties": {
            "merkle_root": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "is_valid_claim"
          ],
          "properties": {
            "is_valid_claim": {
              "type": "object",
              "required": [
                "address",
                "coins",
                "leaf_index",
                "proof_hashes",
                "total_leaves_count"
              ],
              "properties": {
                "address": {
                  "type": "string"
                },
                "coins": {
                  "$ref": "#/definitions/CoinVec"
                },
                "leaf_index": {
                  "type": "integer",
                  "format": "uint",
                  "minimum": 0.0
                },
                "proof_hashes": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "uint8",
                      "minimum": 0.0
                    },
                    "maxItems": 32,
                    "minItems": 32
                  }
                },
                "total_leaves_count": {
                  "type": "integer",
                  "format": "uint",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "claimed_incentives"
          ],
          "properties": {
            "claimed_incentives": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
