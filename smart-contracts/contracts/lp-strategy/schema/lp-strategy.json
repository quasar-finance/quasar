{
  "contract_name": "lp-strategy",
  "contract_version": "0.1.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "base_denom",
      "expected_connection",
      "local_denom",
      "lock_period",
      "pool_denom",
      "pool_id",
      "quote_denom",
      "return_source_channel",
      "transfer_channel"
    ],
    "properties": {
      "base_denom": {
        "type": "string"
      },
      "expected_connection": {
        "type": "string"
      },
      "local_denom": {
        "type": "string"
      },
      "lock_period": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "pool_denom": {
        "type": "string"
      },
      "pool_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "quote_denom": {
        "type": "string"
      },
      "return_source_channel": {
        "type": "string"
      },
      "transfer_channel": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "bond"
        ],
        "properties": {
          "bond": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "start_unbond"
        ],
        "properties": {
          "start_unbond": {
            "type": "object",
            "required": [
              "id",
              "share_amount"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "share_amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unbond"
        ],
        "properties": {
          "unbond": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_depositor"
        ],
        "properties": {
          "set_depositor": {
            "type": "object",
            "required": [
              "depositor"
            ],
            "properties": {
              "depositor": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "accept_returning_funds"
        ],
        "properties": {
          "accept_returning_funds": {
            "type": "object",
            "required": [
              "id",
              "pending"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "pending": {
                "$ref": "#/definitions/PendingReturningUnbonds"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "close_channel"
        ],
        "properties": {
          "close_channel": {
            "type": "object",
            "required": [
              "channel_id"
            ],
            "properties": {
              "channel_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "ack"
        ],
        "properties": {
          "ack": {
            "type": "object",
            "required": [
              "ack"
            ],
            "properties": {
              "ack": {
                "$ref": "#/definitions/IbcPacketAckMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "try_icq"
        ],
        "properties": {
          "try_icq": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unlock"
        ],
        "properties": {
          "unlock": {
            "type": "object",
            "required": [
              "unlock_only"
            ],
            "properties": {
              "unlock_only": {
                "$ref": "#/definitions/UnlockOnly"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lock"
        ],
        "properties": {
          "lock": {
            "type": "object",
            "required": [
              "lock_only"
            ],
            "properties": {
              "lock_only": {
                "$ref": "#/definitions/LockOnly"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_lock_admin"
        ],
        "properties": {
          "add_lock_admin": {
            "type": "object",
            "required": [
              "to_add"
            ],
            "properties": {
              "to_add": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_lock_admin"
        ],
        "properties": {
          "remove_lock_admin": {
            "type": "object",
            "required": [
              "to_remove"
            ],
            "properties": {
              "to_remove": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "manual_timeout"
        ],
        "properties": {
          "manual_timeout": {
            "type": "object",
            "required": [
              "channel",
              "seq",
              "should_unlock"
            ],
            "properties": {
              "channel": {
                "type": "string"
              },
              "seq": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "should_unlock": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "retry"
        ],
        "properties": {
          "retry": {
            "type": "object",
            "required": [
              "channel",
              "seq"
            ],
            "properties": {
              "channel": {
                "type": "string"
              },
              "seq": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "transfer_airdrop"
        ],
        "properties": {
          "transfer_airdrop": {
            "type": "object",
            "required": [
              "amounts",
              "destination_address"
            ],
            "properties": {
              "amounts": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "destination_address": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "type": "string"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "IbcAcknowledgement": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/Binary"
          }
        }
      },
      "IbcEndpoint": {
        "type": "object",
        "required": [
          "channel_id",
          "port_id"
        ],
        "properties": {
          "channel_id": {
            "type": "string"
          },
          "port_id": {
            "type": "string"
          }
        }
      },
      "IbcPacket": {
        "type": "object",
        "required": [
          "data",
          "dest",
          "sequence",
          "src",
          "timeout"
        ],
        "properties": {
          "data": {
            "description": "The raw data sent from the other side in the packet",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "dest": {
            "description": "identifies the channel and port on the receiving chain.",
            "allOf": [
              {
                "$ref": "#/definitions/IbcEndpoint"
              }
            ]
          },
          "sequence": {
            "description": "The sequence number of the packet on the given channel",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "src": {
            "description": "identifies the channel and port on the sending chain.",
            "allOf": [
              {
                "$ref": "#/definitions/IbcEndpoint"
              }
            ]
          },
          "timeout": {
            "$ref": "#/definitions/IbcTimeout"
          }
        }
      },
      "IbcPacketAckMsg": {
        "description": "The message that is passed into `ibc_packet_ack`",
        "type": "object",
        "required": [
          "acknowledgement",
          "original_packet"
        ],
        "properties": {
          "acknowledgement": {
            "$ref": "#/definitions/IbcAcknowledgement"
          },
          "original_packet": {
            "$ref": "#/definitions/IbcPacket"
          }
        }
      },
      "IbcTimeout": {
        "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
        "type": "object",
        "properties": {
          "block": {
            "anyOf": [
              {
                "$ref": "#/definitions/IbcTimeoutBlock"
              },
              {
                "type": "null"
              }
            ]
          },
          "timestamp": {
            "anyOf": [
              {
                "$ref": "#/definitions/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "IbcTimeoutBlock": {
        "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
        "type": "object",
        "required": [
          "height",
          "revision"
        ],
        "properties": {
          "height": {
            "description": "block height after which the packet times out. the height within the given revision",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "revision": {
            "description": "the version that the client is currently on (e.g. after resetting the chain this could increment 1 as height drops to 0)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "LockOnly": {
        "type": "string",
        "enum": [
          "bond",
          "start_unbond",
          "unbond",
          "migration"
        ]
      },
      "PendingReturningUnbonds": {
        "type": "object",
        "required": [
          "unbonds"
        ],
        "properties": {
          "unbonds": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ReturningUnbond"
            }
          }
        }
      },
      "RawAmount": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "local_denom"
            ],
            "properties": {
              "local_denom": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "lp_shares"
            ],
            "properties": {
              "lp_shares": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ReturningUnbond": {
        "type": "object",
        "required": [
          "amount",
          "id",
          "owner"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/RawAmount"
          },
          "id": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/definitions/Addr"
          }
        }
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UnlockOnly": {
        "type": "string",
        "enum": [
          "bond",
          "start_unbond",
          "unbond",
          "migration"
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "channels"
        ],
        "properties": {
          "channels": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "ica_address"
        ],
        "properties": {
          "ica_address": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lock"
        ],
        "properties": {
          "lock": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "lp_shares"
        ],
        "properties": {
          "lp_shares": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "primitive_shares"
        ],
        "properties": {
          "primitive_shares": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "ica_balance"
        ],
        "properties": {
          "ica_balance": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "ica_channel"
        ],
        "properties": {
          "ica_channel": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "trapped_errors"
        ],
        "properties": {
          "trapped_errors": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unbonding_claim"
        ],
        "properties": {
          "unbonding_claim": {
            "type": "object",
            "required": [
              "addr",
              "id"
            ],
            "properties": {
              "addr": {
                "$ref": "#/definitions/Addr"
              },
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_unbonding_claims"
        ],
        "properties": {
          "list_unbonding_claims": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_bonding_claims"
        ],
        "properties": {
          "list_bonding_claims": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_primitive_shares"
        ],
        "properties": {
          "list_primitive_shares": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_pending_acks"
        ],
        "properties": {
          "list_pending_acks": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_replies"
        ],
        "properties": {
          "list_replies": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_claimable_funds"
        ],
        "properties": {
          "list_claimable_funds": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "osmo_lock"
        ],
        "properties": {
          "osmo_lock": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "simulated_join"
        ],
        "properties": {
          "simulated_join": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_queues"
        ],
        "properties": {
          "get_queues": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IcaAddressResponse",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "channels": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChannelsResponse",
      "type": "object",
      "required": [
        "channels"
      ],
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChannelInfo": {
          "type": "object",
          "required": [
            "channel_type",
            "connection_id",
            "counterparty_endpoint",
            "handshake_state",
            "id"
          ],
          "properties": {
            "channel_type": {
              "description": "the channel type,",
              "allOf": [
                {
                  "$ref": "#/definitions/ChannelType"
                }
              ]
            },
            "connection_id": {
              "description": "the connection this exists on (you can use to query client/consensus info)",
              "type": "string"
            },
            "counterparty_endpoint": {
              "description": "the remote channel/port we connect to",
              "allOf": [
                {
                  "$ref": "#/definitions/IbcEndpoint"
                }
              ]
            },
            "handshake_state": {
              "description": "the channel handshake state",
              "allOf": [
                {
                  "$ref": "#/definitions/HandshakeState"
                }
              ]
            },
            "id": {
              "description": "id of this channel",
              "type": "string"
            }
          }
        },
        "ChannelType": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "icq"
              ],
              "properties": {
                "icq": {
                  "type": "object",
                  "required": [
                    "channel_ty"
                  ],
                  "properties": {
                    "channel_ty": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ica"
              ],
              "properties": {
                "ica": {
                  "type": "object",
                  "required": [
                    "channel_ty"
                  ],
                  "properties": {
                    "channel_ty": {
                      "$ref": "#/definitions/IcaMetadata"
                    },
                    "counter_party_address": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ics20"
              ],
              "properties": {
                "ics20": {
                  "type": "object",
                  "required": [
                    "channel_ty"
                  ],
                  "properties": {
                    "channel_ty": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Encoding": {
          "type": "string",
          "enum": [
            "proto3"
          ]
        },
        "HandshakeState": {
          "type": "string",
          "enum": [
            "init",
            "try_open",
            "open",
            "closed"
          ]
        },
        "IbcEndpoint": {
          "type": "object",
          "required": [
            "channel_id",
            "port_id"
          ],
          "properties": {
            "channel_id": {
              "type": "string"
            },
            "port_id": {
              "type": "string"
            }
          }
        },
        "IcaMetadata": {
          "type": "object",
          "required": [
            "encoding",
            "tx_type",
            "version"
          ],
          "properties": {
            "controller_connection_id": {
              "type": [
                "string",
                "null"
              ]
            },
            "encoding": {
              "$ref": "#/definitions/Encoding"
            },
            "host_connection_id": {
              "type": [
                "string",
                "null"
              ]
            },
            "tx_type": {
              "$ref": "#/definitions/TxType"
            },
            "version": {
              "$ref": "#/definitions/Version"
            }
          }
        },
        "TxType": {
          "type": "string",
          "enum": [
            "sdk_multi_msg"
          ]
        },
        "Version": {
          "type": "string",
          "enum": [
            "ics27-1"
          ]
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/Config"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Config": {
          "type": "object",
          "required": [
            "base_denom",
            "expected_connection",
            "local_denom",
            "lock_period",
            "pool_denom",
            "pool_id",
            "quote_denom",
            "return_source_channel",
            "transfer_channel"
          ],
          "properties": {
            "base_denom": {
              "type": "string"
            },
            "expected_connection": {
              "type": "string"
            },
            "local_denom": {
              "type": "string"
            },
            "lock_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pool_denom": {
              "type": "string"
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "quote_denom": {
              "type": "string"
            },
            "return_source_channel": {
              "type": "string"
            },
            "transfer_channel": {
              "type": "string"
            }
          }
        }
      }
    },
    "get_queues": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetQueuesResponse",
      "type": "object",
      "required": [
        "bond_queue",
        "failed_join_queue",
        "pending_bond_queue",
        "pending_unbond_queue",
        "rejoin_queue",
        "start_unbond_queue",
        "unbond_queue"
      ],
      "properties": {
        "bond_queue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bond"
          }
        },
        "failed_join_queue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bond"
          }
        },
        "pending_bond_queue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bond"
          }
        },
        "pending_unbond_queue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Unbond"
          }
        },
        "rejoin_queue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OngoingDeposit"
          }
        },
        "start_unbond_queue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StartUnbond"
          }
        },
        "unbond_queue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Unbond"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Bond": {
          "type": "object",
          "required": [
            "amount",
            "bond_id",
            "owner"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "bond_id": {
              "type": "string"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        },
        "OngoingDeposit": {
          "type": "object",
          "required": [
            "bond_id",
            "claim_amount",
            "owner",
            "raw_amount"
          ],
          "properties": {
            "bond_id": {
              "type": "string"
            },
            "claim_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "raw_amount": {
              "$ref": "#/definitions/RawAmount"
            }
          }
        },
        "RawAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "local_denom"
              ],
              "properties": {
                "local_denom": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "lp_shares"
              ],
              "properties": {
                "lp_shares": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "StartUnbond": {
          "type": "object",
          "required": [
            "id",
            "owner",
            "primitive_shares"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "primitive_shares": {
              "$ref": "#/definitions/Uint128"
            }
          }
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Unbond": {
          "type": "object",
          "required": [
            "attempted",
            "id",
            "lp_shares",
            "owner",
            "unlock_time"
          ],
          "properties": {
            "attempted": {
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "lp_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "unlock_time": {
              "$ref": "#/definitions/Timestamp"
            }
          }
        }
      }
    },
    "ica_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BalanceResponse",
      "type": "object",
      "required": [
        "balance"
      ],
      "properties": {
        "balance": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "ica_balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IcaBalanceResponse",
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "ica_channel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IcaChannelResponse",
      "type": "object",
      "required": [
        "channel"
      ],
      "properties": {
        "channel": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "list_bonding_claims": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListBondingClaimsResponse",
      "type": "object",
      "required": [
        "bonds"
      ],
      "properties": {
        "bonds": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Uint128"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "list_claimable_funds": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListClaimableFundsResponse",
      "type": "object",
      "required": [
        "claimable_funds"
      ],
      "properties": {
        "claimable_funds": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Uint128"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "list_pending_acks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListPendingAcksResponse",
      "type": "object",
      "required": [
        "pending"
      ],
      "properties": {
        "pending": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/IbcMsgKind"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "FundPath": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "bond"
              ],
              "properties": {
                "bond": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "unbond"
              ],
              "properties": {
                "unbond": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IbcMsgKind": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "icq"
              ]
            },
            {
              "type": "object",
              "required": [
                "transfer"
              ],
              "properties": {
                "transfer": {
                  "type": "object",
                  "required": [
                    "amount",
                    "pending"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Uint128"
                    },
                    "pending": {
                      "$ref": "#/definitions/PendingBond"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ica"
              ],
              "properties": {
                "ica": {
                  "$ref": "#/definitions/IcaMessages"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IcaMessages": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "join_swap_extern_amount_in"
              ],
              "properties": {
                "join_swap_extern_amount_in": {
                  "$ref": "#/definitions/PendingBond"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "lock_tokens"
              ],
              "properties": {
                "lock_tokens": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/PendingBond"
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "begin_unlocking"
              ],
              "properties": {
                "begin_unlocking": {
                  "type": "array",
                  "items": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PendingSingleUnbond"
                      }
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "exit_pool"
              ],
              "properties": {
                "exit_pool": {
                  "$ref": "#/definitions/PendingReturningUnbonds"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "return_transfer"
              ],
              "properties": {
                "return_transfer": {
                  "$ref": "#/definitions/PendingReturningUnbonds"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "recovery_exit_pool"
              ],
              "properties": {
                "recovery_exit_pool": {
                  "$ref": "#/definitions/PendingReturningRecovery"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "recovery_return_transfer"
              ],
              "properties": {
                "recovery_return_transfer": {
                  "$ref": "#/definitions/PendingReturningRecovery"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "bank_send"
              ],
              "properties": {
                "bank_send": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "OngoingDeposit": {
          "type": "object",
          "required": [
            "bond_id",
            "claim_amount",
            "owner",
            "raw_amount"
          ],
          "properties": {
            "bond_id": {
              "type": "string"
            },
            "claim_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "raw_amount": {
              "$ref": "#/definitions/RawAmount"
            }
          }
        },
        "PendingBond": {
          "type": "object",
          "required": [
            "bonds"
          ],
          "properties": {
            "bonds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OngoingDeposit"
              }
            }
          }
        },
        "PendingReturningRecovery": {
          "type": "object",
          "required": [
            "returning",
            "trapped_id"
          ],
          "properties": {
            "returning": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturningRecovery"
              }
            },
            "trapped_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "PendingReturningUnbonds": {
          "type": "object",
          "required": [
            "unbonds"
          ],
          "properties": {
            "unbonds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturningUnbond"
              }
            }
          }
        },
        "PendingSingleUnbond": {
          "type": "object",
          "required": [
            "id",
            "lp_shares",
            "owner",
            "primitive_shares"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "lp_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "primitive_shares": {
              "$ref": "#/definitions/Uint128"
            }
          }
        },
        "RawAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "local_denom"
              ],
              "properties": {
                "local_denom": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "lp_shares"
              ],
              "properties": {
                "lp_shares": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ReturningRecovery": {
          "type": "object",
          "required": [
            "amount",
            "id",
            "owner"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/RawAmount"
            },
            "id": {
              "$ref": "#/definitions/FundPath"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        },
        "ReturningUnbond": {
          "type": "object",
          "required": [
            "amount",
            "id",
            "owner"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/RawAmount"
            },
            "id": {
              "type": "string"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "list_primitive_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListPrimitiveSharesResponse",
      "type": "object",
      "required": [
        "shares"
      ],
      "properties": {
        "shares": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Uint128"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "list_replies": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListRepliesResponse",
      "type": "object",
      "required": [
        "replies"
      ],
      "properties": {
        "replies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SubMsgKind"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "BankMsg": {
          "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
          "oneOf": [
            {
              "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
              "type": "object",
              "required": [
                "send"
              ],
              "properties": {
                "send": {
                  "type": "object",
                  "required": [
                    "amount",
                    "to_address"
                  ],
                  "properties": {
                    "amount": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin2"
                      }
                    },
                    "to_address": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
              "type": "object",
              "required": [
                "burn"
              ],
              "properties": {
                "burn": {
                  "type": "object",
                  "required": [
                    "amount"
                  ],
                  "properties": {
                    "amount": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin2"
                      }
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "BondResponse": {
          "description": "BondResponse is the response of a the primitive once the funds are succesfully bonded",
          "type": "object",
          "required": [
            "bond_id",
            "share_amount"
          ],
          "properties": {
            "bond_id": {
              "type": "string"
            },
            "share_amount": {
              "description": "the shares gotten by the bond",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          }
        },
        "Callback": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "bond_response"
              ],
              "properties": {
                "bond_response": {
                  "$ref": "#/definitions/BondResponse"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "start_unbond_response"
              ],
              "properties": {
                "start_unbond_response": {
                  "$ref": "#/definitions/StartUnbondResponse"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "unbond_response"
              ],
              "properties": {
                "unbond_response": {
                  "$ref": "#/definitions/UnbondResponse"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Coin2": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "ContractCallback": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "callback"
              ],
              "properties": {
                "callback": {
                  "type": "object",
                  "required": [
                    "callback",
                    "owner"
                  ],
                  "properties": {
                    "amount": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    },
                    "callback": {
                      "$ref": "#/definitions/Callback"
                    },
                    "owner": {
                      "$ref": "#/definitions/Addr"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "bank"
              ],
              "properties": {
                "bank": {
                  "type": "object",
                  "required": [
                    "bank_msg",
                    "unbond_id"
                  ],
                  "properties": {
                    "bank_msg": {
                      "$ref": "#/definitions/BankMsg"
                    },
                    "unbond_id": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FundPath": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "bond"
              ],
              "properties": {
                "bond": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "unbond"
              ],
              "properties": {
                "unbond": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IbcMsgKind": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "icq"
              ]
            },
            {
              "type": "object",
              "required": [
                "transfer"
              ],
              "properties": {
                "transfer": {
                  "type": "object",
                  "required": [
                    "amount",
                    "pending"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Uint128"
                    },
                    "pending": {
                      "$ref": "#/definitions/PendingBond"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ica"
              ],
              "properties": {
                "ica": {
                  "$ref": "#/definitions/IcaMessages"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IcaMessages": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "join_swap_extern_amount_in"
              ],
              "properties": {
                "join_swap_extern_amount_in": {
                  "$ref": "#/definitions/PendingBond"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "lock_tokens"
              ],
              "properties": {
                "lock_tokens": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/PendingBond"
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "begin_unlocking"
              ],
              "properties": {
                "begin_unlocking": {
                  "type": "array",
                  "items": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PendingSingleUnbond"
                      }
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "exit_pool"
              ],
              "properties": {
                "exit_pool": {
                  "$ref": "#/definitions/PendingReturningUnbonds"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "return_transfer"
              ],
              "properties": {
                "return_transfer": {
                  "$ref": "#/definitions/PendingReturningUnbonds"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "recovery_exit_pool"
              ],
              "properties": {
                "recovery_exit_pool": {
                  "$ref": "#/definitions/PendingReturningRecovery"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "recovery_return_transfer"
              ],
              "properties": {
                "recovery_return_transfer": {
                  "$ref": "#/definitions/PendingReturningRecovery"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "bank_send"
              ],
              "properties": {
                "bank_send": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "OngoingDeposit": {
          "type": "object",
          "required": [
            "bond_id",
            "claim_amount",
            "owner",
            "raw_amount"
          ],
          "properties": {
            "bond_id": {
              "type": "string"
            },
            "claim_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "raw_amount": {
              "$ref": "#/definitions/RawAmount"
            }
          }
        },
        "PendingBond": {
          "type": "object",
          "required": [
            "bonds"
          ],
          "properties": {
            "bonds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OngoingDeposit"
              }
            }
          }
        },
        "PendingReturningRecovery": {
          "type": "object",
          "required": [
            "returning",
            "trapped_id"
          ],
          "properties": {
            "returning": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturningRecovery"
              }
            },
            "trapped_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "PendingReturningUnbonds": {
          "type": "object",
          "required": [
            "unbonds"
          ],
          "properties": {
            "unbonds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturningUnbond"
              }
            }
          }
        },
        "PendingSingleUnbond": {
          "type": "object",
          "required": [
            "id",
            "lp_shares",
            "owner",
            "primitive_shares"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "lp_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "primitive_shares": {
              "$ref": "#/definitions/Uint128"
            }
          }
        },
        "RawAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "local_denom"
              ],
              "properties": {
                "local_denom": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "lp_shares"
              ],
              "properties": {
                "lp_shares": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ReturningRecovery": {
          "type": "object",
          "required": [
            "amount",
            "id",
            "owner"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/RawAmount"
            },
            "id": {
              "$ref": "#/definitions/FundPath"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        },
        "ReturningUnbond": {
          "type": "object",
          "required": [
            "amount",
            "id",
            "owner"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/RawAmount"
            },
            "id": {
              "type": "string"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        },
        "StartUnbondResponse": {
          "description": "UnbondResponse is the response of a primitive once shares succesfully start unbonding",
          "type": "object",
          "required": [
            "unbond_id",
            "unlock_time"
          ],
          "properties": {
            "unbond_id": {
              "type": "string"
            },
            "unlock_time": {
              "$ref": "#/definitions/Timestamp"
            }
          }
        },
        "SubMsgKind": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "ibc"
              ],
              "properties": {
                "ibc": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/IbcMsgKind"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ack"
              ],
              "properties": {
                "ack": {
                  "type": "array",
                  "items": [
                    {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "callback"
              ],
              "properties": {
                "callback": {
                  "$ref": "#/definitions/ContractCallback"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "UnbondResponse": {
          "type": "object",
          "required": [
            "unbond_id"
          ],
          "properties": {
            "unbond_id": {
              "type": "string"
            }
          }
        }
      }
    },
    "list_unbonding_claims": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListUnbondingClaimsResponse",
      "type": "object",
      "required": [
        "pending_unbonds",
        "unbonds"
      ],
      "properties": {
        "pending_unbonds": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Unbond"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "unbonds": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Unbond"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Unbond": {
          "type": "object",
          "required": [
            "attempted",
            "id",
            "lp_shares",
            "owner",
            "unlock_time"
          ],
          "properties": {
            "attempted": {
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "lp_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "unlock_time": {
              "$ref": "#/definitions/Timestamp"
            }
          }
        }
      }
    },
    "lock": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LockResponse",
      "type": "object",
      "required": [
        "lock"
      ],
      "properties": {
        "lock": {
          "$ref": "#/definitions/Lock"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "IbcLock": {
          "description": "IbcLock describes the current state of the contract Upon locking the contract, all current deposits and withdraws are going to be handled, Incoming withdraws are gathered once again gathered into a queue. Once the contract unlocks, if the queue has any deposits and/or withdraws, the contract locks and starts handling all current queries",
          "type": "string",
          "enum": [
            "locked",
            "unlocked"
          ]
        },
        "Lock": {
          "type": "object",
          "required": [
            "bond",
            "migration",
            "recovery",
            "start_unbond",
            "unbond"
          ],
          "properties": {
            "bond": {
              "$ref": "#/definitions/IbcLock"
            },
            "migration": {
              "$ref": "#/definitions/IbcLock"
            },
            "recovery": {
              "$ref": "#/definitions/IbcLock"
            },
            "start_unbond": {
              "$ref": "#/definitions/IbcLock"
            },
            "unbond": {
              "$ref": "#/definitions/IbcLock"
            }
          }
        }
      }
    },
    "lp_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LpSharesResponse",
      "type": "object",
      "required": [
        "lp_shares"
      ],
      "properties": {
        "lp_shares": {
          "$ref": "#/definitions/LpCache"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "LpCache": {
          "type": "object",
          "required": [
            "d_unlocked_shares",
            "locked_shares",
            "w_unlocked_shares"
          ],
          "properties": {
            "d_unlocked_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "locked_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "w_unlocked_shares": {
              "$ref": "#/definitions/Uint128"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "osmo_lock": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OsmoLockResponse",
      "type": "object",
      "required": [
        "lock_id"
      ],
      "properties": {
        "lock_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "primitive_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PrimitiveSharesResponse",
      "type": "object",
      "required": [
        "total"
      ],
      "properties": {
        "total": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "simulated_join": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SimulatedJoinResponse",
      "type": "object",
      "properties": {
        "amount": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "result": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "trapped_errors": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TrappedErrorsResponse",
      "type": "object",
      "required": [
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Trap"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "FundPath": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "bond"
              ],
              "properties": {
                "bond": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "unbond"
              ],
              "properties": {
                "unbond": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IbcMsgKind": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "icq"
              ]
            },
            {
              "type": "object",
              "required": [
                "transfer"
              ],
              "properties": {
                "transfer": {
                  "type": "object",
                  "required": [
                    "amount",
                    "pending"
                  ],
                  "properties": {
                    "amount": {
                      "$ref": "#/definitions/Uint128"
                    },
                    "pending": {
                      "$ref": "#/definitions/PendingBond"
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ica"
              ],
              "properties": {
                "ica": {
                  "$ref": "#/definitions/IcaMessages"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "IcaMessages": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "join_swap_extern_amount_in"
              ],
              "properties": {
                "join_swap_extern_amount_in": {
                  "$ref": "#/definitions/PendingBond"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "lock_tokens"
              ],
              "properties": {
                "lock_tokens": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/PendingBond"
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "begin_unlocking"
              ],
              "properties": {
                "begin_unlocking": {
                  "type": "array",
                  "items": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/PendingSingleUnbond"
                      }
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "exit_pool"
              ],
              "properties": {
                "exit_pool": {
                  "$ref": "#/definitions/PendingReturningUnbonds"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "return_transfer"
              ],
              "properties": {
                "return_transfer": {
                  "$ref": "#/definitions/PendingReturningUnbonds"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "recovery_exit_pool"
              ],
              "properties": {
                "recovery_exit_pool": {
                  "$ref": "#/definitions/PendingReturningRecovery"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "recovery_return_transfer"
              ],
              "properties": {
                "recovery_return_transfer": {
                  "$ref": "#/definitions/PendingReturningRecovery"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "bank_send"
              ],
              "properties": {
                "bank_send": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Coin"
                      }
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "OngoingDeposit": {
          "type": "object",
          "required": [
            "bond_id",
            "claim_amount",
            "owner",
            "raw_amount"
          ],
          "properties": {
            "bond_id": {
              "type": "string"
            },
            "claim_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "raw_amount": {
              "$ref": "#/definitions/RawAmount"
            }
          }
        },
        "PendingBond": {
          "type": "object",
          "required": [
            "bonds"
          ],
          "properties": {
            "bonds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OngoingDeposit"
              }
            }
          }
        },
        "PendingReturningRecovery": {
          "type": "object",
          "required": [
            "returning",
            "trapped_id"
          ],
          "properties": {
            "returning": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturningRecovery"
              }
            },
            "trapped_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "PendingReturningUnbonds": {
          "type": "object",
          "required": [
            "unbonds"
          ],
          "properties": {
            "unbonds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReturningUnbond"
              }
            }
          }
        },
        "PendingSingleUnbond": {
          "type": "object",
          "required": [
            "id",
            "lp_shares",
            "owner",
            "primitive_shares"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "lp_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "primitive_shares": {
              "$ref": "#/definitions/Uint128"
            }
          }
        },
        "RawAmount": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "local_denom"
              ],
              "properties": {
                "local_denom": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "lp_shares"
              ],
              "properties": {
                "lp_shares": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ReturningRecovery": {
          "type": "object",
          "required": [
            "amount",
            "id",
            "owner"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/RawAmount"
            },
            "id": {
              "$ref": "#/definitions/FundPath"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        },
        "ReturningUnbond": {
          "type": "object",
          "required": [
            "amount",
            "id",
            "owner"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/RawAmount"
            },
            "id": {
              "type": "string"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          }
        },
        "Trap": {
          "type": "object",
          "required": [
            "error",
            "last_succesful",
            "step"
          ],
          "properties": {
            "error": {
              "type": "string"
            },
            "last_succesful": {
              "type": "boolean"
            },
            "step": {
              "$ref": "#/definitions/IbcMsgKind"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "unbonding_claim": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UnbondingClaimResponse",
      "type": "object",
      "properties": {
        "unbond": {
          "anyOf": [
            {
              "$ref": "#/definitions/Unbond"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "Unbond": {
          "type": "object",
          "required": [
            "attempted",
            "id",
            "lp_shares",
            "owner",
            "unlock_time"
          ],
          "properties": {
            "attempted": {
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "lp_shares": {
              "$ref": "#/definitions/Uint128"
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            },
            "unlock_time": {
              "$ref": "#/definitions/Timestamp"
            }
          }
        }
      }
    }
  }
}
