{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ListPendingAcksResponse",
  "type": "object",
  "required": [
    "pending"
  ],
  "properties": {
    "pending": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/IbcMsgKind"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "type": "string"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "FundPath": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "bond"
          ],
          "properties": {
            "bond": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "unbond"
          ],
          "properties": {
            "unbond": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcMsgKind": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "icq"
          ]
        },
        {
          "type": "object",
          "required": [
            "transfer"
          ],
          "properties": {
            "transfer": {
              "type": "object",
              "required": [
                "amount",
                "pending"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "pending": {
                  "$ref": "#/definitions/PendingBond"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "ica"
          ],
          "properties": {
            "ica": {
              "$ref": "#/definitions/IcaMessages"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IcaMessages": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "join_swap_extern_amount_in"
          ],
          "properties": {
            "join_swap_extern_amount_in": {
              "$ref": "#/definitions/PendingBond"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "lock_tokens"
          ],
          "properties": {
            "lock_tokens": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/PendingBond"
                },
                {
                  "$ref": "#/definitions/Uint128"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "begin_unlocking"
          ],
          "properties": {
            "begin_unlocking": {
              "type": "array",
              "items": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PendingSingleUnbond"
                  }
                },
                {
                  "$ref": "#/definitions/Uint128"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "exit_pool"
          ],
          "properties": {
            "exit_pool": {
              "$ref": "#/definitions/PendingReturningUnbonds"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "return_transfer"
          ],
          "properties": {
            "return_transfer": {
              "$ref": "#/definitions/PendingReturningUnbonds"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "recovery_exit_pool"
          ],
          "properties": {
            "recovery_exit_pool": {
              "$ref": "#/definitions/PendingReturningRecovery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "recovery_return_transfer"
          ],
          "properties": {
            "recovery_return_transfer": {
              "$ref": "#/definitions/PendingReturningRecovery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "bank_send"
          ],
          "properties": {
            "bank_send": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OngoingDeposit": {
      "type": "object",
      "required": [
        "bond_id",
        "claim_amount",
        "owner",
        "raw_amount"
      ],
      "properties": {
        "bond_id": {
          "type": "string"
        },
        "claim_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "owner": {
          "$ref": "#/definitions/Addr"
        },
        "raw_amount": {
          "$ref": "#/definitions/RawAmount"
        }
      }
    },
    "PendingBond": {
      "type": "object",
      "required": [
        "bonds"
      ],
      "properties": {
        "bonds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OngoingDeposit"
          }
        }
      }
    },
    "PendingReturningRecovery": {
      "type": "object",
      "required": [
        "returning",
        "trapped_id"
      ],
      "properties": {
        "returning": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReturningRecovery"
          }
        },
        "trapped_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "PendingReturningUnbonds": {
      "type": "object",
      "required": [
        "unbonds"
      ],
      "properties": {
        "unbonds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReturningUnbond"
          }
        }
      }
    },
    "PendingSingleUnbond": {
      "type": "object",
      "required": [
        "id",
        "lp_shares",
        "owner",
        "primitive_shares"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "lp_shares": {
          "$ref": "#/definitions/Uint128"
        },
        "owner": {
          "$ref": "#/definitions/Addr"
        },
        "primitive_shares": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "RawAmount": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "local_denom"
          ],
          "properties": {
            "local_denom": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "lp_shares"
          ],
          "properties": {
            "lp_shares": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ReturningRecovery": {
      "type": "object",
      "required": [
        "amount",
        "id",
        "owner"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/RawAmount"
        },
        "id": {
          "$ref": "#/definitions/FundPath"
        },
        "owner": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "ReturningUnbond": {
      "type": "object",
      "required": [
        "amount",
        "id",
        "owner"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/RawAmount"
        },
        "id": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
