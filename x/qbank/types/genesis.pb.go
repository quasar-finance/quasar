// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qbank/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LockupTypes defines different types of locktypes to be used in the system for users deposit
type BalanceType int32

const (
	BalanceType_TOTAL_DEPOSIT         BalanceType = 0
	BalanceType_WITHDRAWABLE          BalanceType = 1
	BalanceType_TOTAL_WITHDRAW        BalanceType = 2
	BalanceType_CLAIMABLE_REWARDS     BalanceType = 3
	BalanceType_TOTAL_CLAIMED_REWARDS BalanceType = 4
)

var BalanceType_name = map[int32]string{
	0: "TOTAL_DEPOSIT",
	1: "WITHDRAWABLE",
	2: "TOTAL_WITHDRAW",
	3: "CLAIMABLE_REWARDS",
	4: "TOTAL_CLAIMED_REWARDS",
}

var BalanceType_value = map[string]int32{
	"TOTAL_DEPOSIT":         0,
	"WITHDRAWABLE":          1,
	"TOTAL_WITHDRAW":        2,
	"CLAIMABLE_REWARDS":     3,
	"TOTAL_CLAIMED_REWARDS": 4,
}

func (x BalanceType) String() string {
	return proto.EnumName(BalanceType_name, int32(x))
}

func (BalanceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f07a8d2c0f204875, []int{0}
}

// GenesisState defines the qbank module's genesis state.
type GenesisState struct {
	Params              Params            `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	DepositInfos        []DepositInfo     `protobuf:"bytes,2,rep,name=depositInfos,proto3" json:"depositInfos"`
	TotalDeposits       []UserBalanceInfo `protobuf:"bytes,3,rep,name=totalDeposits,proto3" json:"totalDeposits"`
	Withdrawables       []UserBalanceInfo `protobuf:"bytes,4,rep,name=withdrawables,proto3" json:"withdrawables"`
	TotalWithdraws      []UserBalanceInfo `protobuf:"bytes,5,rep,name=totalWithdraws,proto3" json:"totalWithdraws"`
	ClaimableRewards    []UserBalanceInfo `protobuf:"bytes,6,rep,name=claimableRewards,proto3" json:"claimableRewards"`
	TotalClaimedRewards []UserBalanceInfo `protobuf:"bytes,7,rep,name=totalClaimedRewards,proto3" json:"totalClaimedRewards"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f07a8d2c0f204875, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetDepositInfos() []DepositInfo {
	if m != nil {
		return m.DepositInfos
	}
	return nil
}

func (m *GenesisState) GetTotalDeposits() []UserBalanceInfo {
	if m != nil {
		return m.TotalDeposits
	}
	return nil
}

func (m *GenesisState) GetWithdrawables() []UserBalanceInfo {
	if m != nil {
		return m.Withdrawables
	}
	return nil
}

func (m *GenesisState) GetTotalWithdraws() []UserBalanceInfo {
	if m != nil {
		return m.TotalWithdraws
	}
	return nil
}

func (m *GenesisState) GetClaimableRewards() []UserBalanceInfo {
	if m != nil {
		return m.ClaimableRewards
	}
	return nil
}

func (m *GenesisState) GetTotalClaimedRewards() []UserBalanceInfo {
	if m != nil {
		return m.TotalClaimedRewards
	}
	return nil
}

// DepositInfo represents the state of a particular deposit
type DepositInfo struct {
	VaultID             string      `protobuf:"bytes,1,opt,name=vaultID,proto3" json:"vaultID,omitempty"`
	EpochDay            uint64      `protobuf:"varint,2,opt,name=epochDay,proto3" json:"epochDay,omitempty"`
	LockupPeriod        LockupTypes `protobuf:"varint,3,opt,name=lockupPeriod,proto3,enum=quasarlabs.quasarnode.qbank.LockupTypes" json:"lockupPeriod,omitempty"`
	DepositorAccAddress string      `protobuf:"bytes,4,opt,name=depositorAccAddress,proto3" json:"depositorAccAddress,omitempty"`
	Coin                types.Coin  `protobuf:"bytes,5,opt,name=coin,proto3" json:"coin"`
}

func (m *DepositInfo) Reset()         { *m = DepositInfo{} }
func (m *DepositInfo) String() string { return proto.CompactTextString(m) }
func (*DepositInfo) ProtoMessage()    {}
func (*DepositInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f07a8d2c0f204875, []int{1}
}
func (m *DepositInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositInfo.Merge(m, src)
}
func (m *DepositInfo) XXX_Size() int {
	return m.Size()
}
func (m *DepositInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DepositInfo proto.InternalMessageInfo

func (m *DepositInfo) GetVaultID() string {
	if m != nil {
		return m.VaultID
	}
	return ""
}

func (m *DepositInfo) GetEpochDay() uint64 {
	if m != nil {
		return m.EpochDay
	}
	return 0
}

func (m *DepositInfo) GetLockupPeriod() LockupTypes {
	if m != nil {
		return m.LockupPeriod
	}
	return LockupTypes_Invalid
}

func (m *DepositInfo) GetDepositorAccAddress() string {
	if m != nil {
		return m.DepositorAccAddress
	}
	return ""
}

func (m *DepositInfo) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

// UserBalanceInfo represents the state of a particular type of claim balance
type UserBalanceInfo struct {
	Type                BalanceType                              `protobuf:"varint,1,opt,name=type,proto3,enum=quasarlabs.quasarnode.qbank.BalanceType" json:"type,omitempty"`
	VaultID             string                                   `protobuf:"bytes,2,opt,name=vaultID,proto3" json:"vaultID,omitempty"`
	DepositorAccAddress string                                   `protobuf:"bytes,3,opt,name=depositorAccAddress,proto3" json:"depositorAccAddress,omitempty"`
	Coins               github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *UserBalanceInfo) Reset()         { *m = UserBalanceInfo{} }
func (m *UserBalanceInfo) String() string { return proto.CompactTextString(m) }
func (*UserBalanceInfo) ProtoMessage()    {}
func (*UserBalanceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f07a8d2c0f204875, []int{2}
}
func (m *UserBalanceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBalanceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBalanceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserBalanceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBalanceInfo.Merge(m, src)
}
func (m *UserBalanceInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserBalanceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBalanceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserBalanceInfo proto.InternalMessageInfo

func (m *UserBalanceInfo) GetType() BalanceType {
	if m != nil {
		return m.Type
	}
	return BalanceType_TOTAL_DEPOSIT
}

func (m *UserBalanceInfo) GetVaultID() string {
	if m != nil {
		return m.VaultID
	}
	return ""
}

func (m *UserBalanceInfo) GetDepositorAccAddress() string {
	if m != nil {
		return m.DepositorAccAddress
	}
	return ""
}

func (m *UserBalanceInfo) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterEnum("quasarlabs.quasarnode.qbank.BalanceType", BalanceType_name, BalanceType_value)
	proto.RegisterType((*GenesisState)(nil), "quasarlabs.quasarnode.qbank.GenesisState")
	proto.RegisterType((*DepositInfo)(nil), "quasarlabs.quasarnode.qbank.DepositInfo")
	proto.RegisterType((*UserBalanceInfo)(nil), "quasarlabs.quasarnode.qbank.UserBalanceInfo")
}

func init() { proto.RegisterFile("qbank/genesis.proto", fileDescriptor_f07a8d2c0f204875) }

var fileDescriptor_f07a8d2c0f204875 = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x4e, 0xdb, 0x4a,
	0x14, 0xc6, 0xe3, 0xc4, 0xc0, 0xbd, 0x93, 0x40, 0xcd, 0x50, 0x24, 0x43, 0x25, 0x13, 0xd1, 0x8d,
	0x55, 0xb5, 0x36, 0x7f, 0xb6, 0xdd, 0x38, 0x38, 0x2a, 0x91, 0x52, 0x81, 0x4c, 0xaa, 0x54, 0x2c,
	0x8a, 0xc6, 0xf6, 0x34, 0xb1, 0x62, 0x7b, 0x8c, 0xc7, 0x21, 0xe4, 0x2d, 0xfa, 0x1c, 0x7d, 0x12,
	0x96, 0x2c, 0xbb, 0x6a, 0xab, 0xe4, 0x25, 0x2a, 0x55, 0xaa, 0xaa, 0x19, 0x3b, 0x24, 0xa6, 0x10,
	0xa4, 0xac, 0x32, 0x9e, 0x39, 0xdf, 0xef, 0x9c, 0xef, 0x64, 0xce, 0x80, 0x8d, 0x4b, 0x1b, 0x85,
	0x3d, 0xbd, 0x83, 0x43, 0x4c, 0x3d, 0xaa, 0x45, 0x31, 0x49, 0x08, 0x7c, 0x71, 0xd9, 0x47, 0x14,
	0xc5, 0x3e, 0xb2, 0xa9, 0x96, 0x2e, 0x43, 0xe2, 0x62, 0x8d, 0x87, 0x6e, 0x2b, 0x0e, 0xa1, 0x01,
	0xa1, 0xba, 0x8d, 0x28, 0xd6, 0xaf, 0xf6, 0x6d, 0x9c, 0xa0, 0x7d, 0xdd, 0x21, 0x5e, 0x98, 0x8a,
	0xb7, 0x9f, 0x77, 0x48, 0x87, 0xf0, 0xa5, 0xce, 0x56, 0xd9, 0x2e, 0x4c, 0xf3, 0x44, 0x28, 0x46,
	0x01, 0xcd, 0xef, 0x39, 0x24, 0x08, 0x48, 0xa6, 0xde, 0xfd, 0x2d, 0x82, 0xca, 0xbb, 0xb4, 0x98,
	0xb3, 0x04, 0x25, 0x18, 0x1a, 0x60, 0x39, 0x15, 0xc9, 0x42, 0x55, 0x50, 0xcb, 0x07, 0x2f, 0xb5,
	0x39, 0xc5, 0x69, 0xa7, 0x3c, 0xb4, 0x26, 0xde, 0x7c, 0xdf, 0x29, 0x58, 0x99, 0x10, 0x5a, 0xa0,
	0xe2, 0xe2, 0x88, 0x50, 0x2f, 0x69, 0x84, 0x9f, 0x09, 0x95, 0x8b, 0xd5, 0x92, 0x5a, 0x3e, 0x50,
	0xe7, 0x82, 0xcc, 0xa9, 0x20, 0xa3, 0xe5, 0x18, 0xf0, 0x23, 0x58, 0x4d, 0x48, 0x82, 0xfc, 0x2c,
	0x8e, 0xca, 0x25, 0x0e, 0x7d, 0x3d, 0x17, 0xfa, 0x81, 0xe2, 0xb8, 0x86, 0x7c, 0x14, 0x3a, 0x78,
	0x06, 0x9c, 0x07, 0x31, 0xf2, 0xc0, 0x4b, 0xba, 0x6e, 0x8c, 0x06, 0xc8, 0xf6, 0x31, 0x95, 0xc5,
	0xc5, 0xc9, 0x39, 0x10, 0x3c, 0x07, 0x6b, 0x3c, 0x55, 0x3b, 0xdb, 0xa5, 0xf2, 0xd2, 0xc2, 0xe8,
	0x7b, 0x24, 0xf8, 0x09, 0x48, 0x8e, 0x8f, 0xbc, 0x80, 0x65, 0xb2, 0xf0, 0x00, 0xc5, 0x2e, 0x95,
	0x97, 0x17, 0xa6, 0xff, 0xc3, 0x82, 0x2e, 0xd8, 0xe0, 0x19, 0x8f, 0xd8, 0x01, 0x76, 0x27, 0x29,
	0x56, 0x16, 0x4e, 0xf1, 0x10, 0x6e, 0xf7, 0x97, 0x00, 0xca, 0x33, 0xff, 0x3c, 0x94, 0xc1, 0xca,
	0x15, 0xea, 0xfb, 0x49, 0xc3, 0xe4, 0xb7, 0xef, 0x7f, 0x6b, 0xf2, 0x09, 0xb7, 0xc1, 0x7f, 0x38,
	0x22, 0x4e, 0xd7, 0x44, 0x43, 0xb9, 0x58, 0x15, 0x54, 0xd1, 0xba, 0xfb, 0x86, 0x4d, 0x50, 0xf1,
	0x89, 0xd3, 0xeb, 0x47, 0xa7, 0x38, 0xf6, 0x88, 0x2b, 0x97, 0xaa, 0x82, 0xba, 0xf6, 0xc4, 0x7d,
	0x6b, 0x72, 0x41, 0x6b, 0x18, 0x61, 0x6a, 0xe5, 0xd4, 0x70, 0x0f, 0x6c, 0x64, 0x37, 0x8f, 0xc4,
	0x86, 0xe3, 0x18, 0xae, 0x1b, 0x63, 0xca, 0x6e, 0x05, 0xab, 0xe7, 0xa1, 0x23, 0x78, 0x08, 0x44,
	0x36, 0x8f, 0xf2, 0x12, 0x1f, 0x98, 0x2d, 0x2d, 0x1d, 0x58, 0x8d, 0x0d, 0xac, 0x96, 0x0d, 0xac,
	0x76, 0x44, 0xbc, 0x30, 0xeb, 0x04, 0x0f, 0xde, 0xfd, 0x23, 0x80, 0x67, 0xf7, 0x3a, 0x05, 0xdf,
	0x02, 0x31, 0x19, 0x46, 0x98, 0x7b, 0x7f, 0xca, 0x40, 0xa6, 0x63, 0x0e, 0x2c, 0xae, 0x9a, 0x6d,
	0x5e, 0x31, 0xdf, 0xbc, 0x47, 0x2c, 0x95, 0x1e, 0xb7, 0x84, 0xc0, 0x12, 0xab, 0x72, 0x32, 0x0c,
	0x73, 0x3c, 0xed, 0x31, 0x4f, 0x5f, 0x7f, 0xec, 0xa8, 0x1d, 0x2f, 0xe9, 0xf6, 0x6d, 0xcd, 0x21,
	0x81, 0x9e, 0xbd, 0x58, 0xe9, 0xcf, 0x1b, 0xea, 0xf6, 0x74, 0x56, 0x20, 0xe5, 0x02, 0x6a, 0xa5,
	0xe4, 0x57, 0xd7, 0xa0, 0x3c, 0xe3, 0x01, 0xae, 0x83, 0xd5, 0xd6, 0x49, 0xcb, 0x68, 0x5e, 0x98,
	0xf5, 0xd3, 0x93, 0xb3, 0x46, 0x4b, 0x2a, 0x40, 0x09, 0x54, 0xda, 0x8d, 0xd6, 0xb1, 0x69, 0x19,
	0x6d, 0xa3, 0xd6, 0xac, 0x4b, 0x02, 0x84, 0x60, 0x2d, 0x0d, 0x9a, 0xec, 0x4b, 0x45, 0xb8, 0x09,
	0xd6, 0x8f, 0x9a, 0x46, 0xe3, 0x3d, 0x0b, 0xb9, 0xb0, 0xea, 0x6d, 0xc3, 0x32, 0xcf, 0xa4, 0x12,
	0xdc, 0x02, 0x9b, 0x69, 0x28, 0x3f, 0xac, 0x9b, 0x77, 0x47, 0x62, 0xed, 0xf8, 0x66, 0xa4, 0x08,
	0xb7, 0x23, 0x45, 0xf8, 0x39, 0x52, 0x84, 0x2f, 0x63, 0xa5, 0x70, 0x3b, 0x56, 0x0a, 0xdf, 0xc6,
	0x4a, 0xe1, 0x5c, 0x9b, 0x31, 0x31, 0x6d, 0xbe, 0x3e, 0x6d, 0xbe, 0x7e, 0xad, 0xa7, 0x8f, 0x28,
	0x37, 0x64, 0x2f, 0xf3, 0x47, 0xf4, 0xf0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xd5, 0xf0,
	0xbb, 0xd6, 0x05, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalClaimedRewards) > 0 {
		for iNdEx := len(m.TotalClaimedRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalClaimedRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ClaimableRewards) > 0 {
		for iNdEx := len(m.ClaimableRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimableRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TotalWithdraws) > 0 {
		for iNdEx := len(m.TotalWithdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalWithdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Withdrawables) > 0 {
		for iNdEx := len(m.Withdrawables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdrawables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TotalDeposits) > 0 {
		for iNdEx := len(m.TotalDeposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDeposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DepositInfos) > 0 {
		for iNdEx := len(m.DepositInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DepositInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DepositorAccAddress) > 0 {
		i -= len(m.DepositorAccAddress)
		copy(dAtA[i:], m.DepositorAccAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DepositorAccAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.LockupPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LockupPeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochDay != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EpochDay))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VaultID) > 0 {
		i -= len(m.VaultID)
		copy(dAtA[i:], m.VaultID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.VaultID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserBalanceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBalanceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBalanceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DepositorAccAddress) > 0 {
		i -= len(m.DepositorAccAddress)
		copy(dAtA[i:], m.DepositorAccAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DepositorAccAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VaultID) > 0 {
		i -= len(m.VaultID)
		copy(dAtA[i:], m.VaultID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.VaultID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.DepositInfos) > 0 {
		for _, e := range m.DepositInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TotalDeposits) > 0 {
		for _, e := range m.TotalDeposits {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Withdrawables) > 0 {
		for _, e := range m.Withdrawables {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TotalWithdraws) > 0 {
		for _, e := range m.TotalWithdraws {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ClaimableRewards) > 0 {
		for _, e := range m.ClaimableRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TotalClaimedRewards) > 0 {
		for _, e := range m.TotalClaimedRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DepositInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.EpochDay != 0 {
		n += 1 + sovGenesis(uint64(m.EpochDay))
	}
	if m.LockupPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.LockupPeriod))
	}
	l = len(m.DepositorAccAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *UserBalanceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGenesis(uint64(m.Type))
	}
	l = len(m.VaultID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.DepositorAccAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositInfos = append(m.DepositInfos, DepositInfo{})
			if err := m.DepositInfos[len(m.DepositInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDeposits = append(m.TotalDeposits, UserBalanceInfo{})
			if err := m.TotalDeposits[len(m.TotalDeposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawables = append(m.Withdrawables, UserBalanceInfo{})
			if err := m.Withdrawables[len(m.Withdrawables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWithdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalWithdraws = append(m.TotalWithdraws, UserBalanceInfo{})
			if err := m.TotalWithdraws[len(m.TotalWithdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimableRewards = append(m.ClaimableRewards, UserBalanceInfo{})
			if err := m.ClaimableRewards[len(m.ClaimableRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalClaimedRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalClaimedRewards = append(m.TotalClaimedRewards, UserBalanceInfo{})
			if err := m.TotalClaimedRewards[len(m.TotalClaimedRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDay", wireType)
			}
			m.EpochDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochDay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			m.LockupPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockupPeriod |= LockupTypes(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositorAccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositorAccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBalanceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBalanceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBalanceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BalanceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositorAccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositorAccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
