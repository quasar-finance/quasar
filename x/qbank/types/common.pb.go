// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qbank/common.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LockupTypes defines different types of locktypes to be used in the system for users deposit
type LockupTypes int32

const (
	LockupTypes_Invalid  LockupTypes = 0
	LockupTypes_Days_7   LockupTypes = 1
	LockupTypes_Days_21  LockupTypes = 2
	LockupTypes_Months_1 LockupTypes = 3
	LockupTypes_Months_3 LockupTypes = 4
)

var LockupTypes_name = map[int32]string{
	0: "Invalid",
	1: "Days_7",
	2: "Days_21",
	3: "Months_1",
	4: "Months_3",
}

var LockupTypes_value = map[string]int32{
	"Invalid":  0,
	"Days_7":   1,
	"Days_21":  2,
	"Months_1": 3,
	"Months_3": 4,
}

func (x LockupTypes) String() string {
	return proto.EnumName(LockupTypes_name, int32(x))
}

func (LockupTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_910d3f484eab02ad, []int{0}
}

// QCoins defines encoding/decoding for the slice of sdk.coins to be used in KV stores.
type QCoins struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *QCoins) Reset()         { *m = QCoins{} }
func (m *QCoins) String() string { return proto.CompactTextString(m) }
func (*QCoins) ProtoMessage()    {}
func (*QCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_910d3f484eab02ad, []int{0}
}
func (m *QCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QCoins.Merge(m, src)
}
func (m *QCoins) XXX_Size() int {
	return m.Size()
}
func (m *QCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_QCoins.DiscardUnknown(m)
}

var xxx_messageInfo_QCoins proto.InternalMessageInfo

func (m *QCoins) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

// QDenoms defines encoding/decoding for the slice of denoms to be used in KV stores
type QDenoms struct {
	Denoms []string `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *QDenoms) Reset()         { *m = QDenoms{} }
func (m *QDenoms) String() string { return proto.CompactTextString(m) }
func (*QDenoms) ProtoMessage()    {}
func (*QDenoms) Descriptor() ([]byte, []int) {
	return fileDescriptor_910d3f484eab02ad, []int{1}
}
func (m *QDenoms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QDenoms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QDenoms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QDenoms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QDenoms.Merge(m, src)
}
func (m *QDenoms) XXX_Size() int {
	return m.Size()
}
func (m *QDenoms) XXX_DiscardUnknown() {
	xxx_messageInfo_QDenoms.DiscardUnknown(m)
}

var xxx_messageInfo_QDenoms proto.InternalMessageInfo

func (m *QDenoms) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

type EpochLockupCoinInfo struct {
	EpochDay     uint64      `protobuf:"varint,1,opt,name=epochDay,proto3" json:"epochDay,omitempty"`
	LockupPeriod LockupTypes `protobuf:"varint,2,opt,name=lockupPeriod,proto3,enum=quasarlabs.quasarnode.qbank.LockupTypes" json:"lockupPeriod,omitempty"`
	Coin         types.Coin  `protobuf:"bytes,3,opt,name=coin,proto3" json:"coin"`
}

func (m *EpochLockupCoinInfo) Reset()         { *m = EpochLockupCoinInfo{} }
func (m *EpochLockupCoinInfo) String() string { return proto.CompactTextString(m) }
func (*EpochLockupCoinInfo) ProtoMessage()    {}
func (*EpochLockupCoinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_910d3f484eab02ad, []int{2}
}
func (m *EpochLockupCoinInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochLockupCoinInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochLockupCoinInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochLockupCoinInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochLockupCoinInfo.Merge(m, src)
}
func (m *EpochLockupCoinInfo) XXX_Size() int {
	return m.Size()
}
func (m *EpochLockupCoinInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochLockupCoinInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EpochLockupCoinInfo proto.InternalMessageInfo

func (m *EpochLockupCoinInfo) GetEpochDay() uint64 {
	if m != nil {
		return m.EpochDay
	}
	return 0
}

func (m *EpochLockupCoinInfo) GetLockupPeriod() LockupTypes {
	if m != nil {
		return m.LockupPeriod
	}
	return LockupTypes_Invalid
}

func (m *EpochLockupCoinInfo) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type EpochLockupCoins struct {
	Infos []EpochLockupCoinInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos"`
}

func (m *EpochLockupCoins) Reset()         { *m = EpochLockupCoins{} }
func (m *EpochLockupCoins) String() string { return proto.CompactTextString(m) }
func (*EpochLockupCoins) ProtoMessage()    {}
func (*EpochLockupCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_910d3f484eab02ad, []int{3}
}
func (m *EpochLockupCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochLockupCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochLockupCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochLockupCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochLockupCoins.Merge(m, src)
}
func (m *EpochLockupCoins) XXX_Size() int {
	return m.Size()
}
func (m *EpochLockupCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochLockupCoins.DiscardUnknown(m)
}

var xxx_messageInfo_EpochLockupCoins proto.InternalMessageInfo

func (m *EpochLockupCoins) GetInfos() []EpochLockupCoinInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func init() {
	proto.RegisterEnum("quasarlabs.quasarnode.qbank.LockupTypes", LockupTypes_name, LockupTypes_value)
	proto.RegisterType((*QCoins)(nil), "quasarlabs.quasarnode.qbank.QCoins")
	proto.RegisterType((*QDenoms)(nil), "quasarlabs.quasarnode.qbank.QDenoms")
	proto.RegisterType((*EpochLockupCoinInfo)(nil), "quasarlabs.quasarnode.qbank.EpochLockupCoinInfo")
	proto.RegisterType((*EpochLockupCoins)(nil), "quasarlabs.quasarnode.qbank.EpochLockupCoins")
}

func init() { proto.RegisterFile("qbank/common.proto", fileDescriptor_910d3f484eab02ad) }

var fileDescriptor_910d3f484eab02ad = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xf5, 0x36, 0x69, 0x5a, 0x26, 0x15, 0xb2, 0x16, 0x84, 0x42, 0x90, 0xdc, 0xe0, 0x93, 0x85,
	0xc4, 0x6e, 0x9d, 0x1c, 0xb8, 0x97, 0x20, 0x51, 0x29, 0x08, 0x6a, 0x71, 0xe2, 0x52, 0xd6, 0x1f,
	0x4d, 0x2c, 0xc7, 0x3b, 0x6e, 0xd6, 0xa9, 0xc8, 0xbf, 0xe0, 0x77, 0x70, 0xe6, 0x47, 0xf4, 0xd8,
	0x23, 0x27, 0x40, 0xc9, 0x1f, 0x41, 0xbb, 0x6b, 0x68, 0x40, 0x28, 0x27, 0xbf, 0x59, 0xbf, 0x79,
	0xf3, 0xf6, 0xed, 0x00, 0xbd, 0x8a, 0x85, 0x2c, 0x78, 0x82, 0x65, 0x89, 0x92, 0x55, 0x0b, 0xac,
	0x91, 0x3e, 0xb9, 0x5a, 0x0a, 0x25, 0x16, 0x73, 0x11, 0x2b, 0x66, 0xa1, 0xc4, 0x34, 0x63, 0x86,
	0xd9, 0xf7, 0x12, 0x54, 0x25, 0x2a, 0x1e, 0x0b, 0x95, 0xf1, 0xeb, 0x30, 0xce, 0x6a, 0x11, 0xf2,
	0x04, 0xf3, 0xa6, 0xb9, 0xff, 0x70, 0x8a, 0x53, 0x34, 0x90, 0x6b, 0x64, 0x4f, 0xfd, 0x02, 0x3a,
	0xe7, 0x2f, 0x31, 0x97, 0x8a, 0x0a, 0xd8, 0xd7, 0x6c, 0xd5, 0x23, 0x83, 0x56, 0xd0, 0x1d, 0x3e,
	0x66, 0x56, 0x8f, 0x69, 0x3d, 0xd6, 0xe8, 0x31, 0x4d, 0x3d, 0x3d, 0xb9, 0xf9, 0x7e, 0xec, 0x7c,
	0xf9, 0x71, 0x1c, 0x4c, 0xf3, 0x7a, 0xb6, 0x8c, 0x59, 0x82, 0x25, 0x6f, 0x86, 0xdb, 0xcf, 0x73,
	0x95, 0x16, 0xbc, 0x5e, 0x55, 0x99, 0x32, 0x0d, 0x2a, 0xb2, 0xca, 0xfe, 0x53, 0x38, 0x38, 0x1f,
	0x67, 0x12, 0x4b, 0x45, 0x1f, 0x41, 0x27, 0x35, 0xc8, 0x8c, 0xbb, 0x17, 0x35, 0x95, 0xff, 0x95,
	0xc0, 0x83, 0x57, 0x15, 0x26, 0xb3, 0x09, 0x26, 0xc5, 0xb2, 0xd2, 0xed, 0x67, 0xf2, 0x12, 0x69,
	0x1f, 0x0e, 0x33, 0x7d, 0x3c, 0x16, 0xab, 0x1e, 0x19, 0x90, 0xa0, 0x1d, 0xfd, 0xa9, 0xe9, 0x04,
	0x8e, 0xe6, 0x86, 0xfd, 0x2e, 0x5b, 0xe4, 0x98, 0xf6, 0xf6, 0x06, 0x24, 0xb8, 0x3f, 0x0c, 0xd8,
	0x8e, 0xb4, 0x98, 0x95, 0x7f, 0xaf, 0x3d, 0x46, 0x7f, 0x75, 0xd3, 0x11, 0xb4, 0xb5, 0xdb, 0x5e,
	0x6b, 0x40, 0x76, 0xc7, 0xd0, 0xd6, 0x31, 0x44, 0x86, 0xec, 0x7f, 0x04, 0xf7, 0x1f, 0xd7, 0x8a,
	0x4e, 0x60, 0x3f, 0x97, 0x97, 0xf8, 0x3b, 0xd0, 0x93, 0x9d, 0x7e, 0xfe, 0x73, 0xe7, 0x66, 0x80,
	0x15, 0x79, 0xf6, 0x16, 0xba, 0x5b, 0x9e, 0x69, 0x17, 0x0e, 0xce, 0xe4, 0xb5, 0x98, 0xe7, 0xa9,
	0xeb, 0x50, 0x80, 0xce, 0x58, 0xac, 0xd4, 0xc5, 0x0b, 0x97, 0xe8, 0x1f, 0x06, 0x0f, 0x43, 0x77,
	0x8f, 0x1e, 0xc1, 0xe1, 0x1b, 0x94, 0xf5, 0x4c, 0x5d, 0x84, 0x6e, 0x6b, 0xab, 0x1a, 0xb9, 0xed,
	0xd3, 0xd7, 0x37, 0x6b, 0x8f, 0xdc, 0xae, 0x3d, 0xf2, 0x73, 0xed, 0x91, 0xcf, 0x1b, 0xcf, 0xb9,
	0xdd, 0x78, 0xce, 0xb7, 0x8d, 0xe7, 0x7c, 0x60, 0x5b, 0xef, 0x7a, 0xe7, 0x99, 0xdf, 0x79, 0xe6,
	0x9f, 0xb8, 0xdd, 0x4e, 0xf3, 0xc6, 0x71, 0xc7, 0xac, 0xd2, 0xe8, 0x57, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd4, 0xd0, 0x0a, 0xf9, 0xb3, 0x02, 0x00, 0x00,
}

func (m *QCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QDenoms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QDenoms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QDenoms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EpochLockupCoinInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochLockupCoinInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochLockupCoinInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LockupPeriod != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.LockupPeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochDay != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.EpochDay))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochLockupCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochLockupCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochLockupCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *QDenoms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *EpochLockupCoinInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochDay != 0 {
		n += 1 + sovCommon(uint64(m.EpochDay))
	}
	if m.LockupPeriod != 0 {
		n += 1 + sovCommon(uint64(m.LockupPeriod))
	}
	l = m.Coin.Size()
	n += 1 + l + sovCommon(uint64(l))
	return n
}

func (m *EpochLockupCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QDenoms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QDenoms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QDenoms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochLockupCoinInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochLockupCoinInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochLockupCoinInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDay", wireType)
			}
			m.EpochDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochDay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			m.LockupPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockupPeriod |= LockupTypes(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochLockupCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochLockupCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochLockupCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, EpochLockupCoinInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
