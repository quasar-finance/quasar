// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qoracle/bandchain.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BandchainParams struct {
	OracleIbcParams IBCParams       `protobuf:"bytes,1,opt,name=oracle_ibc_params,json=oracleIbcParams,proto3" json:"oracle_ibc_params" yaml:"oracle_ibc_params"`
	CoinRatesParams CoinRatesParams `protobuf:"bytes,2,opt,name=coin_rates_params,json=coinRatesParams,proto3" json:"coin_rates_params" yaml:"coin_rates_params"`
}

func (m *BandchainParams) Reset()         { *m = BandchainParams{} }
func (m *BandchainParams) String() string { return proto.CompactTextString(m) }
func (*BandchainParams) ProtoMessage()    {}
func (*BandchainParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_46396ce9bece8404, []int{0}
}
func (m *BandchainParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BandchainParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BandchainParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BandchainParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandchainParams.Merge(m, src)
}
func (m *BandchainParams) XXX_Size() int {
	return m.Size()
}
func (m *BandchainParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BandchainParams.DiscardUnknown(m)
}

var xxx_messageInfo_BandchainParams proto.InternalMessageInfo

func (m *BandchainParams) GetOracleIbcParams() IBCParams {
	if m != nil {
		return m.OracleIbcParams
	}
	return IBCParams{}
}

func (m *BandchainParams) GetCoinRatesParams() CoinRatesParams {
	if m != nil {
		return m.CoinRatesParams
	}
	return CoinRatesParams{}
}

type CoinRatesParams struct {
	EpochIdentifier string             `protobuf:"bytes,1,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty" yaml:"epoch_identifier"`
	Symbols         []string           `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty" yaml:"symbols"`
	ScriptParams    OracleScriptParams `protobuf:"bytes,3,opt,name=script_params,json=scriptParams,proto3" json:"script_params" yaml:"script_params"`
}

func (m *CoinRatesParams) Reset()         { *m = CoinRatesParams{} }
func (m *CoinRatesParams) String() string { return proto.CompactTextString(m) }
func (*CoinRatesParams) ProtoMessage()    {}
func (*CoinRatesParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_46396ce9bece8404, []int{1}
}
func (m *CoinRatesParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinRatesParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinRatesParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinRatesParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinRatesParams.Merge(m, src)
}
func (m *CoinRatesParams) XXX_Size() int {
	return m.Size()
}
func (m *CoinRatesParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinRatesParams.DiscardUnknown(m)
}

var xxx_messageInfo_CoinRatesParams proto.InternalMessageInfo

func (m *CoinRatesParams) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *CoinRatesParams) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *CoinRatesParams) GetScriptParams() OracleScriptParams {
	if m != nil {
		return m.ScriptParams
	}
	return OracleScriptParams{}
}

type OracleScriptParams struct {
	ScriptId   uint64                                   `protobuf:"varint,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty" yaml:"script_id"`
	AskCount   uint64                                   `protobuf:"varint,2,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty" yaml:"ask_count"`
	MinCount   uint64                                   `protobuf:"varint,3,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty" yaml:"min_count"`
	FeeLimit   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=fee_limit,json=feeLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_limit"`
	PrepareGas uint64                                   `protobuf:"varint,5,opt,name=prepare_gas,json=prepareGas,proto3" json:"prepare_gas,omitempty" yaml:"prepare_gas"`
	ExecuteGas uint64                                   `protobuf:"varint,6,opt,name=execute_gas,json=executeGas,proto3" json:"execute_gas,omitempty" yaml:"execute_gas"`
}

func (m *OracleScriptParams) Reset()         { *m = OracleScriptParams{} }
func (m *OracleScriptParams) String() string { return proto.CompactTextString(m) }
func (*OracleScriptParams) ProtoMessage()    {}
func (*OracleScriptParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_46396ce9bece8404, []int{2}
}
func (m *OracleScriptParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleScriptParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleScriptParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleScriptParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleScriptParams.Merge(m, src)
}
func (m *OracleScriptParams) XXX_Size() int {
	return m.Size()
}
func (m *OracleScriptParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleScriptParams.DiscardUnknown(m)
}

var xxx_messageInfo_OracleScriptParams proto.InternalMessageInfo

func (m *OracleScriptParams) GetScriptId() uint64 {
	if m != nil {
		return m.ScriptId
	}
	return 0
}

func (m *OracleScriptParams) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *OracleScriptParams) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *OracleScriptParams) GetFeeLimit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeLimit
	}
	return nil
}

func (m *OracleScriptParams) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *OracleScriptParams) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

type OracleScriptState struct {
	CallData              *types1.Any `protobuf:"bytes,1,opt,name=call_data,json=callData,proto3" json:"call_data,omitempty"`
	RequestPacketSequence uint64      `protobuf:"varint,2,opt,name=request_packet_sequence,json=requestPacketSequence,proto3" json:"request_packet_sequence,omitempty"`
	OracleRequestId       uint64      `protobuf:"varint,3,opt,name=oracle_request_id,json=oracleRequestId,proto3" json:"oracle_request_id,omitempty"`
	ResultPacketSequence  uint64      `protobuf:"varint,4,opt,name=result_packet_sequence,json=resultPacketSequence,proto3" json:"result_packet_sequence,omitempty"`
	Result                *types1.Any `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	Failed                bool        `protobuf:"varint,6,opt,name=failed,proto3" json:"failed,omitempty"`
	UpdatedAtHeight       int64       `protobuf:"varint,7,opt,name=updated_at_height,json=updatedAtHeight,proto3" json:"updated_at_height,omitempty"`
}

func (m *OracleScriptState) Reset()         { *m = OracleScriptState{} }
func (m *OracleScriptState) String() string { return proto.CompactTextString(m) }
func (*OracleScriptState) ProtoMessage()    {}
func (*OracleScriptState) Descriptor() ([]byte, []int) {
	return fileDescriptor_46396ce9bece8404, []int{3}
}
func (m *OracleScriptState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleScriptState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleScriptState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleScriptState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleScriptState.Merge(m, src)
}
func (m *OracleScriptState) XXX_Size() int {
	return m.Size()
}
func (m *OracleScriptState) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleScriptState.DiscardUnknown(m)
}

var xxx_messageInfo_OracleScriptState proto.InternalMessageInfo

func (m *OracleScriptState) GetCallData() *types1.Any {
	if m != nil {
		return m.CallData
	}
	return nil
}

func (m *OracleScriptState) GetRequestPacketSequence() uint64 {
	if m != nil {
		return m.RequestPacketSequence
	}
	return 0
}

func (m *OracleScriptState) GetOracleRequestId() uint64 {
	if m != nil {
		return m.OracleRequestId
	}
	return 0
}

func (m *OracleScriptState) GetResultPacketSequence() uint64 {
	if m != nil {
		return m.ResultPacketSequence
	}
	return 0
}

func (m *OracleScriptState) GetResult() *types1.Any {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *OracleScriptState) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *OracleScriptState) GetUpdatedAtHeight() int64 {
	if m != nil {
		return m.UpdatedAtHeight
	}
	return 0
}

type CoinRatesCallData struct {
	Symbols    []string `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Multiplier uint64   `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (m *CoinRatesCallData) Reset()         { *m = CoinRatesCallData{} }
func (m *CoinRatesCallData) String() string { return proto.CompactTextString(m) }
func (*CoinRatesCallData) ProtoMessage()    {}
func (*CoinRatesCallData) Descriptor() ([]byte, []int) {
	return fileDescriptor_46396ce9bece8404, []int{4}
}
func (m *CoinRatesCallData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinRatesCallData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinRatesCallData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinRatesCallData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinRatesCallData.Merge(m, src)
}
func (m *CoinRatesCallData) XXX_Size() int {
	return m.Size()
}
func (m *CoinRatesCallData) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinRatesCallData.DiscardUnknown(m)
}

var xxx_messageInfo_CoinRatesCallData proto.InternalMessageInfo

func (m *CoinRatesCallData) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *CoinRatesCallData) GetMultiplier() uint64 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

type CoinRatesResult struct {
	Rates []uint64 `protobuf:"varint,1,rep,packed,name=rates,proto3" json:"rates,omitempty"`
}

func (m *CoinRatesResult) Reset()         { *m = CoinRatesResult{} }
func (m *CoinRatesResult) String() string { return proto.CompactTextString(m) }
func (*CoinRatesResult) ProtoMessage()    {}
func (*CoinRatesResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_46396ce9bece8404, []int{5}
}
func (m *CoinRatesResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinRatesResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinRatesResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinRatesResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinRatesResult.Merge(m, src)
}
func (m *CoinRatesResult) XXX_Size() int {
	return m.Size()
}
func (m *CoinRatesResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinRatesResult.DiscardUnknown(m)
}

var xxx_messageInfo_CoinRatesResult proto.InternalMessageInfo

func (m *CoinRatesResult) GetRates() []uint64 {
	if m != nil {
		return m.Rates
	}
	return nil
}

type OraclePrices struct {
	Prices          github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=prices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"prices"`
	UpdatedAtHeight int64                                       `protobuf:"varint,2,opt,name=updated_at_height,json=updatedAtHeight,proto3" json:"updated_at_height,omitempty"`
}

func (m *OraclePrices) Reset()         { *m = OraclePrices{} }
func (m *OraclePrices) String() string { return proto.CompactTextString(m) }
func (*OraclePrices) ProtoMessage()    {}
func (*OraclePrices) Descriptor() ([]byte, []int) {
	return fileDescriptor_46396ce9bece8404, []int{6}
}
func (m *OraclePrices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OraclePrices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OraclePrices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OraclePrices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OraclePrices.Merge(m, src)
}
func (m *OraclePrices) XXX_Size() int {
	return m.Size()
}
func (m *OraclePrices) XXX_DiscardUnknown() {
	xxx_messageInfo_OraclePrices.DiscardUnknown(m)
}

var xxx_messageInfo_OraclePrices proto.InternalMessageInfo

func (m *OraclePrices) GetPrices() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *OraclePrices) GetUpdatedAtHeight() int64 {
	if m != nil {
		return m.UpdatedAtHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*BandchainParams)(nil), "abag.quasarnode.qoracle.BandchainParams")
	proto.RegisterType((*CoinRatesParams)(nil), "abag.quasarnode.qoracle.CoinRatesParams")
	proto.RegisterType((*OracleScriptParams)(nil), "abag.quasarnode.qoracle.OracleScriptParams")
	proto.RegisterType((*OracleScriptState)(nil), "abag.quasarnode.qoracle.OracleScriptState")
	proto.RegisterType((*CoinRatesCallData)(nil), "abag.quasarnode.qoracle.CoinRatesCallData")
	proto.RegisterType((*CoinRatesResult)(nil), "abag.quasarnode.qoracle.CoinRatesResult")
	proto.RegisterType((*OraclePrices)(nil), "abag.quasarnode.qoracle.OraclePrices")
}

func init() { proto.RegisterFile("qoracle/bandchain.proto", fileDescriptor_46396ce9bece8404) }

var fileDescriptor_46396ce9bece8404 = []byte{
	// 842 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x2d, 0x47, 0x91, 0xd7, 0x69, 0x15, 0x11, 0xaa, 0xad, 0xb8, 0x01, 0x65, 0xec, 0xa5,
	0x42, 0xd2, 0x92, 0xb1, 0x53, 0xb4, 0x40, 0x6f, 0xa1, 0x8d, 0xa6, 0x02, 0x5a, 0xd4, 0x58, 0xdf,
	0x7a, 0x21, 0x96, 0xcb, 0x15, 0xb5, 0x30, 0xc9, 0xa5, 0xb9, 0xcb, 0x20, 0x7a, 0x84, 0xde, 0xfa,
	0x12, 0xbd, 0xf4, 0x49, 0x72, 0x0c, 0x7a, 0xea, 0x49, 0x2d, 0xec, 0x37, 0xf0, 0xb5, 0x97, 0x62,
	0x7f, 0x28, 0xd3, 0xb2, 0x0d, 0xf4, 0xc4, 0x9d, 0x9f, 0x6f, 0x66, 0xf6, 0x9b, 0x99, 0x25, 0xd8,
	0xbb, 0xe0, 0x15, 0x26, 0x19, 0x0d, 0x62, 0x5c, 0x24, 0x64, 0x8e, 0x59, 0xe1, 0x97, 0x15, 0x97,
	0xdc, 0xdd, 0xc3, 0x31, 0x4e, 0xfd, 0x8b, 0x1a, 0x0b, 0x5c, 0x15, 0x3c, 0xa1, 0xbe, 0x75, 0xdc,
	0x1f, 0xa6, 0x3c, 0xe5, 0xda, 0x27, 0x50, 0x27, 0xe3, 0xbe, 0xff, 0x2c, 0xe5, 0x3c, 0xcd, 0x68,
	0xa0, 0xa5, 0xb8, 0x9e, 0x05, 0xb8, 0x58, 0x58, 0x93, 0x47, 0xb8, 0xc8, 0xb9, 0x08, 0x62, 0x2c,
	0x68, 0xf0, 0xee, 0x30, 0xa6, 0x12, 0x1f, 0x06, 0x84, 0x37, 0x99, 0xf6, 0x07, 0x4d, 0x09, 0x2c,
	0x26, 0x46, 0x05, 0xff, 0x75, 0x40, 0x3f, 0x6c, 0x0a, 0x3a, 0xc5, 0x15, 0xce, 0x85, 0x5b, 0x82,
	0x81, 0xf1, 0x8b, 0x58, 0x4c, 0xa2, 0x52, 0x2b, 0x47, 0xce, 0x81, 0x33, 0xd9, 0x39, 0x82, 0xfe,
	0x03, 0xc5, 0xfa, 0xd3, 0xf0, 0xd8, 0xc0, 0xc3, 0x83, 0x0f, 0xcb, 0xf1, 0xc6, 0xf5, 0x72, 0x3c,
	0x5a, 0xe0, 0x3c, 0xfb, 0x0e, 0xde, 0x09, 0x05, 0x51, 0xdf, 0xe8, 0xa6, 0x31, 0xb1, 0x19, 0xdf,
	0x81, 0x81, 0x2a, 0x33, 0xaa, 0xb0, 0xa4, 0xa2, 0xc9, 0xb8, 0xa9, 0x33, 0x4e, 0x1e, 0xcc, 0x78,
	0xcc, 0x59, 0x81, 0x14, 0xe0, 0xfe, 0xbc, 0x77, 0x02, 0x42, 0xd4, 0x27, 0xb7, 0x21, 0xfa, 0xf6,
	0x6b, 0x61, 0xdc, 0xef, 0xc1, 0x53, 0x5a, 0x72, 0x32, 0x8f, 0x58, 0x42, 0x0b, 0xc9, 0x66, 0x8c,
	0x56, 0xfa, 0xf2, 0xdb, 0xe1, 0xe7, 0xd7, 0xcb, 0xf1, 0x9e, 0x09, 0xbe, 0xee, 0x01, 0x51, 0x5f,
	0xab, 0xa6, 0x2b, 0x8d, 0xfb, 0x0a, 0x3c, 0x16, 0x8b, 0x3c, 0xe6, 0x99, 0xba, 0x49, 0x67, 0xb2,
	0x1d, 0xee, 0xda, 0xfa, 0x3e, 0x35, 0x21, 0xac, 0x11, 0xa2, 0xc6, 0xcd, 0x2d, 0xc0, 0x27, 0x82,
	0x54, 0xac, 0x94, 0x0d, 0x03, 0x1d, 0xcd, 0xc0, 0xcb, 0x07, 0x19, 0xf8, 0x59, 0x7f, 0xce, 0x34,
	0xc6, 0x92, 0xf0, 0xdc, 0x26, 0x19, 0xda, 0x24, 0xed, 0x78, 0x10, 0x3d, 0x11, 0x2d, 0x5f, 0xf8,
	0x6b, 0x07, 0xb8, 0x77, 0x43, 0xb8, 0x87, 0x60, 0xdb, 0xc2, 0x58, 0xa2, 0x6f, 0xbe, 0x15, 0x0e,
	0xaf, 0x97, 0xe3, 0xa7, 0xb7, 0x22, 0xb2, 0x04, 0xa2, 0x9e, 0x39, 0x4f, 0x13, 0x05, 0xc1, 0xe2,
	0x3c, 0x22, 0xbc, 0x2e, 0xa4, 0xee, 0xdb, 0x2d, 0xc8, 0xca, 0x04, 0x51, 0x0f, 0x8b, 0xf3, 0x63,
	0x75, 0x54, 0x90, 0x9c, 0x15, 0x16, 0xd2, 0x59, 0x87, 0xac, 0x4c, 0x10, 0xf5, 0x72, 0x56, 0x18,
	0xc8, 0x1c, 0x6c, 0xcf, 0x28, 0x8d, 0x32, 0x96, 0x33, 0x39, 0xda, 0x3a, 0xe8, 0x4c, 0x76, 0x8e,
	0x9e, 0xf9, 0x66, 0xe4, 0x7d, 0x35, 0xf2, 0xbe, 0x1d, 0x79, 0x3d, 0x19, 0xe1, 0x2b, 0xc5, 0xc4,
	0x1f, 0x7f, 0x8f, 0x27, 0x29, 0x93, 0xf3, 0x3a, 0xf6, 0x09, 0xcf, 0x03, 0xbb, 0x1f, 0xe6, 0xf3,
	0x95, 0x48, 0xce, 0x03, 0xb9, 0x28, 0xa9, 0xd0, 0x00, 0x81, 0x7a, 0x33, 0x4a, 0x7f, 0x54, 0xc1,
	0xdd, 0x6f, 0xc1, 0x4e, 0x59, 0xd1, 0x12, 0x57, 0x34, 0x4a, 0xb1, 0x18, 0x3d, 0xd2, 0xe5, 0xed,
	0x5e, 0x2f, 0xc7, 0xae, 0x29, 0xaf, 0x65, 0x84, 0x08, 0x58, 0xe9, 0x2d, 0x16, 0x0a, 0x48, 0xdf,
	0x53, 0x52, 0x4b, 0x03, 0xec, 0xae, 0x03, 0x5b, 0x46, 0x88, 0x80, 0x95, 0xde, 0x62, 0x01, 0xff,
	0xdc, 0x04, 0x83, 0x76, 0x2f, 0xce, 0x24, 0x96, 0x54, 0x91, 0x44, 0x70, 0x96, 0x45, 0x09, 0x96,
	0xd8, 0x6e, 0xe0, 0xd0, 0x37, 0xfb, 0xef, 0x37, 0xfb, 0xef, 0xbf, 0x29, 0x16, 0xa8, 0xa7, 0xdc,
	0x4e, 0xb0, 0xc4, 0xee, 0x37, 0x60, 0xaf, 0xa2, 0x17, 0x35, 0x15, 0xaa, 0xeb, 0xe4, 0x9c, 0xca,
	0x48, 0x28, 0xb1, 0x20, 0xd4, 0x34, 0x06, 0x7d, 0x66, 0xcd, 0xa7, 0xda, 0x7a, 0x66, 0x8d, 0xee,
	0x8b, 0xd5, 0xd2, 0x37, 0x70, 0x96, 0x98, 0xbe, 0x34, 0xeb, 0x8a, 0x8c, 0x7e, 0x9a, 0xb8, 0x5f,
	0x83, 0xdd, 0x8a, 0x8a, 0x3a, 0xbb, 0x9b, 0x62, 0x4b, 0x03, 0x86, 0xc6, 0xba, 0x96, 0xe1, 0x4b,
	0xd0, 0x35, 0x7a, 0xcd, 0xe7, 0x43, 0x37, 0xb1, 0x3e, 0xee, 0x2e, 0xe8, 0xce, 0x30, 0xcb, 0x68,
	0xa2, 0x49, 0xec, 0x21, 0x2b, 0xa9, 0x3a, 0xeb, 0x32, 0xc1, 0x92, 0x26, 0x11, 0x96, 0xd1, 0x9c,
	0xb2, 0x74, 0x2e, 0x47, 0x8f, 0x0f, 0x9c, 0x49, 0x07, 0xf5, 0xad, 0xe1, 0x8d, 0xfc, 0x41, 0xab,
	0xe1, 0x4f, 0x60, 0xb0, 0xda, 0xee, 0xe3, 0x86, 0xa0, 0xd1, 0xcd, 0x5e, 0x3a, 0x6a, 0x2f, 0x6f,
	0xf6, 0xcf, 0x03, 0x20, 0xaf, 0x33, 0xc9, 0xca, 0x4c, 0xed, 0xbc, 0x61, 0xab, 0xa5, 0x81, 0x5f,
	0xb4, 0x1e, 0x0b, 0x64, 0xaa, 0x1c, 0x82, 0x47, 0xfa, 0x89, 0xd1, 0xa1, 0xb6, 0x90, 0x11, 0xe0,
	0xef, 0x0e, 0x78, 0x62, 0x9a, 0x79, 0x5a, 0x31, 0x42, 0x85, 0xcb, 0x40, 0xb7, 0xd4, 0x27, 0xed,
	0xb7, 0x73, 0xf4, 0xfc, 0xde, 0xb1, 0x3d, 0xa1, 0x44, 0x4f, 0xee, 0x6b, 0x3b, 0xb9, 0x2f, 0xff,
	0xc7, 0xe4, 0x5a, 0x8c, 0x40, 0x36, 0xc1, 0xfd, 0xfc, 0x6c, 0xde, 0xcb, 0x4f, 0x78, 0xf2, 0xe1,
	0xd2, 0x73, 0x3e, 0x5e, 0x7a, 0xce, 0x3f, 0x97, 0x9e, 0xf3, 0xdb, 0x95, 0xb7, 0xf1, 0xf1, 0xca,
	0xdb, 0xf8, 0xeb, 0xca, 0xdb, 0xf8, 0xe5, 0x45, 0x2b, 0xb5, 0x7a, 0x7d, 0x82, 0x9b, 0xd7, 0x27,
	0x78, 0x1f, 0x34, 0xbf, 0x11, 0x5d, 0x42, 0xdc, 0xd5, 0xfd, 0x7b, 0xfd, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x63, 0x4d, 0x3f, 0x2a, 0xe1, 0x06, 0x00, 0x00,
}

func (m *BandchainParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BandchainParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BandchainParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CoinRatesParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBandchain(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.OracleIbcParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBandchain(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CoinRatesParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinRatesParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinRatesParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ScriptParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBandchain(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintBandchain(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintBandchain(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleScriptParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleScriptParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleScriptParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecuteGas != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x30
	}
	if m.PrepareGas != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBandchain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MinCount != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x18
	}
	if m.AskCount != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ScriptId != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.ScriptId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OracleScriptState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleScriptState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleScriptState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAtHeight != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.UpdatedAtHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.Failed {
		i--
		if m.Failed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBandchain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ResultPacketSequence != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.ResultPacketSequence))
		i--
		dAtA[i] = 0x20
	}
	if m.OracleRequestId != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.OracleRequestId))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestPacketSequence != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.RequestPacketSequence))
		i--
		dAtA[i] = 0x10
	}
	if m.CallData != nil {
		{
			size, err := m.CallData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBandchain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinRatesCallData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinRatesCallData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinRatesCallData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Multiplier != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.Multiplier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintBandchain(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CoinRatesResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinRatesResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinRatesResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rates) > 0 {
		dAtA7 := make([]byte, len(m.Rates)*10)
		var j6 int
		for _, num := range m.Rates {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintBandchain(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OraclePrices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OraclePrices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OraclePrices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAtHeight != 0 {
		i = encodeVarintBandchain(dAtA, i, uint64(m.UpdatedAtHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBandchain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBandchain(dAtA []byte, offset int, v uint64) int {
	offset -= sovBandchain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BandchainParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OracleIbcParams.Size()
	n += 1 + l + sovBandchain(uint64(l))
	l = m.CoinRatesParams.Size()
	n += 1 + l + sovBandchain(uint64(l))
	return n
}

func (m *CoinRatesParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovBandchain(uint64(l))
	}
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovBandchain(uint64(l))
		}
	}
	l = m.ScriptParams.Size()
	n += 1 + l + sovBandchain(uint64(l))
	return n
}

func (m *OracleScriptParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScriptId != 0 {
		n += 1 + sovBandchain(uint64(m.ScriptId))
	}
	if m.AskCount != 0 {
		n += 1 + sovBandchain(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovBandchain(uint64(m.MinCount))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovBandchain(uint64(l))
		}
	}
	if m.PrepareGas != 0 {
		n += 1 + sovBandchain(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovBandchain(uint64(m.ExecuteGas))
	}
	return n
}

func (m *OracleScriptState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallData != nil {
		l = m.CallData.Size()
		n += 1 + l + sovBandchain(uint64(l))
	}
	if m.RequestPacketSequence != 0 {
		n += 1 + sovBandchain(uint64(m.RequestPacketSequence))
	}
	if m.OracleRequestId != 0 {
		n += 1 + sovBandchain(uint64(m.OracleRequestId))
	}
	if m.ResultPacketSequence != 0 {
		n += 1 + sovBandchain(uint64(m.ResultPacketSequence))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovBandchain(uint64(l))
	}
	if m.Failed {
		n += 2
	}
	if m.UpdatedAtHeight != 0 {
		n += 1 + sovBandchain(uint64(m.UpdatedAtHeight))
	}
	return n
}

func (m *CoinRatesCallData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovBandchain(uint64(l))
		}
	}
	if m.Multiplier != 0 {
		n += 1 + sovBandchain(uint64(m.Multiplier))
	}
	return n
}

func (m *CoinRatesResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rates) > 0 {
		l = 0
		for _, e := range m.Rates {
			l += sovBandchain(uint64(e))
		}
		n += 1 + sovBandchain(uint64(l)) + l
	}
	return n
}

func (m *OraclePrices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovBandchain(uint64(l))
		}
	}
	if m.UpdatedAtHeight != 0 {
		n += 1 + sovBandchain(uint64(m.UpdatedAtHeight))
	}
	return n
}

func sovBandchain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBandchain(x uint64) (n int) {
	return sovBandchain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BandchainParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BandchainParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BandchainParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleIbcParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleIbcParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinRatesParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinRatesParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinRatesParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinRatesParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinRatesParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScriptParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleScriptParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleScriptParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleScriptParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptId", wireType)
			}
			m.ScriptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScriptId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBandchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleScriptState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleScriptState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleScriptState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallData == nil {
				m.CallData = &types1.Any{}
			}
			if err := m.CallData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPacketSequence", wireType)
			}
			m.RequestPacketSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestPacketSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRequestId", wireType)
			}
			m.OracleRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultPacketSequence", wireType)
			}
			m.ResultPacketSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultPacketSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types1.Any{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failed = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtHeight", wireType)
			}
			m.UpdatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBandchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinRatesCallData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinRatesCallData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinRatesCallData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			m.Multiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multiplier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBandchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinRatesResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinRatesResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinRatesResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBandchain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rates = append(m.Rates, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBandchain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBandchain
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBandchain
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rates) == 0 {
					m.Rates = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBandchain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rates = append(m.Rates, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rates", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBandchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OraclePrices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OraclePrices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OraclePrices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, types.DecCoin{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAtHeight", wireType)
			}
			m.UpdatedAtHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAtHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBandchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBandchain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBandchain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBandchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBandchain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBandchain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBandchain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBandchain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBandchain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBandchain = fmt.Errorf("proto: unexpected end of group")
)
