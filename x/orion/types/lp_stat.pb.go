// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: orion/lp_stat.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LpStat is used to do the book keeping of Lping activity on a given epochday.
// Which includes, total number of Lping position and total LP tokens as []sdk.Coin
type LpStat struct {
	LpCount      uint64                                   `protobuf:"varint,1,opt,name=lpCount,proto3" json:"lpCount,omitempty"`
	TotalLPCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=totalLPCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"totalLPCoins"`
}

func (m *LpStat) Reset()         { *m = LpStat{} }
func (m *LpStat) String() string { return proto.CompactTextString(m) }
func (*LpStat) ProtoMessage()    {}
func (*LpStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bba3431559c6d6, []int{0}
}
func (m *LpStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LpStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LpStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LpStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LpStat.Merge(m, src)
}
func (m *LpStat) XXX_Size() int {
	return m.Size()
}
func (m *LpStat) XXX_DiscardUnknown() {
	xxx_messageInfo_LpStat.DiscardUnknown(m)
}

var xxx_messageInfo_LpStat proto.InternalMessageInfo

func (m *LpStat) GetLpCount() uint64 {
	if m != nil {
		return m.LpCount
	}
	return 0
}

func (m *LpStat) GetTotalLPCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalLPCoins
	}
	return nil
}

func init() {
	proto.RegisterType((*LpStat)(nil), "quasarlabs.quasarnode.orion.LpStat")
}

func init() { proto.RegisterFile("orion/lp_stat.proto", fileDescriptor_15bba3431559c6d6) }

var fileDescriptor_15bba3431559c6d6 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0x2f, 0xca, 0xcc,
	0xcf, 0xd3, 0xcf, 0x29, 0x88, 0x2f, 0x2e, 0x49, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x92, 0x2e, 0x2c, 0x4d, 0x2c, 0x4e, 0x2c, 0xca, 0x49, 0x4c, 0x2a, 0xd6, 0x83, 0x30, 0xf3, 0xf2,
	0x53, 0x52, 0xf5, 0xc0, 0x4a, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xea, 0xf4, 0x41, 0x2c,
	0x88, 0x16, 0x29, 0xb9, 0xe4, 0xfc, 0xe2, 0xdc, 0xfc, 0x62, 0xfd, 0xa4, 0xc4, 0xe2, 0x54, 0xfd,
	0x32, 0xc3, 0xa4, 0xd4, 0x92, 0x44, 0x43, 0xfd, 0xe4, 0xfc, 0xcc, 0x3c, 0x88, 0xbc, 0xd2, 0x64,
	0x46, 0x2e, 0x36, 0x9f, 0x82, 0xe0, 0x92, 0xc4, 0x12, 0x21, 0x09, 0x2e, 0xf6, 0x9c, 0x02, 0xe7,
	0xfc, 0xd2, 0xbc, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x18, 0x57, 0x28, 0x9f, 0x8b,
	0xa7, 0x24, 0xbf, 0x24, 0x31, 0xc7, 0x27, 0xc0, 0x39, 0x3f, 0x33, 0xaf, 0x58, 0x82, 0x49, 0x81,
	0x59, 0x83, 0xdb, 0x48, 0x52, 0x0f, 0x62, 0xb6, 0x1e, 0xc8, 0x6c, 0x3d, 0xa8, 0xd9, 0x7a, 0x20,
	0x15, 0x4e, 0x06, 0x27, 0xee, 0xc9, 0x33, 0xac, 0xba, 0x2f, 0xaf, 0x91, 0x9e, 0x59, 0x92, 0x51,
	0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0x75, 0x08, 0x84, 0xd2, 0x2d, 0x4e, 0xc9, 0xd6, 0x2f,
	0xa9, 0x2c, 0x48, 0x2d, 0x06, 0x6b, 0x28, 0x0e, 0x42, 0xb1, 0xc0, 0xc9, 0xe3, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63,
	0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xf4, 0x90, 0x4c, 0x44, 0x84, 0x86, 0x3e, 0x22, 0x34,
	0xf4, 0x2b, 0xf4, 0x21, 0x41, 0x07, 0x36, 0x3d, 0x89, 0x0d, 0xec, 0x4d, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x2c, 0x94, 0xa8, 0x6c, 0x50, 0x01, 0x00, 0x00,
}

func (m *LpStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LpStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LpStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalLPCoins) > 0 {
		for iNdEx := len(m.TotalLPCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalLPCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLpStat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LpCount != 0 {
		i = encodeVarintLpStat(dAtA, i, uint64(m.LpCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLpStat(dAtA []byte, offset int, v uint64) int {
	offset -= sovLpStat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LpStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LpCount != 0 {
		n += 1 + sovLpStat(uint64(m.LpCount))
	}
	if len(m.TotalLPCoins) > 0 {
		for _, e := range m.TotalLPCoins {
			l = e.Size()
			n += 1 + l + sovLpStat(uint64(l))
		}
	}
	return n
}

func sovLpStat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLpStat(x uint64) (n int) {
	return sovLpStat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LpStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLpStat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LpStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LpStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpCount", wireType)
			}
			m.LpCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LpCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLPCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpStat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpStat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpStat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalLPCoins = append(m.TotalLPCoins, types.Coin{})
			if err := m.TotalLPCoins[len(m.TotalLPCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLpStat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLpStat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLpStat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLpStat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLpStat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLpStat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLpStat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLpStat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLpStat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLpStat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLpStat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLpStat = fmt.Errorf("proto: unexpected end of group")
)
