// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: orion/account_info.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AccountInfo is used for orion module reserve account detail
type AccountInfo struct {
	Name    string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Account string                                   `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Balance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
}

func (m *AccountInfo) Reset()         { *m = AccountInfo{} }
func (m *AccountInfo) String() string { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()    {}
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdf72dd032113d34, []int{0}
}
func (m *AccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountInfo.Merge(m, src)
}
func (m *AccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *AccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountInfo proto.InternalMessageInfo

func (m *AccountInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccountInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AccountInfo) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountInfo)(nil), "quasarlabs.quasarnode.orion.AccountInfo")
}

func init() { proto.RegisterFile("orion/account_info.proto", fileDescriptor_cdf72dd032113d34) }

var fileDescriptor_cdf72dd032113d34 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xfb, 0x30,
	0x10, 0xc6, 0xe3, 0x7f, 0xff, 0xa2, 0x22, 0xdd, 0x22, 0x06, 0x53, 0x24, 0xb7, 0x62, 0xca, 0x82,
	0x8f, 0xc2, 0x13, 0x50, 0x16, 0x58, 0x3b, 0xb2, 0x20, 0xdb, 0x75, 0x83, 0x45, 0xe3, 0x2b, 0xb1,
	0x83, 0xe0, 0x2d, 0x78, 0x06, 0x46, 0x9e, 0xa4, 0x63, 0x47, 0x26, 0x40, 0xc9, 0x8b, 0xa0, 0xda,
	0xa9, 0xca, 0xe4, 0xcf, 0xf6, 0xdd, 0xf7, 0xbb, 0xfb, 0x52, 0x8a, 0x95, 0x41, 0x0b, 0x42, 0x29,
	0xac, 0xad, 0xbf, 0x37, 0x76, 0x81, 0x7c, 0x55, 0xa1, 0xc7, 0xec, 0xe4, 0xa9, 0x16, 0x4e, 0x54,
	0x4b, 0x21, 0x1d, 0x8f, 0xd2, 0xe2, 0x5c, 0xf3, 0x50, 0x3f, 0x3c, 0x2a, 0xb0, 0xc0, 0x50, 0x07,
	0x5b, 0x15, 0x5b, 0x86, 0x4c, 0xa1, 0x2b, 0xd1, 0x81, 0x14, 0x4e, 0xc3, 0xf3, 0x44, 0x6a, 0x2f,
	0x26, 0xa0, 0xd0, 0xd8, 0xf8, 0x7f, 0xfa, 0x4e, 0xd2, 0xc1, 0x55, 0x24, 0xdd, 0xda, 0x05, 0x66,
	0x59, 0xfa, 0xdf, 0x8a, 0x52, 0x53, 0x32, 0x26, 0xf9, 0xe1, 0x2c, 0xe8, 0x8c, 0xa6, 0xfd, 0x6e,
	0x18, 0xfa, 0x2f, 0x3c, 0xef, 0xae, 0x99, 0x4e, 0xfb, 0x52, 0x2c, 0x85, 0x55, 0x9a, 0xf6, 0xc6,
	0xbd, 0x7c, 0x70, 0x71, 0xcc, 0x23, 0x8f, 0x6f, 0x79, 0xbc, 0xe3, 0xf1, 0x6b, 0x34, 0x76, 0x7a,
	0xbe, 0xfe, 0x1a, 0x25, 0x1f, 0xdf, 0xa3, 0xbc, 0x30, 0xfe, 0xa1, 0x96, 0x5c, 0x61, 0x09, 0xdd,
	0x70, 0xf1, 0x38, 0x73, 0xf3, 0x47, 0xf0, 0xaf, 0x2b, 0xed, 0x42, 0x83, 0x9b, 0xed, 0xbc, 0xa7,
	0x37, 0xeb, 0x86, 0x91, 0x4d, 0xc3, 0xc8, 0x4f, 0xc3, 0xc8, 0x5b, 0xcb, 0x92, 0x4d, 0xcb, 0x92,
	0xcf, 0x96, 0x25, 0x77, 0xfc, 0x8f, 0xd9, 0x3e, 0x1c, 0xd8, 0x87, 0x03, 0x2f, 0x10, 0xe3, 0x0c,
	0xc6, 0xf2, 0x20, 0x6c, 0x7d, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x25, 0x85, 0xf1, 0x64,
	0x01, 0x00, 0x00,
}

func (m *AccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccountInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintAccountInfo(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAccountInfo(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccountInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccountInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAccountInfo(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovAccountInfo(uint64(l))
	}
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovAccountInfo(uint64(l))
		}
	}
	return n
}

func sovAccountInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccountInfo(x uint64) (n int) {
	return sovAccountInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccountInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccountInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccountInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccountInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccountInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccountInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccountInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccountInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccountInfo = fmt.Errorf("proto: unexpected end of group")
)
