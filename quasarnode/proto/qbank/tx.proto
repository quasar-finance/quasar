syntax = "proto3";
package abag.quasarnode.qbank;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/abag/quasarnode/x/qbank/types";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "qbank/common.proto";

// Msg defines the Msg service.
service Msg {
      rpc RequestDeposit(MsgRequestDeposit) returns (MsgRequestDepositResponse);
  rpc RequestWithdraw(MsgRequestWithdraw) returns (MsgRequestWithdrawResponse);
  rpc ClaimRewards(MsgClaimRewards) returns (MsgClaimRewardsResponse);
  rpc RequestWithdrawAll(MsgRequestWithdrawAll) returns (MsgRequestWithdrawAllResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgRequestDeposit {
  string creator = 1;
  string riskProfile = 2;
  string vaultID = 3;
  cosmos.base.v1beta1.Coin coin = 4 [ (gogoproto.nullable) = false ];
  // string lockupPeriod = 5;
  LockupTypes lockupPeriod  = 5;
}

message MsgRequestDepositResponse {
}

message MsgRequestWithdraw {
  string creator = 1;
  string riskProfile = 2;
  string vaultID = 3;
  cosmos.base.v1beta1.Coin coin = 4 [ (gogoproto.nullable) = false ];
}

message MsgRequestWithdrawResponse {
}
 
// MsgClaimRewards is tx message to claim all available rewards from the input vault.
// TODO - Should it move to a separate reward module to avoid cyclic dependencies between modules.
message MsgClaimRewards {
  string creator = 1;
  string vaultID = 2;
}

message MsgClaimRewardsResponse {
}

// MsgRequestWithdrawAll is tx message to withdraw all withdrawable amount from input vault.
message MsgRequestWithdrawAll {
  string creator = 1;
  string vaultID = 2;
}

message MsgRequestWithdrawAllResponse {
}

// this line is used by starport scaffolding # proto/tx/message