// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qoracle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPoolPositionRequest struct {
	PoolId string `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
}

func (m *QueryGetPoolPositionRequest) Reset()         { *m = QueryGetPoolPositionRequest{} }
func (m *QueryGetPoolPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolPositionRequest) ProtoMessage()    {}
func (*QueryGetPoolPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{2}
}
func (m *QueryGetPoolPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolPositionRequest.Merge(m, src)
}
func (m *QueryGetPoolPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolPositionRequest proto.InternalMessageInfo

func (m *QueryGetPoolPositionRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

type QueryGetPoolPositionResponse struct {
	PoolPosition PoolPosition `protobuf:"bytes,1,opt,name=poolPosition,proto3" json:"poolPosition"`
}

func (m *QueryGetPoolPositionResponse) Reset()         { *m = QueryGetPoolPositionResponse{} }
func (m *QueryGetPoolPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolPositionResponse) ProtoMessage()    {}
func (*QueryGetPoolPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{3}
}
func (m *QueryGetPoolPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolPositionResponse.Merge(m, src)
}
func (m *QueryGetPoolPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolPositionResponse proto.InternalMessageInfo

func (m *QueryGetPoolPositionResponse) GetPoolPosition() PoolPosition {
	if m != nil {
		return m.PoolPosition
	}
	return PoolPosition{}
}

type QueryAllPoolPositionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolPositionRequest) Reset()         { *m = QueryAllPoolPositionRequest{} }
func (m *QueryAllPoolPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolPositionRequest) ProtoMessage()    {}
func (*QueryAllPoolPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{4}
}
func (m *QueryAllPoolPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolPositionRequest.Merge(m, src)
}
func (m *QueryAllPoolPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolPositionRequest proto.InternalMessageInfo

func (m *QueryAllPoolPositionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolPositionResponse struct {
	PoolPosition []PoolPosition      `protobuf:"bytes,1,rep,name=poolPosition,proto3" json:"poolPosition"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolPositionResponse) Reset()         { *m = QueryAllPoolPositionResponse{} }
func (m *QueryAllPoolPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolPositionResponse) ProtoMessage()    {}
func (*QueryAllPoolPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{5}
}
func (m *QueryAllPoolPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolPositionResponse.Merge(m, src)
}
func (m *QueryAllPoolPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolPositionResponse proto.InternalMessageInfo

func (m *QueryAllPoolPositionResponse) GetPoolPosition() []PoolPosition {
	if m != nil {
		return m.PoolPosition
	}
	return nil
}

func (m *QueryAllPoolPositionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPoolRankingRequest struct {
}

func (m *QueryGetPoolRankingRequest) Reset()         { *m = QueryGetPoolRankingRequest{} }
func (m *QueryGetPoolRankingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolRankingRequest) ProtoMessage()    {}
func (*QueryGetPoolRankingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{6}
}
func (m *QueryGetPoolRankingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolRankingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolRankingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolRankingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolRankingRequest.Merge(m, src)
}
func (m *QueryGetPoolRankingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolRankingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolRankingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolRankingRequest proto.InternalMessageInfo

type QueryGetPoolRankingResponse struct {
	PoolRanking PoolRanking `protobuf:"bytes,1,opt,name=PoolRanking,proto3" json:"PoolRanking"`
}

func (m *QueryGetPoolRankingResponse) Reset()         { *m = QueryGetPoolRankingResponse{} }
func (m *QueryGetPoolRankingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolRankingResponse) ProtoMessage()    {}
func (*QueryGetPoolRankingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{7}
}
func (m *QueryGetPoolRankingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolRankingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolRankingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolRankingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolRankingResponse.Merge(m, src)
}
func (m *QueryGetPoolRankingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolRankingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolRankingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolRankingResponse proto.InternalMessageInfo

func (m *QueryGetPoolRankingResponse) GetPoolRanking() PoolRanking {
	if m != nil {
		return m.PoolRanking
	}
	return PoolRanking{}
}

type QueryGetPoolSpotPriceRequest struct {
	PoolId   string `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	DenomIn  string `protobuf:"bytes,2,opt,name=denomIn,proto3" json:"denomIn,omitempty"`
	DenomOut string `protobuf:"bytes,3,opt,name=denomOut,proto3" json:"denomOut,omitempty"`
}

func (m *QueryGetPoolSpotPriceRequest) Reset()         { *m = QueryGetPoolSpotPriceRequest{} }
func (m *QueryGetPoolSpotPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolSpotPriceRequest) ProtoMessage()    {}
func (*QueryGetPoolSpotPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{8}
}
func (m *QueryGetPoolSpotPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolSpotPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolSpotPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolSpotPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolSpotPriceRequest.Merge(m, src)
}
func (m *QueryGetPoolSpotPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolSpotPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolSpotPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolSpotPriceRequest proto.InternalMessageInfo

func (m *QueryGetPoolSpotPriceRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *QueryGetPoolSpotPriceRequest) GetDenomIn() string {
	if m != nil {
		return m.DenomIn
	}
	return ""
}

func (m *QueryGetPoolSpotPriceRequest) GetDenomOut() string {
	if m != nil {
		return m.DenomOut
	}
	return ""
}

type QueryGetPoolSpotPriceResponse struct {
	PoolSpotPrice PoolSpotPrice `protobuf:"bytes,1,opt,name=poolSpotPrice,proto3" json:"poolSpotPrice"`
}

func (m *QueryGetPoolSpotPriceResponse) Reset()         { *m = QueryGetPoolSpotPriceResponse{} }
func (m *QueryGetPoolSpotPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolSpotPriceResponse) ProtoMessage()    {}
func (*QueryGetPoolSpotPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{9}
}
func (m *QueryGetPoolSpotPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolSpotPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolSpotPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolSpotPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolSpotPriceResponse.Merge(m, src)
}
func (m *QueryGetPoolSpotPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolSpotPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolSpotPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolSpotPriceResponse proto.InternalMessageInfo

func (m *QueryGetPoolSpotPriceResponse) GetPoolSpotPrice() PoolSpotPrice {
	if m != nil {
		return m.PoolSpotPrice
	}
	return PoolSpotPrice{}
}

type QueryAllPoolSpotPriceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolSpotPriceRequest) Reset()         { *m = QueryAllPoolSpotPriceRequest{} }
func (m *QueryAllPoolSpotPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolSpotPriceRequest) ProtoMessage()    {}
func (*QueryAllPoolSpotPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{10}
}
func (m *QueryAllPoolSpotPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolSpotPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolSpotPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolSpotPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolSpotPriceRequest.Merge(m, src)
}
func (m *QueryAllPoolSpotPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolSpotPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolSpotPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolSpotPriceRequest proto.InternalMessageInfo

func (m *QueryAllPoolSpotPriceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolSpotPriceResponse struct {
	PoolSpotPrice []PoolSpotPrice     `protobuf:"bytes,1,rep,name=poolSpotPrice,proto3" json:"poolSpotPrice"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolSpotPriceResponse) Reset()         { *m = QueryAllPoolSpotPriceResponse{} }
func (m *QueryAllPoolSpotPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolSpotPriceResponse) ProtoMessage()    {}
func (*QueryAllPoolSpotPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{11}
}
func (m *QueryAllPoolSpotPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolSpotPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolSpotPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolSpotPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolSpotPriceResponse.Merge(m, src)
}
func (m *QueryAllPoolSpotPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolSpotPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolSpotPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolSpotPriceResponse proto.InternalMessageInfo

func (m *QueryAllPoolSpotPriceResponse) GetPoolSpotPrice() []PoolSpotPrice {
	if m != nil {
		return m.PoolSpotPrice
	}
	return nil
}

func (m *QueryAllPoolSpotPriceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPoolInfoRequest struct {
	PoolId string `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
}

func (m *QueryGetPoolInfoRequest) Reset()         { *m = QueryGetPoolInfoRequest{} }
func (m *QueryGetPoolInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolInfoRequest) ProtoMessage()    {}
func (*QueryGetPoolInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{12}
}
func (m *QueryGetPoolInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolInfoRequest.Merge(m, src)
}
func (m *QueryGetPoolInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolInfoRequest proto.InternalMessageInfo

func (m *QueryGetPoolInfoRequest) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

type QueryGetPoolInfoResponse struct {
	PoolInfo PoolInfo `protobuf:"bytes,1,opt,name=poolInfo,proto3" json:"poolInfo"`
}

func (m *QueryGetPoolInfoResponse) Reset()         { *m = QueryGetPoolInfoResponse{} }
func (m *QueryGetPoolInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolInfoResponse) ProtoMessage()    {}
func (*QueryGetPoolInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{13}
}
func (m *QueryGetPoolInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolInfoResponse.Merge(m, src)
}
func (m *QueryGetPoolInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolInfoResponse proto.InternalMessageInfo

func (m *QueryGetPoolInfoResponse) GetPoolInfo() PoolInfo {
	if m != nil {
		return m.PoolInfo
	}
	return PoolInfo{}
}

type QueryAllPoolInfoRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolInfoRequest) Reset()         { *m = QueryAllPoolInfoRequest{} }
func (m *QueryAllPoolInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolInfoRequest) ProtoMessage()    {}
func (*QueryAllPoolInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{14}
}
func (m *QueryAllPoolInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolInfoRequest.Merge(m, src)
}
func (m *QueryAllPoolInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolInfoRequest proto.InternalMessageInfo

func (m *QueryAllPoolInfoRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolInfoResponse struct {
	PoolInfo   []PoolInfo          `protobuf:"bytes,1,rep,name=poolInfo,proto3" json:"poolInfo"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolInfoResponse) Reset()         { *m = QueryAllPoolInfoResponse{} }
func (m *QueryAllPoolInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolInfoResponse) ProtoMessage()    {}
func (*QueryAllPoolInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_68dd2d718d2cdb91, []int{15}
}
func (m *QueryAllPoolInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolInfoResponse.Merge(m, src)
}
func (m *QueryAllPoolInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolInfoResponse proto.InternalMessageInfo

func (m *QueryAllPoolInfoResponse) GetPoolInfo() []PoolInfo {
	if m != nil {
		return m.PoolInfo
	}
	return nil
}

func (m *QueryAllPoolInfoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "abag.quasarnode.qoracle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "abag.quasarnode.qoracle.QueryParamsResponse")
	proto.RegisterType((*QueryGetPoolPositionRequest)(nil), "abag.quasarnode.qoracle.QueryGetPoolPositionRequest")
	proto.RegisterType((*QueryGetPoolPositionResponse)(nil), "abag.quasarnode.qoracle.QueryGetPoolPositionResponse")
	proto.RegisterType((*QueryAllPoolPositionRequest)(nil), "abag.quasarnode.qoracle.QueryAllPoolPositionRequest")
	proto.RegisterType((*QueryAllPoolPositionResponse)(nil), "abag.quasarnode.qoracle.QueryAllPoolPositionResponse")
	proto.RegisterType((*QueryGetPoolRankingRequest)(nil), "abag.quasarnode.qoracle.QueryGetPoolRankingRequest")
	proto.RegisterType((*QueryGetPoolRankingResponse)(nil), "abag.quasarnode.qoracle.QueryGetPoolRankingResponse")
	proto.RegisterType((*QueryGetPoolSpotPriceRequest)(nil), "abag.quasarnode.qoracle.QueryGetPoolSpotPriceRequest")
	proto.RegisterType((*QueryGetPoolSpotPriceResponse)(nil), "abag.quasarnode.qoracle.QueryGetPoolSpotPriceResponse")
	proto.RegisterType((*QueryAllPoolSpotPriceRequest)(nil), "abag.quasarnode.qoracle.QueryAllPoolSpotPriceRequest")
	proto.RegisterType((*QueryAllPoolSpotPriceResponse)(nil), "abag.quasarnode.qoracle.QueryAllPoolSpotPriceResponse")
	proto.RegisterType((*QueryGetPoolInfoRequest)(nil), "abag.quasarnode.qoracle.QueryGetPoolInfoRequest")
	proto.RegisterType((*QueryGetPoolInfoResponse)(nil), "abag.quasarnode.qoracle.QueryGetPoolInfoResponse")
	proto.RegisterType((*QueryAllPoolInfoRequest)(nil), "abag.quasarnode.qoracle.QueryAllPoolInfoRequest")
	proto.RegisterType((*QueryAllPoolInfoResponse)(nil), "abag.quasarnode.qoracle.QueryAllPoolInfoResponse")
}

func init() { proto.RegisterFile("qoracle/query.proto", fileDescriptor_68dd2d718d2cdb91) }

var fileDescriptor_68dd2d718d2cdb91 = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0x63, 0xb2, 0x9b, 0x85, 0x01, 0xb4, 0xab, 0x01, 0x2d, 0x91, 0x81, 0xb0, 0x58, 0xfc,
	0x52, 0x58, 0x6c, 0xc2, 0x8f, 0xdd, 0xd3, 0x1e, 0x60, 0x2b, 0x28, 0x52, 0x55, 0xd2, 0xb4, 0xa7,
	0x5e, 0xd0, 0x24, 0x0c, 0xae, 0x85, 0xe3, 0x71, 0x6c, 0xa7, 0x2a, 0x42, 0x5c, 0x7a, 0xee, 0xa1,
	0x52, 0xef, 0x3d, 0x55, 0x6a, 0x4f, 0xbd, 0xb4, 0x87, 0x1e, 0xfa, 0x07, 0x70, 0xaa, 0x90, 0x7a,
	0xe9, 0xa9, 0xaa, 0xa0, 0xff, 0x43, 0xaf, 0x95, 0xc7, 0x2f, 0x8e, 0xa7, 0x89, 0x13, 0xa7, 0xe4,
	0x66, 0xcf, 0xbc, 0x1f, 0x9f, 0xef, 0x9b, 0x97, 0x79, 0x0e, 0x1a, 0xab, 0x31, 0x87, 0x54, 0x4c,
	0xaa, 0xd5, 0xea, 0xd4, 0x39, 0x51, 0x6d, 0x87, 0x79, 0x0c, 0x4f, 0x90, 0x32, 0xd1, 0xd5, 0x5a,
	0x9d, 0xb8, 0xc4, 0xb1, 0xd8, 0x21, 0x55, 0xc1, 0x48, 0x1e, 0xd7, 0x99, 0xce, 0xb8, 0x8d, 0xe6,
	0x3f, 0x05, 0xe6, 0xf2, 0x94, 0xce, 0x98, 0x6e, 0x52, 0x8d, 0xd8, 0x86, 0x46, 0x2c, 0x8b, 0x79,
	0xc4, 0x33, 0x98, 0xe5, 0xc2, 0x6e, 0xbe, 0xc2, 0xdc, 0x2a, 0x73, 0xb5, 0x32, 0x71, 0x21, 0x8b,
	0xf6, 0xb0, 0x50, 0xa6, 0x1e, 0x29, 0x68, 0x36, 0xd1, 0x0d, 0x8b, 0x1b, 0x83, 0xed, 0x78, 0x83,
	0xc6, 0x26, 0x0e, 0xa9, 0x36, 0x22, 0x4c, 0x86, 0xab, 0x8c, 0x99, 0x07, 0x36, 0x73, 0x8d, 0x88,
	0x8b, 0x2c, 0x6c, 0x3a, 0xc4, 0x3a, 0x36, 0x2c, 0x1d, 0xf6, 0xa6, 0x85, 0x3d, 0xd7, 0x66, 0xde,
	0x81, 0xed, 0x18, 0x15, 0x0a, 0xdb, 0x13, 0xc2, 0xb6, 0x61, 0x1d, 0xb1, 0xb6, 0x31, 0xab, 0xd4,
	0x73, 0x8c, 0x0a, 0xc0, 0x28, 0xe3, 0x08, 0xdf, 0xf1, 0x45, 0x14, 0x39, 0x61, 0x89, 0xd6, 0xea,
	0xd4, 0xf5, 0x94, 0x7b, 0x68, 0x4c, 0x58, 0x75, 0x6d, 0x66, 0xb9, 0x14, 0xff, 0x87, 0x32, 0x81,
	0x92, 0xac, 0xf4, 0x97, 0xb4, 0x34, 0xbc, 0x36, 0xa3, 0xc6, 0x54, 0x56, 0x0d, 0x1c, 0xb7, 0x7f,
	0x39, 0xff, 0x3c, 0x93, 0x2a, 0x81, 0x93, 0xb2, 0x89, 0x26, 0x79, 0xd4, 0x5d, 0xea, 0x15, 0x19,
	0x33, 0x8b, 0xa0, 0x1c, 0x92, 0xe2, 0x3f, 0x51, 0xc6, 0x07, 0xdc, 0x3b, 0xe4, 0xd1, 0x87, 0x4a,
	0xf0, 0xa6, 0x30, 0x34, 0xd5, 0xde, 0x0d, 0xa8, 0xf6, 0xd1, 0x88, 0x1d, 0x59, 0x07, 0xb6, 0xf9,
	0x78, 0xb6, 0x88, 0x31, 0x10, 0x0a, 0x01, 0x14, 0x0a, 0x9c, 0x5b, 0xa6, 0xd9, 0x8e, 0x73, 0x07,
	0xa1, 0xe6, 0x49, 0x43, 0xb6, 0x05, 0x35, 0x68, 0x0b, 0xd5, 0x6f, 0x0b, 0x35, 0x68, 0x3e, 0x68,
	0x0b, 0xb5, 0x48, 0x74, 0x0a, 0xbe, 0xa5, 0x88, 0xa7, 0xf2, 0x4e, 0x02, 0x61, 0x2d, 0x79, 0x62,
	0x85, 0xa5, 0xaf, 0x25, 0x0c, 0xef, 0x0a, 0xe4, 0x03, 0x9c, 0x7c, 0xb1, 0x2b, 0x79, 0x40, 0x23,
	0xa0, 0x4f, 0x21, 0x39, 0x7a, 0x24, 0xa5, 0xa0, 0x4d, 0x1b, 0xdd, 0x73, 0x2c, 0x9e, 0x73, 0xb8,
	0x0b, 0xb2, 0x6e, 0xa1, 0xe1, 0xc8, 0x32, 0x14, 0x70, 0xae, 0xa3, 0x2a, 0xb0, 0x05, 0x51, 0x51,
	0x77, 0xc5, 0x14, 0xbb, 0xe3, 0xae, 0xcd, 0xbc, 0xa2, 0xff, 0xa3, 0xe8, 0xd2, 0x55, 0x38, 0x8b,
	0x7e, 0x3b, 0xa4, 0x16, 0xab, 0xee, 0x05, 0x85, 0x18, 0x2a, 0x35, 0x5e, 0xb1, 0x8c, 0x06, 0xf9,
	0xe3, 0x7e, 0xdd, 0xcb, 0xa6, 0xf9, 0x56, 0xf8, 0xae, 0xb8, 0x68, 0x3a, 0x26, 0x1b, 0x88, 0x2b,
	0xa1, 0x51, 0x3b, 0xba, 0x11, 0xf6, 0x47, 0x27, 0x79, 0xa1, 0x35, 0x08, 0x14, 0x43, 0x28, 0x47,
	0x62, 0x9f, 0xb4, 0x48, 0xec, 0x57, 0x43, 0xbe, 0x97, 0x40, 0x5d, 0x6b, 0xa2, 0x78, 0x75, 0xe9,
	0x6b, 0xaa, 0xeb, 0x5f, 0x53, 0x16, 0xd0, 0x44, 0xf4, 0x6c, 0xf6, 0xac, 0x23, 0xd6, 0xed, 0x6a,
	0x39, 0x40, 0xd9, 0x56, 0x17, 0xd0, 0xfa, 0x3f, 0x1a, 0xb4, 0x61, 0x0d, 0x6a, 0x3a, 0xdb, 0x51,
	0xa6, 0x6f, 0x08, 0x0a, 0x43, 0x47, 0x85, 0x00, 0x13, 0x54, 0x34, 0xca, 0xd4, 0xaf, 0x53, 0x7b,
	0x25, 0x81, 0x08, 0x21, 0x47, 0x5b, 0x11, 0xe9, 0x9f, 0x12, 0xd1, 0xb7, 0x13, 0x5a, 0xfb, 0x86,
	0xd0, 0xaf, 0x1c, 0x15, 0x3f, 0x91, 0x50, 0x26, 0x98, 0x11, 0x78, 0x39, 0x16, 0xa8, 0x75, 0x30,
	0xc9, 0x7f, 0x27, 0x33, 0x0e, 0x72, 0x2b, 0x8b, 0x8f, 0x3f, 0x7e, 0x7d, 0x36, 0x30, 0x8b, 0x67,
	0x34, 0xdf, 0x4b, 0x6b, 0x7a, 0x69, 0xe2, 0x60, 0xc6, 0x6f, 0x25, 0x34, 0x12, 0xbd, 0x3d, 0xf1,
	0x46, 0xe7, 0x3c, 0xed, 0x27, 0x98, 0xbc, 0xd9, 0xa3, 0x17, 0x60, 0xfe, 0xcb, 0x31, 0x0b, 0x58,
	0x8b, 0xc7, 0x8c, 0x7e, 0x29, 0x68, 0xa7, 0x41, 0xf7, 0x9e, 0xe1, 0xd7, 0x12, 0xfa, 0x3d, 0x1a,
	0x71, 0xcb, 0x34, 0xbb, 0x91, 0xb7, 0x9f, 0x69, 0xdd, 0xc8, 0x63, 0x26, 0x94, 0xa2, 0x72, 0xf2,
	0x25, 0xbc, 0x90, 0x8c, 0x1c, 0xbf, 0x94, 0x84, 0xbb, 0x1f, 0xaf, 0x27, 0x2a, 0x98, 0x38, 0x5e,
	0xe4, 0x8d, 0xde, 0x9c, 0x00, 0x75, 0x85, 0xa3, 0x2e, 0xe2, 0xf9, 0xce, 0xa8, 0xf0, 0xc5, 0x85,
	0x3f, 0x48, 0x68, 0x54, 0xb8, 0xbc, 0x70, 0xb2, 0xc3, 0xfd, 0xf1, 0x72, 0x96, 0xff, 0xe9, 0xd5,
	0x0d, 0x78, 0x6f, 0x73, 0xde, 0x9b, 0x78, 0xa7, 0x33, 0x6f, 0xf3, 0x2b, 0x30, 0x6c, 0x0b, 0xed,
	0x14, 0x26, 0x59, 0xe3, 0x69, 0xbf, 0xee, 0x9d, 0xe1, 0x37, 0x12, 0xfa, 0x43, 0xc8, 0xe4, 0x37,
	0x4b, 0xb2, 0x63, 0xef, 0x55, 0x53, 0xdc, 0xf8, 0x50, 0x56, 0xb9, 0xa6, 0x3c, 0x5e, 0x4a, 0xaa,
	0x09, 0xbf, 0x90, 0xd0, 0x60, 0xe3, 0x5e, 0xc2, 0xab, 0x89, 0x4a, 0x19, 0xb9, 0x63, 0xe5, 0x42,
	0x0f, 0x1e, 0xc0, 0xb8, 0xce, 0x19, 0x57, 0xf0, 0x72, 0x67, 0x46, 0xff, 0xf3, 0xba, 0xf9, 0x43,
	0x7c, 0x0e, 0x7d, 0xed, 0x47, 0xf2, 0xeb, 0xba, 0x9a, 0xa8, 0x40, 0x3d, 0x90, 0xb6, 0xb9, 0xdb,
	0x95, 0x3c, 0x27, 0x9d, 0xc3, 0x4a, 0x77, 0xd2, 0xed, 0x1b, 0xe7, 0x97, 0x39, 0xe9, 0xe2, 0x32,
	0x27, 0x7d, 0xb9, 0xcc, 0x49, 0x4f, 0xaf, 0x72, 0xa9, 0x8b, 0xab, 0x5c, 0xea, 0xd3, 0x55, 0x2e,
	0x75, 0x3f, 0xaf, 0x1b, 0xde, 0x83, 0x7a, 0x59, 0xad, 0xb0, 0x6a, 0x4b, 0x9c, 0x47, 0x61, 0x24,
	0xef, 0xc4, 0xa6, 0x6e, 0x39, 0xc3, 0xff, 0x33, 0xac, 0x7f, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x10,
	0x18, 0xf6, 0xe3, 0x66, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a PoolPosition by index.
	PoolPosition(ctx context.Context, in *QueryGetPoolPositionRequest, opts ...grpc.CallOption) (*QueryGetPoolPositionResponse, error)
	// Queries a list of PoolPosition items.
	PoolPositionAll(ctx context.Context, in *QueryAllPoolPositionRequest, opts ...grpc.CallOption) (*QueryAllPoolPositionResponse, error)
	// Queries a PoolRanking by index.
	PoolRanking(ctx context.Context, in *QueryGetPoolRankingRequest, opts ...grpc.CallOption) (*QueryGetPoolRankingResponse, error)
	// Queries a PoolSpotPrice by index.
	PoolSpotPrice(ctx context.Context, in *QueryGetPoolSpotPriceRequest, opts ...grpc.CallOption) (*QueryGetPoolSpotPriceResponse, error)
	// Queries a list of PoolSpotPrice items.
	PoolSpotPriceAll(ctx context.Context, in *QueryAllPoolSpotPriceRequest, opts ...grpc.CallOption) (*QueryAllPoolSpotPriceResponse, error)
	// Queries a PoolInfo by index.
	PoolInfo(ctx context.Context, in *QueryGetPoolInfoRequest, opts ...grpc.CallOption) (*QueryGetPoolInfoResponse, error)
	// Queries a list of PoolInfo items.
	PoolInfoAll(ctx context.Context, in *QueryAllPoolInfoRequest, opts ...grpc.CallOption) (*QueryAllPoolInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qoracle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolPosition(ctx context.Context, in *QueryGetPoolPositionRequest, opts ...grpc.CallOption) (*QueryGetPoolPositionResponse, error) {
	out := new(QueryGetPoolPositionResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qoracle.Query/PoolPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolPositionAll(ctx context.Context, in *QueryAllPoolPositionRequest, opts ...grpc.CallOption) (*QueryAllPoolPositionResponse, error) {
	out := new(QueryAllPoolPositionResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qoracle.Query/PoolPositionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolRanking(ctx context.Context, in *QueryGetPoolRankingRequest, opts ...grpc.CallOption) (*QueryGetPoolRankingResponse, error) {
	out := new(QueryGetPoolRankingResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qoracle.Query/PoolRanking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolSpotPrice(ctx context.Context, in *QueryGetPoolSpotPriceRequest, opts ...grpc.CallOption) (*QueryGetPoolSpotPriceResponse, error) {
	out := new(QueryGetPoolSpotPriceResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qoracle.Query/PoolSpotPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolSpotPriceAll(ctx context.Context, in *QueryAllPoolSpotPriceRequest, opts ...grpc.CallOption) (*QueryAllPoolSpotPriceResponse, error) {
	out := new(QueryAllPoolSpotPriceResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qoracle.Query/PoolSpotPriceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolInfo(ctx context.Context, in *QueryGetPoolInfoRequest, opts ...grpc.CallOption) (*QueryGetPoolInfoResponse, error) {
	out := new(QueryGetPoolInfoResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qoracle.Query/PoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolInfoAll(ctx context.Context, in *QueryAllPoolInfoRequest, opts ...grpc.CallOption) (*QueryAllPoolInfoResponse, error) {
	out := new(QueryAllPoolInfoResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qoracle.Query/PoolInfoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a PoolPosition by index.
	PoolPosition(context.Context, *QueryGetPoolPositionRequest) (*QueryGetPoolPositionResponse, error)
	// Queries a list of PoolPosition items.
	PoolPositionAll(context.Context, *QueryAllPoolPositionRequest) (*QueryAllPoolPositionResponse, error)
	// Queries a PoolRanking by index.
	PoolRanking(context.Context, *QueryGetPoolRankingRequest) (*QueryGetPoolRankingResponse, error)
	// Queries a PoolSpotPrice by index.
	PoolSpotPrice(context.Context, *QueryGetPoolSpotPriceRequest) (*QueryGetPoolSpotPriceResponse, error)
	// Queries a list of PoolSpotPrice items.
	PoolSpotPriceAll(context.Context, *QueryAllPoolSpotPriceRequest) (*QueryAllPoolSpotPriceResponse, error)
	// Queries a PoolInfo by index.
	PoolInfo(context.Context, *QueryGetPoolInfoRequest) (*QueryGetPoolInfoResponse, error)
	// Queries a list of PoolInfo items.
	PoolInfoAll(context.Context, *QueryAllPoolInfoRequest) (*QueryAllPoolInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) PoolPosition(ctx context.Context, req *QueryGetPoolPositionRequest) (*QueryGetPoolPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolPosition not implemented")
}
func (*UnimplementedQueryServer) PoolPositionAll(ctx context.Context, req *QueryAllPoolPositionRequest) (*QueryAllPoolPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolPositionAll not implemented")
}
func (*UnimplementedQueryServer) PoolRanking(ctx context.Context, req *QueryGetPoolRankingRequest) (*QueryGetPoolRankingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolRanking not implemented")
}
func (*UnimplementedQueryServer) PoolSpotPrice(ctx context.Context, req *QueryGetPoolSpotPriceRequest) (*QueryGetPoolSpotPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSpotPrice not implemented")
}
func (*UnimplementedQueryServer) PoolSpotPriceAll(ctx context.Context, req *QueryAllPoolSpotPriceRequest) (*QueryAllPoolSpotPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSpotPriceAll not implemented")
}
func (*UnimplementedQueryServer) PoolInfo(ctx context.Context, req *QueryGetPoolInfoRequest) (*QueryGetPoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolInfo not implemented")
}
func (*UnimplementedQueryServer) PoolInfoAll(ctx context.Context, req *QueryAllPoolInfoRequest) (*QueryAllPoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolInfoAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qoracle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qoracle.Query/PoolPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolPosition(ctx, req.(*QueryGetPoolPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolPositionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolPositionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qoracle.Query/PoolPositionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolPositionAll(ctx, req.(*QueryAllPoolPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qoracle.Query/PoolRanking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolRanking(ctx, req.(*QueryGetPoolRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolSpotPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolSpotPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolSpotPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qoracle.Query/PoolSpotPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolSpotPrice(ctx, req.(*QueryGetPoolSpotPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolSpotPriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolSpotPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolSpotPriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qoracle.Query/PoolSpotPriceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolSpotPriceAll(ctx, req.(*QueryAllPoolSpotPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qoracle.Query/PoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolInfo(ctx, req.(*QueryGetPoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolInfoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolInfoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qoracle.Query/PoolInfoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolInfoAll(ctx, req.(*QueryAllPoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "abag.quasarnode.qoracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PoolPosition",
			Handler:    _Query_PoolPosition_Handler,
		},
		{
			MethodName: "PoolPositionAll",
			Handler:    _Query_PoolPositionAll_Handler,
		},
		{
			MethodName: "PoolRanking",
			Handler:    _Query_PoolRanking_Handler,
		},
		{
			MethodName: "PoolSpotPrice",
			Handler:    _Query_PoolSpotPrice_Handler,
		},
		{
			MethodName: "PoolSpotPriceAll",
			Handler:    _Query_PoolSpotPriceAll_Handler,
		},
		{
			MethodName: "PoolInfo",
			Handler:    _Query_PoolInfo_Handler,
		},
		{
			MethodName: "PoolInfoAll",
			Handler:    _Query_PoolInfoAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qoracle/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolPosition) > 0 {
		for iNdEx := len(m.PoolPosition) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolPosition[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolRankingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolRankingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolRankingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolRankingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolRankingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolRankingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolRanking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolSpotPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolSpotPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolSpotPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomOut) > 0 {
		i -= len(m.DenomOut)
		copy(dAtA[i:], m.DenomOut)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomOut)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DenomIn) > 0 {
		i -= len(m.DenomIn)
		copy(dAtA[i:], m.DenomIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DenomIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolSpotPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolSpotPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolSpotPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolSpotPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolSpotPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolSpotPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolSpotPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolSpotPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolSpotPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolSpotPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolSpotPrice) > 0 {
		for iNdEx := len(m.PoolSpotPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolSpotPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolInfo) > 0 {
		for iNdEx := len(m.PoolInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPoolPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolPosition.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPoolPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolPosition) > 0 {
		for _, e := range m.PoolPosition {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolRankingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPoolRankingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolRanking.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPoolSpotPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DenomIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DenomOut)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolSpotPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolSpotPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPoolSpotPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolSpotPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolSpotPrice) > 0 {
		for _, e := range m.PoolSpotPrice {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPoolInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolInfo) > 0 {
		for _, e := range m.PoolInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolPosition = append(m.PoolPosition, PoolPosition{})
			if err := m.PoolPosition[len(m.PoolPosition)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolRankingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolRankingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolRankingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolRankingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolRankingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolRankingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolRanking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolRanking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolSpotPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolSpotPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolSpotPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolSpotPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolSpotPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolSpotPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolSpotPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolSpotPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolSpotPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolSpotPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolSpotPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolSpotPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolSpotPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolSpotPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolSpotPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolSpotPrice = append(m.PoolSpotPrice, PoolSpotPrice{})
			if err := m.PoolSpotPrice[len(m.PoolSpotPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolInfo = append(m.PoolInfo, PoolInfo{})
			if err := m.PoolInfo[len(m.PoolInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
