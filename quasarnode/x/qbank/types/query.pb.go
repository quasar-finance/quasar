// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qbank/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetDepositRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDepositRequest) Reset()         { *m = QueryGetDepositRequest{} }
func (m *QueryGetDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositRequest) ProtoMessage()    {}
func (*QueryGetDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{2}
}
func (m *QueryGetDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositRequest.Merge(m, src)
}
func (m *QueryGetDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositRequest proto.InternalMessageInfo

func (m *QueryGetDepositRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetDepositResponse struct {
	Deposit Deposit `protobuf:"bytes,1,opt,name=Deposit,proto3" json:"Deposit"`
}

func (m *QueryGetDepositResponse) Reset()         { *m = QueryGetDepositResponse{} }
func (m *QueryGetDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositResponse) ProtoMessage()    {}
func (*QueryGetDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{3}
}
func (m *QueryGetDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositResponse.Merge(m, src)
}
func (m *QueryGetDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositResponse proto.InternalMessageInfo

func (m *QueryGetDepositResponse) GetDeposit() Deposit {
	if m != nil {
		return m.Deposit
	}
	return Deposit{}
}

type QueryAllDepositRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDepositRequest) Reset()         { *m = QueryAllDepositRequest{} }
func (m *QueryAllDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositRequest) ProtoMessage()    {}
func (*QueryAllDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{4}
}
func (m *QueryAllDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositRequest.Merge(m, src)
}
func (m *QueryAllDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositRequest proto.InternalMessageInfo

func (m *QueryAllDepositRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDepositResponse struct {
	Deposit    []Deposit           `protobuf:"bytes,1,rep,name=Deposit,proto3" json:"Deposit"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDepositResponse) Reset()         { *m = QueryAllDepositResponse{} }
func (m *QueryAllDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositResponse) ProtoMessage()    {}
func (*QueryAllDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{5}
}
func (m *QueryAllDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositResponse.Merge(m, src)
}
func (m *QueryAllDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositResponse proto.InternalMessageInfo

func (m *QueryAllDepositResponse) GetDeposit() []Deposit {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *QueryAllDepositResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryUserDenomDepositRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryUserDenomDepositRequest) Reset()         { *m = QueryUserDenomDepositRequest{} }
func (m *QueryUserDenomDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomDepositRequest) ProtoMessage()    {}
func (*QueryUserDenomDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{6}
}
func (m *QueryUserDenomDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomDepositRequest.Merge(m, src)
}
func (m *QueryUserDenomDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomDepositRequest proto.InternalMessageInfo

func (m *QueryUserDenomDepositRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

func (m *QueryUserDenomDepositRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryUserDenomDepositResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryUserDenomDepositResponse) Reset()         { *m = QueryUserDenomDepositResponse{} }
func (m *QueryUserDenomDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomDepositResponse) ProtoMessage()    {}
func (*QueryUserDenomDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{7}
}
func (m *QueryUserDenomDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomDepositResponse.Merge(m, src)
}
func (m *QueryUserDenomDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomDepositResponse proto.InternalMessageInfo

func (m *QueryUserDenomDepositResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type QueryGetWithdrawRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetWithdrawRequest) Reset()         { *m = QueryGetWithdrawRequest{} }
func (m *QueryGetWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWithdrawRequest) ProtoMessage()    {}
func (*QueryGetWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{8}
}
func (m *QueryGetWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWithdrawRequest.Merge(m, src)
}
func (m *QueryGetWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWithdrawRequest proto.InternalMessageInfo

func (m *QueryGetWithdrawRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetWithdrawResponse struct {
	Withdraw Withdraw `protobuf:"bytes,1,opt,name=Withdraw,proto3" json:"Withdraw"`
}

func (m *QueryGetWithdrawResponse) Reset()         { *m = QueryGetWithdrawResponse{} }
func (m *QueryGetWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWithdrawResponse) ProtoMessage()    {}
func (*QueryGetWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{9}
}
func (m *QueryGetWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWithdrawResponse.Merge(m, src)
}
func (m *QueryGetWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWithdrawResponse proto.InternalMessageInfo

func (m *QueryGetWithdrawResponse) GetWithdraw() Withdraw {
	if m != nil {
		return m.Withdraw
	}
	return Withdraw{}
}

type QueryAllWithdrawRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWithdrawRequest) Reset()         { *m = QueryAllWithdrawRequest{} }
func (m *QueryAllWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllWithdrawRequest) ProtoMessage()    {}
func (*QueryAllWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{10}
}
func (m *QueryAllWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWithdrawRequest.Merge(m, src)
}
func (m *QueryAllWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWithdrawRequest proto.InternalMessageInfo

func (m *QueryAllWithdrawRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllWithdrawResponse struct {
	Withdraw   []Withdraw          `protobuf:"bytes,1,rep,name=Withdraw,proto3" json:"Withdraw"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWithdrawResponse) Reset()         { *m = QueryAllWithdrawResponse{} }
func (m *QueryAllWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllWithdrawResponse) ProtoMessage()    {}
func (*QueryAllWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{11}
}
func (m *QueryAllWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWithdrawResponse.Merge(m, src)
}
func (m *QueryAllWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWithdrawResponse proto.InternalMessageInfo

func (m *QueryAllWithdrawResponse) GetWithdraw() []Withdraw {
	if m != nil {
		return m.Withdraw
	}
	return nil
}

func (m *QueryAllWithdrawResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFeeDataRequest struct {
}

func (m *QueryGetFeeDataRequest) Reset()         { *m = QueryGetFeeDataRequest{} }
func (m *QueryGetFeeDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeDataRequest) ProtoMessage()    {}
func (*QueryGetFeeDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{12}
}
func (m *QueryGetFeeDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeDataRequest.Merge(m, src)
}
func (m *QueryGetFeeDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeDataRequest proto.InternalMessageInfo

type QueryGetFeeDataResponse struct {
	FeeData FeeData `protobuf:"bytes,1,opt,name=FeeData,proto3" json:"FeeData"`
}

func (m *QueryGetFeeDataResponse) Reset()         { *m = QueryGetFeeDataResponse{} }
func (m *QueryGetFeeDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeDataResponse) ProtoMessage()    {}
func (*QueryGetFeeDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{13}
}
func (m *QueryGetFeeDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeDataResponse.Merge(m, src)
}
func (m *QueryGetFeeDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeDataResponse proto.InternalMessageInfo

func (m *QueryGetFeeDataResponse) GetFeeData() FeeData {
	if m != nil {
		return m.FeeData
	}
	return FeeData{}
}

type QueryUserDepositRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
}

func (m *QueryUserDepositRequest) Reset()         { *m = QueryUserDepositRequest{} }
func (m *QueryUserDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserDepositRequest) ProtoMessage()    {}
func (*QueryUserDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{14}
}
func (m *QueryUserDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDepositRequest.Merge(m, src)
}
func (m *QueryUserDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDepositRequest proto.InternalMessageInfo

func (m *QueryUserDepositRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

type QueryUserDepositResponse struct {
	Coins QCoins `protobuf:"bytes,1,opt,name=coins,proto3,castrepeated=github.com/abag/quasarnode/x/qbank/types.QCoins" json:"coins"`
}

func (m *QueryUserDepositResponse) Reset()         { *m = QueryUserDepositResponse{} }
func (m *QueryUserDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserDepositResponse) ProtoMessage()    {}
func (*QueryUserDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{15}
}
func (m *QueryUserDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDepositResponse.Merge(m, src)
}
func (m *QueryUserDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDepositResponse proto.InternalMessageInfo

func (m *QueryUserDepositResponse) GetCoins() QCoins {
	if m != nil {
		return m.Coins
	}
	return QCoins{}
}

type QueryUserDenomLockupDepositRequest struct {
	UserAcc    string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
	Denom      string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	LockupType string `protobuf:"bytes,3,opt,name=lockupType,proto3" json:"lockupType,omitempty"`
}

func (m *QueryUserDenomLockupDepositRequest) Reset()         { *m = QueryUserDenomLockupDepositRequest{} }
func (m *QueryUserDenomLockupDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomLockupDepositRequest) ProtoMessage()    {}
func (*QueryUserDenomLockupDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{16}
}
func (m *QueryUserDenomLockupDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomLockupDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomLockupDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomLockupDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomLockupDepositRequest.Merge(m, src)
}
func (m *QueryUserDenomLockupDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomLockupDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomLockupDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomLockupDepositRequest proto.InternalMessageInfo

func (m *QueryUserDenomLockupDepositRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

func (m *QueryUserDenomLockupDepositRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryUserDenomLockupDepositRequest) GetLockupType() string {
	if m != nil {
		return m.LockupType
	}
	return ""
}

type QueryUserDenomLockupDepositResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryUserDenomLockupDepositResponse) Reset()         { *m = QueryUserDenomLockupDepositResponse{} }
func (m *QueryUserDenomLockupDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomLockupDepositResponse) ProtoMessage()    {}
func (*QueryUserDenomLockupDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{17}
}
func (m *QueryUserDenomLockupDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomLockupDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomLockupDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomLockupDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomLockupDepositResponse.Merge(m, src)
}
func (m *QueryUserDenomLockupDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomLockupDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomLockupDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomLockupDepositResponse proto.InternalMessageInfo

func (m *QueryUserDenomLockupDepositResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type QueryUserDenomEpochLockupDepositRequest struct {
	UserAcc    string   `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
	Denom      string   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	EpochDay   []uint64 `protobuf:"varint,3,rep,packed,name=epochDay,proto3" json:"epochDay,omitempty"`
	LockupType string   `protobuf:"bytes,4,opt,name=lockupType,proto3" json:"lockupType,omitempty"`
}

func (m *QueryUserDenomEpochLockupDepositRequest) Reset() {
	*m = QueryUserDenomEpochLockupDepositRequest{}
}
func (m *QueryUserDenomEpochLockupDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomEpochLockupDepositRequest) ProtoMessage()    {}
func (*QueryUserDenomEpochLockupDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{18}
}
func (m *QueryUserDenomEpochLockupDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomEpochLockupDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomEpochLockupDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomEpochLockupDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomEpochLockupDepositRequest.Merge(m, src)
}
func (m *QueryUserDenomEpochLockupDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomEpochLockupDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomEpochLockupDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomEpochLockupDepositRequest proto.InternalMessageInfo

func (m *QueryUserDenomEpochLockupDepositRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

func (m *QueryUserDenomEpochLockupDepositRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryUserDenomEpochLockupDepositRequest) GetEpochDay() []uint64 {
	if m != nil {
		return m.EpochDay
	}
	return nil
}

func (m *QueryUserDenomEpochLockupDepositRequest) GetLockupType() string {
	if m != nil {
		return m.LockupType
	}
	return ""
}

type QueryUserDenomEpochLockupDepositResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryUserDenomEpochLockupDepositResponse) Reset() {
	*m = QueryUserDenomEpochLockupDepositResponse{}
}
func (m *QueryUserDenomEpochLockupDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomEpochLockupDepositResponse) ProtoMessage()    {}
func (*QueryUserDenomEpochLockupDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{19}
}
func (m *QueryUserDenomEpochLockupDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomEpochLockupDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomEpochLockupDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomEpochLockupDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomEpochLockupDepositResponse.Merge(m, src)
}
func (m *QueryUserDenomEpochLockupDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomEpochLockupDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomEpochLockupDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomEpochLockupDepositResponse proto.InternalMessageInfo

func (m *QueryUserDenomEpochLockupDepositResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type QueryUserWithdrawRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
}

func (m *QueryUserWithdrawRequest) Reset()         { *m = QueryUserWithdrawRequest{} }
func (m *QueryUserWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserWithdrawRequest) ProtoMessage()    {}
func (*QueryUserWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{20}
}
func (m *QueryUserWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserWithdrawRequest.Merge(m, src)
}
func (m *QueryUserWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserWithdrawRequest proto.InternalMessageInfo

func (m *QueryUserWithdrawRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

type QueryUserWithdrawResponse struct {
	Coins QCoins `protobuf:"bytes,1,opt,name=coins,proto3,castrepeated=github.com/abag/quasarnode/x/qbank/types.QCoins" json:"coins"`
}

func (m *QueryUserWithdrawResponse) Reset()         { *m = QueryUserWithdrawResponse{} }
func (m *QueryUserWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserWithdrawResponse) ProtoMessage()    {}
func (*QueryUserWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{21}
}
func (m *QueryUserWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserWithdrawResponse.Merge(m, src)
}
func (m *QueryUserWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserWithdrawResponse proto.InternalMessageInfo

func (m *QueryUserWithdrawResponse) GetCoins() QCoins {
	if m != nil {
		return m.Coins
	}
	return QCoins{}
}

type QueryUserDenomWithdrawRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryUserDenomWithdrawRequest) Reset()         { *m = QueryUserDenomWithdrawRequest{} }
func (m *QueryUserDenomWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomWithdrawRequest) ProtoMessage()    {}
func (*QueryUserDenomWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{22}
}
func (m *QueryUserDenomWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomWithdrawRequest.Merge(m, src)
}
func (m *QueryUserDenomWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomWithdrawRequest proto.InternalMessageInfo

func (m *QueryUserDenomWithdrawRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

func (m *QueryUserDenomWithdrawRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryUserDenomWithdrawResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryUserDenomWithdrawResponse) Reset()         { *m = QueryUserDenomWithdrawResponse{} }
func (m *QueryUserDenomWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomWithdrawResponse) ProtoMessage()    {}
func (*QueryUserDenomWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{23}
}
func (m *QueryUserDenomWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomWithdrawResponse.Merge(m, src)
}
func (m *QueryUserDenomWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomWithdrawResponse proto.InternalMessageInfo

func (m *QueryUserDenomWithdrawResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type QueryUserClaimRewardsRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
}

func (m *QueryUserClaimRewardsRequest) Reset()         { *m = QueryUserClaimRewardsRequest{} }
func (m *QueryUserClaimRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserClaimRewardsRequest) ProtoMessage()    {}
func (*QueryUserClaimRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{24}
}
func (m *QueryUserClaimRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserClaimRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserClaimRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserClaimRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserClaimRewardsRequest.Merge(m, src)
}
func (m *QueryUserClaimRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserClaimRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserClaimRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserClaimRewardsRequest proto.InternalMessageInfo

func (m *QueryUserClaimRewardsRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

type QueryUserClaimRewardsResponse struct {
	Coins QCoins `protobuf:"bytes,1,opt,name=coins,proto3,castrepeated=github.com/abag/quasarnode/x/qbank/types.QCoins" json:"coins"`
}

func (m *QueryUserClaimRewardsResponse) Reset()         { *m = QueryUserClaimRewardsResponse{} }
func (m *QueryUserClaimRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserClaimRewardsResponse) ProtoMessage()    {}
func (*QueryUserClaimRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{25}
}
func (m *QueryUserClaimRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserClaimRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserClaimRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserClaimRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserClaimRewardsResponse.Merge(m, src)
}
func (m *QueryUserClaimRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserClaimRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserClaimRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserClaimRewardsResponse proto.InternalMessageInfo

func (m *QueryUserClaimRewardsResponse) GetCoins() QCoins {
	if m != nil {
		return m.Coins
	}
	return QCoins{}
}

type QueryWithdrableRequest struct {
	UserAccount string `protobuf:"bytes,1,opt,name=userAccount,proto3" json:"userAccount,omitempty"`
	Denom       string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryWithdrableRequest) Reset()         { *m = QueryWithdrableRequest{} }
func (m *QueryWithdrableRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrableRequest) ProtoMessage()    {}
func (*QueryWithdrableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{26}
}
func (m *QueryWithdrableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrableRequest.Merge(m, src)
}
func (m *QueryWithdrableRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrableRequest proto.InternalMessageInfo

func (m *QueryWithdrableRequest) GetUserAccount() string {
	if m != nil {
		return m.UserAccount
	}
	return ""
}

func (m *QueryWithdrableRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryWithdrableResponse struct {
	Coin types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
}

func (m *QueryWithdrableResponse) Reset()         { *m = QueryWithdrableResponse{} }
func (m *QueryWithdrableResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrableResponse) ProtoMessage()    {}
func (*QueryWithdrableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{27}
}
func (m *QueryWithdrableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrableResponse.Merge(m, src)
}
func (m *QueryWithdrableResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrableResponse proto.InternalMessageInfo

func (m *QueryWithdrableResponse) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "abag.quasarnode.qbank.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "abag.quasarnode.qbank.QueryParamsResponse")
	proto.RegisterType((*QueryGetDepositRequest)(nil), "abag.quasarnode.qbank.QueryGetDepositRequest")
	proto.RegisterType((*QueryGetDepositResponse)(nil), "abag.quasarnode.qbank.QueryGetDepositResponse")
	proto.RegisterType((*QueryAllDepositRequest)(nil), "abag.quasarnode.qbank.QueryAllDepositRequest")
	proto.RegisterType((*QueryAllDepositResponse)(nil), "abag.quasarnode.qbank.QueryAllDepositResponse")
	proto.RegisterType((*QueryUserDenomDepositRequest)(nil), "abag.quasarnode.qbank.QueryUserDenomDepositRequest")
	proto.RegisterType((*QueryUserDenomDepositResponse)(nil), "abag.quasarnode.qbank.QueryUserDenomDepositResponse")
	proto.RegisterType((*QueryGetWithdrawRequest)(nil), "abag.quasarnode.qbank.QueryGetWithdrawRequest")
	proto.RegisterType((*QueryGetWithdrawResponse)(nil), "abag.quasarnode.qbank.QueryGetWithdrawResponse")
	proto.RegisterType((*QueryAllWithdrawRequest)(nil), "abag.quasarnode.qbank.QueryAllWithdrawRequest")
	proto.RegisterType((*QueryAllWithdrawResponse)(nil), "abag.quasarnode.qbank.QueryAllWithdrawResponse")
	proto.RegisterType((*QueryGetFeeDataRequest)(nil), "abag.quasarnode.qbank.QueryGetFeeDataRequest")
	proto.RegisterType((*QueryGetFeeDataResponse)(nil), "abag.quasarnode.qbank.QueryGetFeeDataResponse")
	proto.RegisterType((*QueryUserDepositRequest)(nil), "abag.quasarnode.qbank.QueryUserDepositRequest")
	proto.RegisterType((*QueryUserDepositResponse)(nil), "abag.quasarnode.qbank.QueryUserDepositResponse")
	proto.RegisterType((*QueryUserDenomLockupDepositRequest)(nil), "abag.quasarnode.qbank.QueryUserDenomLockupDepositRequest")
	proto.RegisterType((*QueryUserDenomLockupDepositResponse)(nil), "abag.quasarnode.qbank.QueryUserDenomLockupDepositResponse")
	proto.RegisterType((*QueryUserDenomEpochLockupDepositRequest)(nil), "abag.quasarnode.qbank.QueryUserDenomEpochLockupDepositRequest")
	proto.RegisterType((*QueryUserDenomEpochLockupDepositResponse)(nil), "abag.quasarnode.qbank.QueryUserDenomEpochLockupDepositResponse")
	proto.RegisterType((*QueryUserWithdrawRequest)(nil), "abag.quasarnode.qbank.QueryUserWithdrawRequest")
	proto.RegisterType((*QueryUserWithdrawResponse)(nil), "abag.quasarnode.qbank.QueryUserWithdrawResponse")
	proto.RegisterType((*QueryUserDenomWithdrawRequest)(nil), "abag.quasarnode.qbank.QueryUserDenomWithdrawRequest")
	proto.RegisterType((*QueryUserDenomWithdrawResponse)(nil), "abag.quasarnode.qbank.QueryUserDenomWithdrawResponse")
	proto.RegisterType((*QueryUserClaimRewardsRequest)(nil), "abag.quasarnode.qbank.QueryUserClaimRewardsRequest")
	proto.RegisterType((*QueryUserClaimRewardsResponse)(nil), "abag.quasarnode.qbank.QueryUserClaimRewardsResponse")
	proto.RegisterType((*QueryWithdrableRequest)(nil), "abag.quasarnode.qbank.QueryWithdrableRequest")
	proto.RegisterType((*QueryWithdrableResponse)(nil), "abag.quasarnode.qbank.QueryWithdrableResponse")
}

func init() { proto.RegisterFile("qbank/query.proto", fileDescriptor_99a391b5aa6457bf) }

var fileDescriptor_99a391b5aa6457bf = []byte{
	// 1264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x98, 0xdf, 0x4f, 0x1c, 0x55,
	0x14, 0xc7, 0xb9, 0x40, 0x69, 0x39, 0x18, 0x63, 0x2f, 0x88, 0xdb, 0xb5, 0x0c, 0x38, 0xb5, 0x40,
	0xab, 0x9d, 0x69, 0x4b, 0x91, 0xd6, 0x2a, 0x0d, 0x14, 0xdb, 0x17, 0xd3, 0xc2, 0x44, 0xd3, 0x68,
	0x62, 0xe8, 0xdd, 0xdd, 0xeb, 0x32, 0xe9, 0xee, 0xce, 0xb2, 0x33, 0x2b, 0x12, 0xc2, 0x8b, 0x0f,
	0xa6, 0x3e, 0x98, 0x68, 0x9a, 0xc6, 0xf8, 0x6a, 0xa2, 0x89, 0xc6, 0xbf, 0xc0, 0x67, 0x63, 0xfa,
	0xd8, 0xc4, 0x17, 0x9f, 0xd4, 0x80, 0x0f, 0xfe, 0x19, 0x66, 0xee, 0x3d, 0x33, 0x3b, 0xbf, 0x67,
	0x40, 0x92, 0xbe, 0x31, 0x77, 0xce, 0x39, 0xf7, 0x73, 0xce, 0x3d, 0xf7, 0xcc, 0x77, 0x81, 0x93,
	0x9b, 0x15, 0xd6, 0x7a, 0xa0, 0x6f, 0x76, 0x79, 0x67, 0x5b, 0x6b, 0x77, 0x2c, 0xc7, 0xa2, 0x2f,
	0xb2, 0x0a, 0xab, 0x6b, 0x9b, 0x5d, 0x66, 0xb3, 0x4e, 0xcb, 0xaa, 0x71, 0x4d, 0x98, 0x94, 0x4f,
	0xd7, 0x2d, 0xab, 0xde, 0xe0, 0x3a, 0x6b, 0x9b, 0x3a, 0x6b, 0xb5, 0x2c, 0x87, 0x39, 0xa6, 0xd5,
	0xb2, 0xa5, 0x53, 0xf9, 0x7c, 0xd5, 0xb2, 0x9b, 0x96, 0xad, 0x57, 0x98, 0xcd, 0x65, 0x34, 0xfd,
	0x93, 0x4b, 0x15, 0xee, 0xb0, 0x4b, 0x7a, 0x9b, 0xd5, 0xcd, 0x96, 0x30, 0x46, 0x5b, 0x2a, 0xf7,
	0x6c, 0xb3, 0x0e, 0x6b, 0x7a, 0xfe, 0xa3, 0x72, 0xad, 0xc6, 0xdb, 0x96, 0x6d, 0x3a, 0xb8, 0x38,
	0x26, 0x17, 0xb7, 0x4c, 0x67, 0xa3, 0xd6, 0x61, 0x5b, 0xe1, 0xd5, 0x8f, 0x39, 0x5f, 0xaf, 0x31,
	0x87, 0x85, 0x83, 0x56, 0xad, 0x66, 0xd3, 0xdf, 0x48, 0x09, 0x42, 0x79, 0x38, 0x55, 0xcb, 0xf4,
	0xde, 0x8f, 0xd5, 0xad, 0xba, 0x25, 0xfe, 0xd4, 0xdd, 0xbf, 0xe4, 0xaa, 0x3a, 0x06, 0x74, 0xcd,
	0x4d, 0x60, 0x55, 0xf0, 0x19, 0x7c, 0xb3, 0xcb, 0x6d, 0x47, 0x35, 0x60, 0x34, 0xb4, 0x6a, 0xb7,
	0xad, 0x96, 0xcd, 0xe9, 0x75, 0x18, 0x92, 0x79, 0x94, 0xc8, 0x14, 0x99, 0x1d, 0xb9, 0x3c, 0xa1,
	0x25, 0x56, 0x4f, 0x93, 0x6e, 0xcb, 0x83, 0x4f, 0xfe, 0x9c, 0xec, 0x33, 0xd0, 0x45, 0x9d, 0x85,
	0x71, 0x11, 0xf3, 0x36, 0x77, 0x56, 0x64, 0xe2, 0xb8, 0x1b, 0x7d, 0x1e, 0xfa, 0xcd, 0x9a, 0x08,
	0x39, 0x68, 0xf4, 0x9b, 0x35, 0xf5, 0x03, 0x78, 0x29, 0x66, 0x89, 0x04, 0x8b, 0x70, 0x1c, 0x97,
	0x10, 0x41, 0x49, 0x41, 0x40, 0x2b, 0x64, 0xf0, 0x9c, 0xd4, 0xfb, 0x08, 0xb1, 0xd4, 0x68, 0x44,
	0x20, 0x6e, 0x01, 0xf4, 0xce, 0x0e, 0x83, 0x4f, 0x6b, 0xb2, 0xa6, 0x9a, 0x5b, 0x53, 0x4d, 0xb6,
	0x0d, 0x56, 0x56, 0x5b, 0x65, 0x75, 0x8e, 0xbe, 0x46, 0xc0, 0x53, 0xfd, 0x8e, 0x20, 0x7d, 0x70,
	0x8b, 0x24, 0xfa, 0x81, 0x03, 0xd3, 0xd3, 0xdb, 0x21, 0xc6, 0x7e, 0xc1, 0x38, 0x93, 0xcb, 0x28,
	0x37, 0x0f, 0x41, 0xde, 0x81, 0xd3, 0x82, 0xf1, 0x7d, 0x9b, 0x77, 0x56, 0x78, 0xcb, 0x6a, 0x46,
	0x8a, 0x51, 0x82, 0xe3, 0x5d, 0x9b, 0x77, 0x96, 0xaa, 0x55, 0x51, 0x89, 0x61, 0xc3, 0x7b, 0xa4,
	0x63, 0x70, 0xac, 0xe6, 0x3a, 0x88, 0xdd, 0x87, 0x0d, 0xf9, 0xa0, 0x2e, 0xc0, 0x44, 0x4a, 0x3c,
	0xcc, 0x7c, 0x1c, 0x86, 0x58, 0xd3, 0xea, 0xb6, 0x1c, 0x3c, 0x66, 0x7c, 0x52, 0xcf, 0xf5, 0x8e,
	0xfa, 0x1e, 0x36, 0x7e, 0x5a, 0x57, 0x7c, 0x04, 0xa5, 0xb8, 0x29, 0x86, 0x5f, 0x82, 0x13, 0xde,
	0x1a, 0x1e, 0xdd, 0x64, 0x4a, 0x65, 0x3d, 0x33, 0x2c, 0xad, 0xef, 0xa6, 0xb2, 0xde, 0xb1, 0x45,
	0x49, 0x8e, 0xaa, 0x35, 0x7e, 0x20, 0x98, 0x42, 0x68, 0x8f, 0xc4, 0x14, 0x06, 0x0e, 0x91, 0xc2,
	0xd1, 0xb5, 0x47, 0xa9, 0x77, 0x55, 0x6f, 0x71, 0xbe, 0xc2, 0x1c, 0xe6, 0x0d, 0x86, 0xc0, 0xd5,
	0xf4, 0xdf, 0xf4, 0x9a, 0x1b, 0x97, 0x72, 0xae, 0x26, 0x5a, 0x79, 0xcd, 0x8d, 0x8f, 0xea, 0x1c,
	0x86, 0x96, 0x3d, 0x54, 0xac, 0x1d, 0xd5, 0x87, 0x5e, 0x49, 0x43, 0x5e, 0x48, 0xd4, 0x80, 0x63,
	0xee, 0xfc, 0xcb, 0x9b, 0x56, 0x6b, 0x37, 0x5d, 0xa3, 0xe5, 0x05, 0x17, 0xe7, 0xa7, 0xbf, 0x26,
	0xf5, 0xba, 0xe9, 0x6c, 0x74, 0x2b, 0x5a, 0xd5, 0x6a, 0xea, 0xae, 0x83, 0xde, 0x73, 0xd0, 0x3f,
	0xd5, 0xe5, 0xe0, 0x75, 0xb6, 0xdb, 0xdc, 0x46, 0x47, 0x43, 0x6e, 0xa2, 0x3a, 0xa0, 0x86, 0xef,
	0xc0, 0xbb, 0x56, 0xf5, 0x41, 0xb7, 0xfd, 0xff, 0x6e, 0x16, 0x55, 0x00, 0x1a, 0x22, 0xce, 0x7b,
	0xdb, 0x6d, 0x5e, 0x1a, 0x10, 0xaf, 0x02, 0x2b, 0xea, 0xdb, 0x70, 0x26, 0x73, 0xd7, 0x9c, 0xfb,
	0xf7, 0x98, 0xc0, 0x4c, 0xd8, 0xff, 0x9d, 0xb6, 0x55, 0xdd, 0x38, 0x12, 0xf4, 0x32, 0x9c, 0xe0,
	0x6e, 0xb0, 0x15, 0xb6, 0x5d, 0x1a, 0x98, 0x1a, 0x98, 0x1d, 0x34, 0xfc, 0xe7, 0x48, 0x5a, 0x83,
	0xb1, 0xb4, 0x96, 0x61, 0x36, 0x1f, 0x2b, 0x27, 0xb7, 0x2b, 0x81, 0xd6, 0x88, 0x5e, 0xe9, 0xf4,
	0x8e, 0xfa, 0x82, 0xc0, 0xa9, 0x04, 0xb7, 0x67, 0xd2, 0x52, 0x77, 0xa3, 0x63, 0xb5, 0x70, 0x1a,
	0x29, 0x73, 0xfa, 0x2a, 0x28, 0x69, 0x01, 0x73, 0x8a, 0x79, 0x35, 0xf0, 0xc5, 0xb8, 0xd9, 0x60,
	0x66, 0xd3, 0xe0, 0x5b, 0xac, 0x53, 0xb3, 0xf3, 0x0b, 0xfa, 0x25, 0x09, 0x64, 0x11, 0x76, 0x7d,
	0x26, 0x45, 0x5d, 0xc5, 0xe1, 0x86, 0xa9, 0x57, 0x1a, 0xde, 0xac, 0xa6, 0x53, 0x30, 0x82, 0xd0,
	0x7e, 0x01, 0x86, 0x8d, 0xe0, 0x52, 0x4a, 0x55, 0xef, 0xe0, 0xe4, 0x0a, 0x46, 0xc4, 0xd4, 0xe6,
	0x60, 0xd0, 0xdd, 0x15, 0x33, 0x3b, 0x15, 0x1a, 0xc6, 0xde, 0x18, 0x76, 0xe9, 0x70, 0x18, 0x0a,
	0xe3, 0xcb, 0xbf, 0x8e, 0xc2, 0x31, 0x11, 0x90, 0x7e, 0x4e, 0x60, 0x48, 0x8a, 0x29, 0x7a, 0x2e,
	0xad, 0x2a, 0x31, 0xf5, 0x56, 0x3e, 0x5f, 0xc4, 0x54, 0x02, 0xaa, 0x67, 0x3f, 0xfb, 0xfd, 0x9f,
	0x47, 0xfd, 0x93, 0x74, 0x22, 0x56, 0xc3, 0xa0, 0x6e, 0xa5, 0x8f, 0x89, 0x2f, 0x5d, 0xe8, 0x85,
	0xac, 0xf0, 0x31, 0x75, 0x57, 0xd6, 0x8a, 0x9a, 0x23, 0xd1, 0x6b, 0x82, 0xe8, 0x2c, 0x3d, 0x93,
	0x42, 0x84, 0xaa, 0x59, 0xdf, 0x31, 0x6b, 0xbb, 0xf4, 0x11, 0x01, 0xc0, 0x00, 0x4b, 0x8d, 0x46,
	0x36, 0x5a, 0x4c, 0xf3, 0x65, 0xa3, 0xc5, 0xf5, 0x9b, 0x3a, 0x2d, 0xd0, 0xa6, 0xa8, 0x92, 0x8d,
	0x46, 0x7f, 0x21, 0xf0, 0x42, 0x54, 0x0a, 0xd1, 0xb9, 0xac, 0xcd, 0x52, 0x84, 0x58, 0xf9, 0xca,
	0xc1, 0x9c, 0x90, 0xf3, 0xba, 0xe0, 0x9c, 0xa7, 0x73, 0x29, 0x9c, 0x6e, 0x4b, 0xaf, 0x8b, 0xde,
	0x5d, 0xf7, 0xab, 0x89, 0x6d, 0xbe, 0x4b, 0xbf, 0x25, 0x3d, 0x25, 0x42, 0xf3, 0x0e, 0x2f, 0x32,
	0x90, 0xca, 0x7a, 0x61, 0x7b, 0x44, 0x7d, 0x5d, 0xa0, 0x4e, 0xd3, 0x57, 0x53, 0x50, 0xbd, 0x9f,
	0x43, 0xf2, 0xb8, 0xbf, 0x21, 0x30, 0xe2, 0x85, 0x70, 0xcf, 0x3b, 0xef, 0x00, 0x0f, 0x84, 0x97,
	0xa0, 0xca, 0xd4, 0x19, 0x81, 0xf7, 0x0a, 0x9d, 0xcc, 0xc1, 0xa3, 0x5f, 0x13, 0x5f, 0xfe, 0xe4,
	0x5e, 0x90, 0xb0, 0xa6, 0xca, 0xbd, 0x20, 0x11, 0xa1, 0x95, 0xcb, 0xe4, 0xfd, 0x56, 0xa4, 0xdf,
	0x13, 0x18, 0x09, 0xe8, 0xa2, 0xec, 0x6a, 0xc5, 0x65, 0x57, 0x76, 0xb5, 0x12, 0x04, 0x97, 0x3a,
	0x2f, 0xc8, 0x74, 0x7a, 0x21, 0xbb, 0xef, 0xa2, 0x1d, 0xf7, 0x2f, 0x81, 0xf1, 0x64, 0xfd, 0x42,
	0xaf, 0x15, 0xea, 0xff, 0x24, 0xb9, 0x52, 0x7e, 0xf3, 0x30, 0xae, 0x98, 0xc8, 0x3d, 0x91, 0xc8,
	0x1a, 0xbd, 0x9b, 0x7f, 0x81, 0xa4, 0x68, 0x89, 0x67, 0xa5, 0xef, 0x88, 0xf7, 0xbb, 0xfa, 0x4e,
	0x4f, 0xd6, 0xec, 0xd2, 0x87, 0xfd, 0xf0, 0x72, 0x86, 0xa6, 0xa1, 0x8b, 0x85, 0xa0, 0x53, 0x35,
	0x5a, 0xf9, 0xc6, 0xa1, 0xfd, 0x31, 0xf3, 0x0d, 0x91, 0x79, 0x85, 0xde, 0xcf, 0xcf, 0x5c, 0x88,
	0xb9, 0x02, 0xf9, 0x7b, 0xa2, 0x2f, 0x52, 0x8a, 0x1f, 0x09, 0x3c, 0x17, 0xd4, 0x58, 0x34, 0xb7,
	0xdd, 0xa2, 0xb7, 0xf9, 0x62, 0x71, 0x07, 0xcc, 0xee, 0x0d, 0x91, 0xdd, 0x45, 0xaa, 0x65, 0x65,
	0xd7, 0x1b, 0x39, 0x7e, 0x87, 0xfe, 0x46, 0xe0, 0x64, 0x4c, 0x33, 0xd1, 0x62, 0xc3, 0x39, 0x4a,
	0x3d, 0x7f, 0x40, 0x2f, 0x44, 0x5f, 0x11, 0xe8, 0x8b, 0xf4, 0xad, 0xfc, 0x83, 0x89, 0x27, 0xe0,
	0x1d, 0x86, 0xff, 0x65, 0x0a, 0xea, 0xb0, 0xfc, 0x2f, 0x53, 0x82, 0xe0, 0xcb, 0xff, 0x32, 0x25,
	0x49, 0xbd, 0x62, 0x5f, 0xa6, 0xaa, 0xeb, 0xb9, 0xde, 0x91, 0xae, 0x81, 0x53, 0xf8, 0x99, 0x00,
	0xf4, 0x34, 0x56, 0xf6, 0x98, 0x8d, 0xa9, 0xbb, 0xec, 0x31, 0x1b, 0x97, 0x6e, 0xea, 0x0d, 0x81,
	0x7a, 0x8d, 0x2e, 0x64, 0x8f, 0xfe, 0x4a, 0x83, 0xfb, 0x88, 0xae, 0x46, 0xf4, 0x6b, 0xbd, 0xbc,
	0xfc, 0x64, 0x4f, 0x21, 0x4f, 0xf7, 0x14, 0xf2, 0xf7, 0x9e, 0x42, 0xbe, 0xda, 0x57, 0xfa, 0x9e,
	0xee, 0x2b, 0x7d, 0x7f, 0xec, 0x2b, 0x7d, 0x1f, 0xce, 0x16, 0x95, 0xae, 0x95, 0x21, 0xf1, 0x5f,
	0xba, 0xb9, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xcd, 0xf6, 0x36, 0xba, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Deposit by id.
	Deposit(ctx context.Context, in *QueryGetDepositRequest, opts ...grpc.CallOption) (*QueryGetDepositResponse, error)
	// Queries a list of Deposit items.
	DepositAll(ctx context.Context, in *QueryAllDepositRequest, opts ...grpc.CallOption) (*QueryAllDepositResponse, error)
	// Queries a list of UserDenomDeposit items.
	UserDenomDeposit(ctx context.Context, in *QueryUserDenomDepositRequest, opts ...grpc.CallOption) (*QueryUserDenomDepositResponse, error)
	// Queries a Withdraw by id.
	Withdraw(ctx context.Context, in *QueryGetWithdrawRequest, opts ...grpc.CallOption) (*QueryGetWithdrawResponse, error)
	// Queries a list of Withdraw items.
	WithdrawAll(ctx context.Context, in *QueryAllWithdrawRequest, opts ...grpc.CallOption) (*QueryAllWithdrawResponse, error)
	// Queries a FeeData by index.
	FeeData(ctx context.Context, in *QueryGetFeeDataRequest, opts ...grpc.CallOption) (*QueryGetFeeDataResponse, error)
	// Queries a list of UserDeposit items.
	UserDeposit(ctx context.Context, in *QueryUserDepositRequest, opts ...grpc.CallOption) (*QueryUserDepositResponse, error)
	// Queries a list of UserDenomLockupDeposit items.
	UserDenomLockupDeposit(ctx context.Context, in *QueryUserDenomLockupDepositRequest, opts ...grpc.CallOption) (*QueryUserDenomLockupDepositResponse, error)
	// Queries a list of UserDenomEpochLockupDeposit items.
	UserDenomEpochLockupDeposit(ctx context.Context, in *QueryUserDenomEpochLockupDepositRequest, opts ...grpc.CallOption) (*QueryUserDenomEpochLockupDepositResponse, error)
	// Queries a list of UserWithdraw items.
	UserWithdraw(ctx context.Context, in *QueryUserWithdrawRequest, opts ...grpc.CallOption) (*QueryUserWithdrawResponse, error)
	// Queries a list of UserDenomWithdraw items.
	UserDenomWithdraw(ctx context.Context, in *QueryUserDenomWithdrawRequest, opts ...grpc.CallOption) (*QueryUserDenomWithdrawResponse, error)
	// Queries a list of UserClaimRewards items.
	UserClaimRewards(ctx context.Context, in *QueryUserClaimRewardsRequest, opts ...grpc.CallOption) (*QueryUserClaimRewardsResponse, error)
	// Queries a list of Withdrable items.
	Withdrable(ctx context.Context, in *QueryWithdrableRequest, opts ...grpc.CallOption) (*QueryWithdrableResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Deposit(ctx context.Context, in *QueryGetDepositRequest, opts ...grpc.CallOption) (*QueryGetDepositResponse, error) {
	out := new(QueryGetDepositResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositAll(ctx context.Context, in *QueryAllDepositRequest, opts ...grpc.CallOption) (*QueryAllDepositResponse, error) {
	out := new(QueryAllDepositResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/DepositAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDenomDeposit(ctx context.Context, in *QueryUserDenomDepositRequest, opts ...grpc.CallOption) (*QueryUserDenomDepositResponse, error) {
	out := new(QueryUserDenomDepositResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserDenomDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Withdraw(ctx context.Context, in *QueryGetWithdrawRequest, opts ...grpc.CallOption) (*QueryGetWithdrawResponse, error) {
	out := new(QueryGetWithdrawResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawAll(ctx context.Context, in *QueryAllWithdrawRequest, opts ...grpc.CallOption) (*QueryAllWithdrawResponse, error) {
	out := new(QueryAllWithdrawResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/WithdrawAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeData(ctx context.Context, in *QueryGetFeeDataRequest, opts ...grpc.CallOption) (*QueryGetFeeDataResponse, error) {
	out := new(QueryGetFeeDataResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/FeeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDeposit(ctx context.Context, in *QueryUserDepositRequest, opts ...grpc.CallOption) (*QueryUserDepositResponse, error) {
	out := new(QueryUserDepositResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDenomLockupDeposit(ctx context.Context, in *QueryUserDenomLockupDepositRequest, opts ...grpc.CallOption) (*QueryUserDenomLockupDepositResponse, error) {
	out := new(QueryUserDenomLockupDepositResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserDenomLockupDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDenomEpochLockupDeposit(ctx context.Context, in *QueryUserDenomEpochLockupDepositRequest, opts ...grpc.CallOption) (*QueryUserDenomEpochLockupDepositResponse, error) {
	out := new(QueryUserDenomEpochLockupDepositResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserDenomEpochLockupDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserWithdraw(ctx context.Context, in *QueryUserWithdrawRequest, opts ...grpc.CallOption) (*QueryUserWithdrawResponse, error) {
	out := new(QueryUserWithdrawResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDenomWithdraw(ctx context.Context, in *QueryUserDenomWithdrawRequest, opts ...grpc.CallOption) (*QueryUserDenomWithdrawResponse, error) {
	out := new(QueryUserDenomWithdrawResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserDenomWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserClaimRewards(ctx context.Context, in *QueryUserClaimRewardsRequest, opts ...grpc.CallOption) (*QueryUserClaimRewardsResponse, error) {
	out := new(QueryUserClaimRewardsResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserClaimRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Withdrable(ctx context.Context, in *QueryWithdrableRequest, opts ...grpc.CallOption) (*QueryWithdrableResponse, error) {
	out := new(QueryWithdrableResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/Withdrable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Deposit by id.
	Deposit(context.Context, *QueryGetDepositRequest) (*QueryGetDepositResponse, error)
	// Queries a list of Deposit items.
	DepositAll(context.Context, *QueryAllDepositRequest) (*QueryAllDepositResponse, error)
	// Queries a list of UserDenomDeposit items.
	UserDenomDeposit(context.Context, *QueryUserDenomDepositRequest) (*QueryUserDenomDepositResponse, error)
	// Queries a Withdraw by id.
	Withdraw(context.Context, *QueryGetWithdrawRequest) (*QueryGetWithdrawResponse, error)
	// Queries a list of Withdraw items.
	WithdrawAll(context.Context, *QueryAllWithdrawRequest) (*QueryAllWithdrawResponse, error)
	// Queries a FeeData by index.
	FeeData(context.Context, *QueryGetFeeDataRequest) (*QueryGetFeeDataResponse, error)
	// Queries a list of UserDeposit items.
	UserDeposit(context.Context, *QueryUserDepositRequest) (*QueryUserDepositResponse, error)
	// Queries a list of UserDenomLockupDeposit items.
	UserDenomLockupDeposit(context.Context, *QueryUserDenomLockupDepositRequest) (*QueryUserDenomLockupDepositResponse, error)
	// Queries a list of UserDenomEpochLockupDeposit items.
	UserDenomEpochLockupDeposit(context.Context, *QueryUserDenomEpochLockupDepositRequest) (*QueryUserDenomEpochLockupDepositResponse, error)
	// Queries a list of UserWithdraw items.
	UserWithdraw(context.Context, *QueryUserWithdrawRequest) (*QueryUserWithdrawResponse, error)
	// Queries a list of UserDenomWithdraw items.
	UserDenomWithdraw(context.Context, *QueryUserDenomWithdrawRequest) (*QueryUserDenomWithdrawResponse, error)
	// Queries a list of UserClaimRewards items.
	UserClaimRewards(context.Context, *QueryUserClaimRewardsRequest) (*QueryUserClaimRewardsResponse, error)
	// Queries a list of Withdrable items.
	Withdrable(context.Context, *QueryWithdrableRequest) (*QueryWithdrableResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Deposit(ctx context.Context, req *QueryGetDepositRequest) (*QueryGetDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedQueryServer) DepositAll(ctx context.Context, req *QueryAllDepositRequest) (*QueryAllDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAll not implemented")
}
func (*UnimplementedQueryServer) UserDenomDeposit(ctx context.Context, req *QueryUserDenomDepositRequest) (*QueryUserDenomDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDenomDeposit not implemented")
}
func (*UnimplementedQueryServer) Withdraw(ctx context.Context, req *QueryGetWithdrawRequest) (*QueryGetWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (*UnimplementedQueryServer) WithdrawAll(ctx context.Context, req *QueryAllWithdrawRequest) (*QueryAllWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawAll not implemented")
}
func (*UnimplementedQueryServer) FeeData(ctx context.Context, req *QueryGetFeeDataRequest) (*QueryGetFeeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeData not implemented")
}
func (*UnimplementedQueryServer) UserDeposit(ctx context.Context, req *QueryUserDepositRequest) (*QueryUserDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeposit not implemented")
}
func (*UnimplementedQueryServer) UserDenomLockupDeposit(ctx context.Context, req *QueryUserDenomLockupDepositRequest) (*QueryUserDenomLockupDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDenomLockupDeposit not implemented")
}
func (*UnimplementedQueryServer) UserDenomEpochLockupDeposit(ctx context.Context, req *QueryUserDenomEpochLockupDepositRequest) (*QueryUserDenomEpochLockupDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDenomEpochLockupDeposit not implemented")
}
func (*UnimplementedQueryServer) UserWithdraw(ctx context.Context, req *QueryUserWithdrawRequest) (*QueryUserWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWithdraw not implemented")
}
func (*UnimplementedQueryServer) UserDenomWithdraw(ctx context.Context, req *QueryUserDenomWithdrawRequest) (*QueryUserDenomWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDenomWithdraw not implemented")
}
func (*UnimplementedQueryServer) UserClaimRewards(ctx context.Context, req *QueryUserClaimRewardsRequest) (*QueryUserClaimRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserClaimRewards not implemented")
}
func (*UnimplementedQueryServer) Withdrable(ctx context.Context, req *QueryWithdrableRequest) (*QueryWithdrableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrable not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deposit(ctx, req.(*QueryGetDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/DepositAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositAll(ctx, req.(*QueryAllDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDenomDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserDenomDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDenomDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserDenomDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDenomDeposit(ctx, req.(*QueryUserDenomDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Withdraw(ctx, req.(*QueryGetWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/WithdrawAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawAll(ctx, req.(*QueryAllWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/FeeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeData(ctx, req.(*QueryGetFeeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDeposit(ctx, req.(*QueryUserDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDenomLockupDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserDenomLockupDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDenomLockupDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserDenomLockupDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDenomLockupDeposit(ctx, req.(*QueryUserDenomLockupDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDenomEpochLockupDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserDenomEpochLockupDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDenomEpochLockupDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserDenomEpochLockupDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDenomEpochLockupDeposit(ctx, req.(*QueryUserDenomEpochLockupDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserWithdraw(ctx, req.(*QueryUserWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDenomWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserDenomWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDenomWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserDenomWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDenomWithdraw(ctx, req.(*QueryUserDenomWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserClaimRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserClaimRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserClaimRewards(ctx, req.(*QueryUserClaimRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Withdrable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Withdrable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/Withdrable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Withdrable(ctx, req.(*QueryWithdrableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "abag.quasarnode.qbank.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Query_Deposit_Handler,
		},
		{
			MethodName: "DepositAll",
			Handler:    _Query_DepositAll_Handler,
		},
		{
			MethodName: "UserDenomDeposit",
			Handler:    _Query_UserDenomDeposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Query_Withdraw_Handler,
		},
		{
			MethodName: "WithdrawAll",
			Handler:    _Query_WithdrawAll_Handler,
		},
		{
			MethodName: "FeeData",
			Handler:    _Query_FeeData_Handler,
		},
		{
			MethodName: "UserDeposit",
			Handler:    _Query_UserDeposit_Handler,
		},
		{
			MethodName: "UserDenomLockupDeposit",
			Handler:    _Query_UserDenomLockupDeposit_Handler,
		},
		{
			MethodName: "UserDenomEpochLockupDeposit",
			Handler:    _Query_UserDenomEpochLockupDeposit_Handler,
		},
		{
			MethodName: "UserWithdraw",
			Handler:    _Query_UserWithdraw_Handler,
		},
		{
			MethodName: "UserDenomWithdraw",
			Handler:    _Query_UserDenomWithdraw_Handler,
		},
		{
			MethodName: "UserClaimRewards",
			Handler:    _Query_UserClaimRewards_Handler,
		},
		{
			MethodName: "Withdrable",
			Handler:    _Query_Withdrable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qbank/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Withdraw.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Withdraw) > 0 {
		for iNdEx := len(m.Withdraw) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdraw[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomLockupDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomLockupDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomLockupDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockupType) > 0 {
		i -= len(m.LockupType)
		copy(dAtA[i:], m.LockupType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LockupType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomLockupDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomLockupDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomLockupDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomEpochLockupDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomEpochLockupDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomEpochLockupDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockupType) > 0 {
		i -= len(m.LockupType)
		copy(dAtA[i:], m.LockupType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LockupType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EpochDay) > 0 {
		dAtA11 := make([]byte, len(m.EpochDay)*10)
		var j10 int
		for _, num := range m.EpochDay {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintQuery(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomEpochLockupDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomEpochLockupDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomEpochLockupDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserClaimRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserClaimRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserClaimRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserClaimRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserClaimRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserClaimRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWithdrableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAccount) > 0 {
		i -= len(m.UserAccount)
		copy(dAtA[i:], m.UserAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deposit.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserDenomDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserDenomDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryGetWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Withdraw.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Withdraw) > 0 {
		for _, e := range m.Withdraw {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFeeDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetFeeDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coins.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserDenomLockupDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LockupType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserDenomLockupDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryUserDenomEpochLockupDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.EpochDay) > 0 {
		l = 0
		for _, e := range m.EpochDay {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	l = len(m.LockupType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserDenomEpochLockupDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryUserWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coins.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserDenomWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserDenomWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryUserClaimRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserClaimRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coins.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWithdrableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, Deposit{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Withdraw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdraw = append(m.Withdraw, Withdraw{})
			if err := m.Withdraw[len(m.Withdraw)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomLockupDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomLockupDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomLockupDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockupType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomLockupDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomLockupDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomLockupDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomEpochLockupDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomEpochLockupDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomEpochLockupDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EpochDay = append(m.EpochDay, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EpochDay) == 0 {
					m.EpochDay = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EpochDay = append(m.EpochDay, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDay", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockupType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomEpochLockupDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomEpochLockupDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomEpochLockupDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserClaimRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserClaimRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserClaimRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserClaimRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserClaimRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserClaimRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
