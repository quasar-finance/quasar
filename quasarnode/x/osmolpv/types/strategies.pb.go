// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmolpv/strategies.proto

package types

import (
	fmt "fmt"
	types "github.com/abag/quasarnode/x/qbank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Strategies defines the list of strategy names. This to be used for both
// base strategy and sub strategy names.
type Strategies struct {
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *Strategies) Reset()         { *m = Strategies{} }
func (m *Strategies) String() string { return proto.CompactTextString(m) }
func (*Strategies) ProtoMessage()    {}
func (*Strategies) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7c0c26b524947a, []int{0}
}
func (m *Strategies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Strategies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Strategies.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Strategies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strategies.Merge(m, src)
}
func (m *Strategies) XXX_Size() int {
	return m.Size()
}
func (m *Strategies) XXX_DiscardUnknown() {
	xxx_messageInfo_Strategies.DiscardUnknown(m)
}

var xxx_messageInfo_Strategies proto.InternalMessageInfo

func (m *Strategies) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// StrategyInfo defines the basic information of any strategy.
type StrategyInfo struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsActive   bool   `protobuf:"varint,2,opt,name=isActive,proto3" json:"isActive,omitempty"`
	StakingAcc string `protobuf:"bytes,3,opt,name=stakingAcc,proto3" json:"stakingAcc,omitempty"`
	RewardAcc  string `protobuf:"bytes,4,opt,name=rewardAcc,proto3" json:"rewardAcc,omitempty"`
}

func (m *StrategyInfo) Reset()         { *m = StrategyInfo{} }
func (m *StrategyInfo) String() string { return proto.CompactTextString(m) }
func (*StrategyInfo) ProtoMessage()    {}
func (*StrategyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7c0c26b524947a, []int{1}
}
func (m *StrategyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrategyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrategyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrategyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyInfo.Merge(m, src)
}
func (m *StrategyInfo) XXX_Size() int {
	return m.Size()
}
func (m *StrategyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyInfo proto.InternalMessageInfo

func (m *StrategyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StrategyInfo) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *StrategyInfo) GetStakingAcc() string {
	if m != nil {
		return m.StakingAcc
	}
	return ""
}

func (m *StrategyInfo) GetRewardAcc() string {
	if m != nil {
		return m.RewardAcc
	}
	return ""
}

// MeissaStrategyInfo defines the meissa strategy specific data. This will represent
// Each indivisual instance of the meissa strategy
// AUDIT NOTE - MeissaStrategyInfo is probably substituted by LpPosition struct.
// so Probably a redundant because of the addition of LpPosition.
type MeissaStrategyInfo struct {
	Base       *StrategyInfo     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	LockupType types.LockupTypes `protobuf:"varint,2,opt,name=lockupType,proto3,enum=abag.quasarnode.qbank.LockupTypes" json:"lockupType,omitempty"`
	StartTime  time.Time         `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	Duration   time.Duration     `protobuf:"bytes,4,opt,name=duration,proto3,stdduration" json:"duration,omitempty" yaml:"duration"`
}

func (m *MeissaStrategyInfo) Reset()         { *m = MeissaStrategyInfo{} }
func (m *MeissaStrategyInfo) String() string { return proto.CompactTextString(m) }
func (*MeissaStrategyInfo) ProtoMessage()    {}
func (*MeissaStrategyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7c0c26b524947a, []int{2}
}
func (m *MeissaStrategyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeissaStrategyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeissaStrategyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeissaStrategyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeissaStrategyInfo.Merge(m, src)
}
func (m *MeissaStrategyInfo) XXX_Size() int {
	return m.Size()
}
func (m *MeissaStrategyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MeissaStrategyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MeissaStrategyInfo proto.InternalMessageInfo

func (m *MeissaStrategyInfo) GetBase() *StrategyInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *MeissaStrategyInfo) GetLockupType() types.LockupTypes {
	if m != nil {
		return m.LockupType
	}
	return types.LockupTypes_Invalid
}

func (m *MeissaStrategyInfo) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *MeissaStrategyInfo) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

// CurrentPosition keeps track of the current total position of the strategy.
type CurrentPosition struct {
	TotalDeployedTokens  *types.QCoins `protobuf:"bytes,1,opt,name=totalDeployedTokens,proto3" json:"totalDeployedTokens,omitempty"`
	TotalStakedTokens    *types.QCoins `protobuf:"bytes,2,opt,name=totalStakedTokens,proto3" json:"totalStakedTokens,omitempty"`
	TotalUnClaimedReward *types.QCoins `protobuf:"bytes,3,opt,name=totalUnClaimedReward,proto3" json:"totalUnClaimedReward,omitempty"`
}

func (m *CurrentPosition) Reset()         { *m = CurrentPosition{} }
func (m *CurrentPosition) String() string { return proto.CompactTextString(m) }
func (*CurrentPosition) ProtoMessage()    {}
func (*CurrentPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7c0c26b524947a, []int{3}
}
func (m *CurrentPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentPosition.Merge(m, src)
}
func (m *CurrentPosition) XXX_Size() int {
	return m.Size()
}
func (m *CurrentPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentPosition.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentPosition proto.InternalMessageInfo

func (m *CurrentPosition) GetTotalDeployedTokens() *types.QCoins {
	if m != nil {
		return m.TotalDeployedTokens
	}
	return nil
}

func (m *CurrentPosition) GetTotalStakedTokens() *types.QCoins {
	if m != nil {
		return m.TotalStakedTokens
	}
	return nil
}

func (m *CurrentPosition) GetTotalUnClaimedReward() *types.QCoins {
	if m != nil {
		return m.TotalUnClaimedReward
	}
	return nil
}

// TotalHistPosition keeps track of the total position at a given epoch day.
type TotalHistPosition struct {
	TotalDeployedTokens *types.QCoins `protobuf:"bytes,1,opt,name=totalDeployedTokens,proto3" json:"totalDeployedTokens,omitempty"`
	TotalStakedTokens   *types.QCoins `protobuf:"bytes,2,opt,name=totalStakedTokens,proto3" json:"totalStakedTokens,omitempty"`
	TotalClaimedReward  *types.QCoins `protobuf:"bytes,3,opt,name=totalClaimedReward,proto3" json:"totalClaimedReward,omitempty"`
}

func (m *TotalHistPosition) Reset()         { *m = TotalHistPosition{} }
func (m *TotalHistPosition) String() string { return proto.CompactTextString(m) }
func (*TotalHistPosition) ProtoMessage()    {}
func (*TotalHistPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f7c0c26b524947a, []int{4}
}
func (m *TotalHistPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalHistPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalHistPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalHistPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalHistPosition.Merge(m, src)
}
func (m *TotalHistPosition) XXX_Size() int {
	return m.Size()
}
func (m *TotalHistPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalHistPosition.DiscardUnknown(m)
}

var xxx_messageInfo_TotalHistPosition proto.InternalMessageInfo

func (m *TotalHistPosition) GetTotalDeployedTokens() *types.QCoins {
	if m != nil {
		return m.TotalDeployedTokens
	}
	return nil
}

func (m *TotalHistPosition) GetTotalStakedTokens() *types.QCoins {
	if m != nil {
		return m.TotalStakedTokens
	}
	return nil
}

func (m *TotalHistPosition) GetTotalClaimedReward() *types.QCoins {
	if m != nil {
		return m.TotalClaimedReward
	}
	return nil
}

func init() {
	proto.RegisterType((*Strategies)(nil), "abag.quasarnode.osmolpv.Strategies")
	proto.RegisterType((*StrategyInfo)(nil), "abag.quasarnode.osmolpv.StrategyInfo")
	proto.RegisterType((*MeissaStrategyInfo)(nil), "abag.quasarnode.osmolpv.MeissaStrategyInfo")
	proto.RegisterType((*CurrentPosition)(nil), "abag.quasarnode.osmolpv.CurrentPosition")
	proto.RegisterType((*TotalHistPosition)(nil), "abag.quasarnode.osmolpv.TotalHistPosition")
}

func init() { proto.RegisterFile("osmolpv/strategies.proto", fileDescriptor_6f7c0c26b524947a) }

var fileDescriptor_6f7c0c26b524947a = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0xc1, 0x6f, 0xd3, 0x3e,
	0x18, 0x6d, 0xba, 0xfe, 0x7e, 0x6a, 0xbf, 0x22, 0xa6, 0x9a, 0x49, 0x94, 0x8a, 0x25, 0x55, 0x24,
	0xa4, 0x0a, 0xa1, 0x44, 0x94, 0x13, 0xdc, 0xd6, 0xf6, 0x00, 0x82, 0x09, 0x96, 0x15, 0x09, 0x71,
	0x41, 0x4e, 0xea, 0x65, 0x56, 0x93, 0x38, 0x8b, 0x9d, 0x41, 0x25, 0x0e, 0x88, 0xbf, 0x60, 0x47,
	0xfe, 0xa4, 0x1d, 0x77, 0x83, 0x53, 0x41, 0xed, 0x8d, 0xe3, 0xfe, 0x02, 0x64, 0x27, 0x69, 0x0b,
	0xed, 0x04, 0xe2, 0xc6, 0xcd, 0x7e, 0xdf, 0x7b, 0xcf, 0x9f, 0xdf, 0xe7, 0x04, 0x9a, 0x8c, 0x87,
	0x2c, 0x88, 0x4f, 0x6d, 0x2e, 0x12, 0x2c, 0x88, 0x4f, 0x09, 0xb7, 0xe2, 0x84, 0x09, 0x86, 0x6e,
	0x62, 0x17, 0xfb, 0xd6, 0x49, 0x8a, 0x39, 0x4e, 0x22, 0x36, 0x22, 0x56, 0xce, 0x6c, 0xed, 0xf8,
	0xcc, 0x67, 0x8a, 0x63, 0xcb, 0x55, 0x46, 0x6f, 0xe9, 0x3e, 0x63, 0x7e, 0x40, 0x6c, 0xb5, 0x73,
	0xd3, 0x23, 0x7b, 0x94, 0x26, 0x58, 0x50, 0x16, 0xe5, 0x75, 0xe3, 0xd7, 0xba, 0xa0, 0x21, 0xe1,
	0x02, 0x87, 0x71, 0x4e, 0x40, 0x27, 0x2e, 0x8e, 0xc6, 0xb6, 0xc7, 0xc2, 0xb0, 0x10, 0x99, 0x1d,
	0x80, 0xc3, 0x45, 0x5f, 0xa8, 0x05, 0xff, 0x45, 0x38, 0x24, 0xbc, 0xa9, 0xb5, 0xb7, 0x3a, 0xb5,
	0x5e, 0xe5, 0x7c, 0x6a, 0x94, 0x9c, 0x0c, 0x32, 0xdf, 0xc3, 0xb5, 0x9c, 0x39, 0x79, 0x12, 0x1d,
	0x31, 0x84, 0xa0, 0x22, 0x0b, 0x4d, 0xad, 0xad, 0x75, 0x6a, 0x8e, 0x5a, 0xa3, 0x16, 0x54, 0x29,
	0xdf, 0xf3, 0x04, 0x3d, 0x25, 0xcd, 0x72, 0x5b, 0xeb, 0x54, 0x9d, 0xc5, 0x1e, 0xe9, 0x00, 0x5c,
	0xe0, 0x31, 0x8d, 0xfc, 0x3d, 0xcf, 0x6b, 0x6e, 0x29, 0xd5, 0x0a, 0x82, 0x6e, 0x43, 0x2d, 0x21,
	0x6f, 0x71, 0x32, 0x92, 0xe5, 0x8a, 0x2a, 0x2f, 0x01, 0xf3, 0x73, 0x19, 0xd0, 0x3e, 0xa1, 0x9c,
	0xe3, 0x9f, 0x9a, 0x78, 0x08, 0x15, 0x17, 0xf3, 0xac, 0x89, 0x7a, 0xf7, 0x8e, 0x75, 0x45, 0xa2,
	0xd6, 0xaa, 0xc8, 0x51, 0x12, 0xd4, 0x03, 0x08, 0x98, 0x37, 0x4e, 0xe3, 0xe1, 0x24, 0xce, 0xba,
	0xbd, 0xde, 0x35, 0xd7, 0x0c, 0x54, 0x64, 0xd6, 0xb3, 0x05, 0x91, 0x3b, 0x2b, 0x2a, 0xf4, 0x4a,
	0xdd, 0x29, 0x11, 0x6f, 0x64, 0xd4, 0xea, 0x4e, 0xf5, 0x6e, 0xcb, 0xca, 0xe6, 0x60, 0x15, 0x73,
	0xb0, 0x86, 0xc5, 0x1c, 0x7a, 0xbb, 0x32, 0xd0, 0xcb, 0xa9, 0xd1, 0x98, 0xe0, 0x30, 0x78, 0x64,
	0x2e, 0xb5, 0xe6, 0xd9, 0x57, 0x43, 0x73, 0x6a, 0x0a, 0x90, 0x74, 0x74, 0x0c, 0xd5, 0x62, 0xbc,
	0x2a, 0x8c, 0x7a, 0xf7, 0xd6, 0x9a, 0xef, 0x20, 0x27, 0xf4, 0xee, 0x4b, 0xdb, 0xef, 0x53, 0x03,
	0x15, 0x92, 0x7b, 0x2c, 0xa4, 0x82, 0x84, 0xb1, 0x98, 0x5c, 0x4e, 0x8d, 0xed, 0xec, 0xb0, 0xa2,
	0x66, 0x7e, 0x92, 0x47, 0x2d, 0xdc, 0xcd, 0x8f, 0x65, 0xd8, 0xee, 0xa7, 0x49, 0x42, 0x22, 0xf1,
	0x82, 0x71, 0x2a, 0x31, 0xf4, 0x1c, 0x6e, 0x08, 0x26, 0x70, 0x30, 0x20, 0x71, 0xc0, 0x26, 0x64,
	0x34, 0x64, 0x63, 0x12, 0xf1, 0x3c, 0xe5, 0xdd, 0x2b, 0x42, 0x3a, 0xe8, 0x33, 0x1a, 0x71, 0x67,
	0x93, 0x12, 0x3d, 0x85, 0x86, 0x82, 0x0f, 0x05, 0x1e, 0x2f, 0xec, 0xca, 0x7f, 0x62, 0xb7, 0xae,
	0x43, 0x07, 0xb0, 0xa3, 0xc0, 0x97, 0x51, 0x3f, 0xc0, 0x34, 0x24, 0x23, 0x47, 0x3d, 0x93, 0x3c,
	0xff, 0xdf, 0xf8, 0x6d, 0x94, 0x9a, 0x1f, 0xca, 0xd0, 0x18, 0xca, 0xc2, 0x63, 0xca, 0xff, 0x95,
	0x18, 0xf6, 0x01, 0x29, 0xf0, 0x2f, 0x42, 0xd8, 0x20, 0xec, 0x0d, 0xce, 0x67, 0xba, 0x76, 0x31,
	0xd3, 0xb5, 0x6f, 0x33, 0x5d, 0x3b, 0x9b, 0xeb, 0xa5, 0x8b, 0xb9, 0x5e, 0xfa, 0x32, 0xd7, 0x4b,
	0xaf, 0xef, 0xfa, 0x54, 0x1c, 0xa7, 0xae, 0xe5, 0xb1, 0xd0, 0x96, 0xb6, 0xf6, 0xd2, 0xd6, 0x7e,
	0x67, 0x17, 0xbf, 0x37, 0x21, 0xbf, 0x0e, 0xf7, 0x7f, 0xf5, 0x3a, 0x1f, 0xfc, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x28, 0x47, 0x19, 0x80, 0xf6, 0x04, 0x00, 0x00,
}

func (m *Strategies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Strategies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Strategies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintStrategies(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StrategyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrategyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StrategyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAcc) > 0 {
		i -= len(m.RewardAcc)
		copy(dAtA[i:], m.RewardAcc)
		i = encodeVarintStrategies(dAtA, i, uint64(len(m.RewardAcc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StakingAcc) > 0 {
		i -= len(m.StakingAcc)
		copy(dAtA[i:], m.StakingAcc)
		i = encodeVarintStrategies(dAtA, i, uint64(len(m.StakingAcc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStrategies(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeissaStrategyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeissaStrategyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeissaStrategyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintStrategies(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintStrategies(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.LockupType != 0 {
		i = encodeVarintStrategies(dAtA, i, uint64(m.LockupType))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStrategies(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CurrentPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalUnClaimedReward != nil {
		{
			size, err := m.TotalUnClaimedReward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStrategies(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TotalStakedTokens != nil {
		{
			size, err := m.TotalStakedTokens.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStrategies(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalDeployedTokens != nil {
		{
			size, err := m.TotalDeployedTokens.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStrategies(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalHistPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalHistPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalHistPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalClaimedReward != nil {
		{
			size, err := m.TotalClaimedReward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStrategies(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TotalStakedTokens != nil {
		{
			size, err := m.TotalStakedTokens.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStrategies(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalDeployedTokens != nil {
		{
			size, err := m.TotalDeployedTokens.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStrategies(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStrategies(dAtA []byte, offset int, v uint64) int {
	offset -= sovStrategies(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Strategies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovStrategies(uint64(l))
		}
	}
	return n
}

func (m *StrategyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStrategies(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	l = len(m.StakingAcc)
	if l > 0 {
		n += 1 + l + sovStrategies(uint64(l))
	}
	l = len(m.RewardAcc)
	if l > 0 {
		n += 1 + l + sovStrategies(uint64(l))
	}
	return n
}

func (m *MeissaStrategyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovStrategies(uint64(l))
	}
	if m.LockupType != 0 {
		n += 1 + sovStrategies(uint64(m.LockupType))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovStrategies(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovStrategies(uint64(l))
	return n
}

func (m *CurrentPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDeployedTokens != nil {
		l = m.TotalDeployedTokens.Size()
		n += 1 + l + sovStrategies(uint64(l))
	}
	if m.TotalStakedTokens != nil {
		l = m.TotalStakedTokens.Size()
		n += 1 + l + sovStrategies(uint64(l))
	}
	if m.TotalUnClaimedReward != nil {
		l = m.TotalUnClaimedReward.Size()
		n += 1 + l + sovStrategies(uint64(l))
	}
	return n
}

func (m *TotalHistPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDeployedTokens != nil {
		l = m.TotalDeployedTokens.Size()
		n += 1 + l + sovStrategies(uint64(l))
	}
	if m.TotalStakedTokens != nil {
		l = m.TotalStakedTokens.Size()
		n += 1 + l + sovStrategies(uint64(l))
	}
	if m.TotalClaimedReward != nil {
		l = m.TotalClaimedReward.Size()
		n += 1 + l + sovStrategies(uint64(l))
	}
	return n
}

func sovStrategies(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStrategies(x uint64) (n int) {
	return sovStrategies(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Strategies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Strategies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Strategies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStrategies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStrategies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrategyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrategyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrategyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStrategies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStrategies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeissaStrategyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeissaStrategyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeissaStrategyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &StrategyInfo{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupType", wireType)
			}
			m.LockupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockupType |= types.LockupTypes(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStrategies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStrategies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeployedTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalDeployedTokens == nil {
				m.TotalDeployedTokens = &types.QCoins{}
			}
			if err := m.TotalDeployedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakedTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalStakedTokens == nil {
				m.TotalStakedTokens = &types.QCoins{}
			}
			if err := m.TotalStakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnClaimedReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalUnClaimedReward == nil {
				m.TotalUnClaimedReward = &types.QCoins{}
			}
			if err := m.TotalUnClaimedReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStrategies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStrategies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalHistPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategies
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalHistPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalHistPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeployedTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalDeployedTokens == nil {
				m.TotalDeployedTokens = &types.QCoins{}
			}
			if err := m.TotalDeployedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakedTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalStakedTokens == nil {
				m.TotalStakedTokens = &types.QCoins{}
			}
			if err := m.TotalStakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalClaimedReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategies
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStrategies
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalClaimedReward == nil {
				m.TotalClaimedReward = &types.QCoins{}
			}
			if err := m.TotalClaimedReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStrategies(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStrategies
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStrategies(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStrategies
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrategies
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStrategies
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStrategies
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStrategies
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStrategies        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStrategies          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStrategies = fmt.Errorf("proto: unexpected end of group")
)
