// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmolpv/lp_position.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GaugeLockInfo object is used to save the lockup period, associated approx apy
// and state whether it is active, and start time of this gauge to check the expected aPY
// on any given day. Multiple gaugeLockInfo objects will be associated with each LPPosition
type GaugeLockInfo struct {
	GaugeID        uint64                                 `protobuf:"varint,1,opt,name=gaugeID,proto3" json:"gaugeID,omitempty"`
	IsActive       bool                                   `protobuf:"varint,2,opt,name=isActive,proto3" json:"isActive,omitempty"`
	LockupDuration time.Duration                          `protobuf:"bytes,3,opt,name=lockupDuration,proto3,stdduration" json:"duration,omitempty" yaml:"duration"`
	ExpectedApy    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=expectedApy,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"expectedApy" yaml:"apy"`
	StartTime      time.Time                              `protobuf:"bytes,5,opt,name=startTime,proto3,stdtime" json:"startTime" yaml:"startTime"`
}

func (m *GaugeLockInfo) Reset()         { *m = GaugeLockInfo{} }
func (m *GaugeLockInfo) String() string { return proto.CompactTextString(m) }
func (*GaugeLockInfo) ProtoMessage()    {}
func (*GaugeLockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8903358b0acdfbfd, []int{0}
}
func (m *GaugeLockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GaugeLockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GaugeLockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GaugeLockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GaugeLockInfo.Merge(m, src)
}
func (m *GaugeLockInfo) XXX_Size() int {
	return m.Size()
}
func (m *GaugeLockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GaugeLockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GaugeLockInfo proto.InternalMessageInfo

func (m *GaugeLockInfo) GetGaugeID() uint64 {
	if m != nil {
		return m.GaugeID
	}
	return 0
}

func (m *GaugeLockInfo) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GaugeLockInfo) GetLockupDuration() time.Duration {
	if m != nil {
		return m.LockupDuration
	}
	return 0
}

func (m *GaugeLockInfo) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

// LpPosition is used by the strategy during the the Lping activity.
// Whenever orion module creates an LP position; an object of LpPosition will be created
// for book keeping in the KV store.
type LpPosition struct {
	LpID                   uint64           `protobuf:"varint,1,opt,name=lpID,proto3" json:"lpID,omitempty"`
	LockID                 uint64           `protobuf:"varint,2,opt,name=lockID,proto3" json:"lockID,omitempty"`
	IsActive               bool             `protobuf:"varint,3,opt,name=isActive,proto3" json:"isActive,omitempty"`
	StartTime              time.Time        `protobuf:"bytes,4,opt,name=startTime,proto3,stdtime" json:"startTime" yaml:"startTime"`
	BondingStartEpochDay   uint64           `protobuf:"varint,5,opt,name=bondingStartEpochDay,proto3" json:"bondingStartEpochDay,omitempty"`
	BondDuration           uint64           `protobuf:"varint,6,opt,name=bondDuration,proto3" json:"bondDuration,omitempty"`
	UnbondingStartEpochDay uint64           `protobuf:"varint,7,opt,name=unbondingStartEpochDay,proto3" json:"unbondingStartEpochDay,omitempty"`
	UnbondingDuration      uint64           `protobuf:"varint,8,opt,name=unbondingDuration,proto3" json:"unbondingDuration,omitempty"`
	PoolID                 uint64           `protobuf:"varint,9,opt,name=poolID,proto3" json:"poolID,omitempty"`
	Lptoken                *types.Coin      `protobuf:"bytes,10,opt,name=lptoken,proto3" json:"lptoken,omitempty"`
	Coins                  []types.Coin     `protobuf:"bytes,11,rep,name=coins,proto3" json:"coins"`
	Gaugelocks             []*GaugeLockInfo `protobuf:"bytes,12,rep,name=gaugelocks,proto3" json:"gaugelocks,omitempty"`
}

func (m *LpPosition) Reset()         { *m = LpPosition{} }
func (m *LpPosition) String() string { return proto.CompactTextString(m) }
func (*LpPosition) ProtoMessage()    {}
func (*LpPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_8903358b0acdfbfd, []int{1}
}
func (m *LpPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LpPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LpPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LpPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LpPosition.Merge(m, src)
}
func (m *LpPosition) XXX_Size() int {
	return m.Size()
}
func (m *LpPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_LpPosition.DiscardUnknown(m)
}

var xxx_messageInfo_LpPosition proto.InternalMessageInfo

func (m *LpPosition) GetLpID() uint64 {
	if m != nil {
		return m.LpID
	}
	return 0
}

func (m *LpPosition) GetLockID() uint64 {
	if m != nil {
		return m.LockID
	}
	return 0
}

func (m *LpPosition) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *LpPosition) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *LpPosition) GetBondingStartEpochDay() uint64 {
	if m != nil {
		return m.BondingStartEpochDay
	}
	return 0
}

func (m *LpPosition) GetBondDuration() uint64 {
	if m != nil {
		return m.BondDuration
	}
	return 0
}

func (m *LpPosition) GetUnbondingStartEpochDay() uint64 {
	if m != nil {
		return m.UnbondingStartEpochDay
	}
	return 0
}

func (m *LpPosition) GetUnbondingDuration() uint64 {
	if m != nil {
		return m.UnbondingDuration
	}
	return 0
}

func (m *LpPosition) GetPoolID() uint64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *LpPosition) GetLptoken() *types.Coin {
	if m != nil {
		return m.Lptoken
	}
	return nil
}

func (m *LpPosition) GetCoins() []types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *LpPosition) GetGaugelocks() []*GaugeLockInfo {
	if m != nil {
		return m.Gaugelocks
	}
	return nil
}

func init() {
	proto.RegisterType((*GaugeLockInfo)(nil), "abag.quasarnode.osmolpv.GaugeLockInfo")
	proto.RegisterType((*LpPosition)(nil), "abag.quasarnode.osmolpv.LpPosition")
}

func init() { proto.RegisterFile("osmolpv/lp_position.proto", fileDescriptor_8903358b0acdfbfd) }

var fileDescriptor_8903358b0acdfbfd = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcb, 0x6e, 0xd4, 0x3c,
	0x14, 0x9e, 0xb4, 0xe9, 0xcd, 0xed, 0xff, 0x03, 0x56, 0x55, 0xd2, 0x11, 0x4a, 0x46, 0x59, 0x54,
	0x23, 0x54, 0x6c, 0xb5, 0x15, 0x2c, 0x10, 0x9b, 0x0e, 0x01, 0x34, 0x52, 0x17, 0x28, 0x54, 0x2c,
	0x58, 0x80, 0x9c, 0x8c, 0x9b, 0x46, 0x93, 0xc4, 0x66, 0xec, 0x54, 0x9d, 0xb7, 0xe8, 0x92, 0x27,
	0xe1, 0x19, 0xba, 0xec, 0x12, 0xb1, 0x08, 0xa8, 0xdd, 0xb1, 0x2c, 0x2f, 0x80, 0xec, 0x5c, 0xda,
	0x99, 0xb6, 0xac, 0x58, 0x25, 0xe7, 0x7c, 0xdf, 0xb9, 0xf8, 0xf3, 0x39, 0x06, 0xeb, 0x4c, 0xa4,
	0x2c, 0xe1, 0x47, 0x38, 0xe1, 0x9f, 0x38, 0x13, 0xb1, 0x8c, 0x59, 0x86, 0xf8, 0x88, 0x49, 0x06,
	0x1f, 0x92, 0x80, 0x44, 0xe8, 0x73, 0x4e, 0x04, 0x19, 0x65, 0x6c, 0x40, 0x51, 0x45, 0x6d, 0xaf,
	0x46, 0x2c, 0x62, 0x9a, 0x83, 0xd5, 0x5f, 0x49, 0x6f, 0xdb, 0xa1, 0xc2, 0x05, 0x0e, 0x88, 0xa0,
	0xf8, 0x68, 0x2b, 0xa0, 0x92, 0x6c, 0xe1, 0x90, 0xc5, 0x59, 0x8d, 0x47, 0x8c, 0x45, 0x09, 0xc5,
	0xda, 0x0a, 0xf2, 0x03, 0x3c, 0xc8, 0x47, 0xe4, 0xaa, 0x5c, 0xdb, 0x99, 0xc6, 0x65, 0x9c, 0x52,
	0x21, 0x49, 0xca, 0x4b, 0x82, 0xfb, 0x7b, 0x06, 0xfc, 0xf7, 0x86, 0xe4, 0x11, 0xdd, 0x63, 0xe1,
	0xb0, 0x9f, 0x1d, 0x30, 0x68, 0x81, 0x85, 0x48, 0x39, 0xfa, 0x9e, 0x65, 0x74, 0x8c, 0xae, 0xe9,
	0xd7, 0x26, 0x6c, 0x83, 0xc5, 0x58, 0xec, 0x86, 0x32, 0x3e, 0xa2, 0xd6, 0x4c, 0xc7, 0xe8, 0x2e,
	0xfa, 0x8d, 0x0d, 0x25, 0xf8, 0x3f, 0x61, 0xe1, 0x30, 0xe7, 0x5e, 0xd5, 0x80, 0x35, 0xdb, 0x31,
	0xba, 0xcb, 0xdb, 0xeb, 0xa8, 0xec, 0x00, 0xd5, 0x1d, 0xa0, 0x9a, 0xd0, 0xdb, 0x3a, 0x2d, 0x9c,
	0xd6, 0xaf, 0xc2, 0x81, 0x75, 0xcf, 0x9b, 0x2c, 0x8d, 0x25, 0x4d, 0xb9, 0x1c, 0x5f, 0x16, 0xce,
	0xbd, 0x31, 0x49, 0x93, 0xe7, 0x6e, 0x8d, 0xb9, 0x5f, 0x7e, 0x38, 0x86, 0x3f, 0x55, 0x03, 0x7e,
	0x04, 0xcb, 0xf4, 0x98, 0xd3, 0x50, 0xd2, 0xc1, 0x2e, 0x1f, 0x5b, 0x66, 0xc7, 0xe8, 0x2e, 0xf5,
	0x5e, 0xa8, 0xbc, 0xdf, 0x0b, 0x67, 0x23, 0x8a, 0xe5, 0x61, 0x1e, 0xa0, 0x90, 0xa5, 0xb8, 0x92,
	0xb1, 0xfc, 0x3c, 0x11, 0x83, 0x21, 0x96, 0x63, 0x4e, 0x05, 0xf2, 0x68, 0x78, 0x59, 0x38, 0xa0,
	0xac, 0x45, 0xf8, 0xd8, 0xf5, 0xaf, 0x27, 0x84, 0xef, 0xc1, 0x92, 0x90, 0x64, 0x24, 0xf7, 0xe3,
	0x94, 0x5a, 0x73, 0xfa, 0x40, 0xed, 0x1b, 0x07, 0xda, 0xaf, 0x25, 0xed, 0x3d, 0x52, 0x95, 0x2f,
	0x0b, 0xe7, 0x7e, 0x99, 0xaf, 0x09, 0x75, 0x4f, 0x54, 0xf3, 0x57, 0xa9, 0xdc, 0xaf, 0x26, 0x00,
	0x7b, 0xfc, 0x6d, 0x35, 0x1a, 0x10, 0x02, 0x33, 0xe1, 0x8d, 0xde, 0xfa, 0x1f, 0xae, 0x81, 0x79,
	0x75, 0xd8, 0xbe, 0xa7, 0xa5, 0x36, 0xfd, 0xca, 0x9a, 0xb8, 0x84, 0xd9, 0xa9, 0x4b, 0x98, 0x68,
	0xd7, 0xfc, 0x67, 0xed, 0xc2, 0x6d, 0xb0, 0x1a, 0xb0, 0x6c, 0x10, 0x67, 0xd1, 0x3b, 0xe5, 0x7b,
	0xc5, 0x59, 0x78, 0xe8, 0x91, 0xb1, 0x56, 0xc4, 0xf4, 0x6f, 0xc5, 0xa0, 0x0b, 0x56, 0x94, 0xbf,
	0x19, 0x87, 0x79, 0xcd, 0x9d, 0xf0, 0xc1, 0x67, 0x60, 0x2d, 0xcf, 0x6e, 0xcd, 0xbc, 0xa0, 0xd9,
	0x77, 0xa0, 0x70, 0x13, 0x3c, 0x68, 0x90, 0xa6, 0xc0, 0xa2, 0x0e, 0xb9, 0x09, 0x28, 0x25, 0x39,
	0x63, 0x49, 0xdf, 0xb3, 0x96, 0x4a, 0x25, 0x4b, 0x0b, 0xee, 0x80, 0x85, 0x84, 0x4b, 0x36, 0xa4,
	0x99, 0x05, 0xaa, 0x59, 0x2d, 0xe7, 0x03, 0xa9, 0x6d, 0x43, 0xd5, 0xb6, 0xa1, 0x97, 0x2c, 0xce,
	0xfc, 0x9a, 0x09, 0x9f, 0x82, 0x39, 0xb5, 0x7e, 0xc2, 0x5a, 0xee, 0xcc, 0xfe, 0x35, 0xa4, 0x67,
	0x2a, 0x75, 0xfd, 0x92, 0x0d, 0x5f, 0x03, 0xa0, 0xb7, 0x48, 0x5d, 0xa2, 0xb0, 0x56, 0x74, 0xec,
	0x06, 0xba, 0xe3, 0x2d, 0x40, 0x13, 0x0b, 0xe9, 0x5f, 0x8b, 0xec, 0x79, 0xa7, 0xe7, 0xb6, 0x71,
	0x76, 0x6e, 0x1b, 0x3f, 0xcf, 0x6d, 0xe3, 0xe4, 0xc2, 0x6e, 0x9d, 0x5d, 0xd8, 0xad, 0x6f, 0x17,
	0x76, 0xeb, 0xc3, 0xe3, 0x6b, 0xd3, 0xae, 0xf2, 0xe2, 0xab, 0xbc, 0xf8, 0x18, 0xd7, 0x0f, 0x92,
	0x9e, 0xfa, 0x60, 0x5e, 0x0f, 0xc3, 0xce, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x98, 0x61,
	0x22, 0xa8, 0x04, 0x00, 0x00,
}

func (m *GaugeLockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GaugeLockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GaugeLockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLpPosition(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	{
		size := m.ExpectedApy.Size()
		i -= size
		if _, err := m.ExpectedApy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLpPosition(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LockupDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockupDuration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLpPosition(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.GaugeID != 0 {
		i = encodeVarintLpPosition(dAtA, i, uint64(m.GaugeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LpPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LpPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LpPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gaugelocks) > 0 {
		for iNdEx := len(m.Gaugelocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gaugelocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLpPosition(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLpPosition(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Lptoken != nil {
		{
			size, err := m.Lptoken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLpPosition(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.PoolID != 0 {
		i = encodeVarintLpPosition(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x48
	}
	if m.UnbondingDuration != 0 {
		i = encodeVarintLpPosition(dAtA, i, uint64(m.UnbondingDuration))
		i--
		dAtA[i] = 0x40
	}
	if m.UnbondingStartEpochDay != 0 {
		i = encodeVarintLpPosition(dAtA, i, uint64(m.UnbondingStartEpochDay))
		i--
		dAtA[i] = 0x38
	}
	if m.BondDuration != 0 {
		i = encodeVarintLpPosition(dAtA, i, uint64(m.BondDuration))
		i--
		dAtA[i] = 0x30
	}
	if m.BondingStartEpochDay != 0 {
		i = encodeVarintLpPosition(dAtA, i, uint64(m.BondingStartEpochDay))
		i--
		dAtA[i] = 0x28
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintLpPosition(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LockID != 0 {
		i = encodeVarintLpPosition(dAtA, i, uint64(m.LockID))
		i--
		dAtA[i] = 0x10
	}
	if m.LpID != 0 {
		i = encodeVarintLpPosition(dAtA, i, uint64(m.LpID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLpPosition(dAtA []byte, offset int, v uint64) int {
	offset -= sovLpPosition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GaugeLockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GaugeID != 0 {
		n += 1 + sovLpPosition(uint64(m.GaugeID))
	}
	if m.IsActive {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockupDuration)
	n += 1 + l + sovLpPosition(uint64(l))
	l = m.ExpectedApy.Size()
	n += 1 + l + sovLpPosition(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovLpPosition(uint64(l))
	return n
}

func (m *LpPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LpID != 0 {
		n += 1 + sovLpPosition(uint64(m.LpID))
	}
	if m.LockID != 0 {
		n += 1 + sovLpPosition(uint64(m.LockID))
	}
	if m.IsActive {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovLpPosition(uint64(l))
	if m.BondingStartEpochDay != 0 {
		n += 1 + sovLpPosition(uint64(m.BondingStartEpochDay))
	}
	if m.BondDuration != 0 {
		n += 1 + sovLpPosition(uint64(m.BondDuration))
	}
	if m.UnbondingStartEpochDay != 0 {
		n += 1 + sovLpPosition(uint64(m.UnbondingStartEpochDay))
	}
	if m.UnbondingDuration != 0 {
		n += 1 + sovLpPosition(uint64(m.UnbondingDuration))
	}
	if m.PoolID != 0 {
		n += 1 + sovLpPosition(uint64(m.PoolID))
	}
	if m.Lptoken != nil {
		l = m.Lptoken.Size()
		n += 1 + l + sovLpPosition(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovLpPosition(uint64(l))
		}
	}
	if len(m.Gaugelocks) > 0 {
		for _, e := range m.Gaugelocks {
			l = e.Size()
			n += 1 + l + sovLpPosition(uint64(l))
		}
	}
	return n
}

func sovLpPosition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLpPosition(x uint64) (n int) {
	return sovLpPosition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GaugeLockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLpPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GaugeLockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GaugeLockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeID", wireType)
			}
			m.GaugeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.LockupDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedApy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpPosition
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedApy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLpPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLpPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LpPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLpPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LpPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LpPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpID", wireType)
			}
			m.LpID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LpID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockID", wireType)
			}
			m.LockID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondingStartEpochDay", wireType)
			}
			m.BondingStartEpochDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BondingStartEpochDay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDuration", wireType)
			}
			m.BondDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BondDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingStartEpochDay", wireType)
			}
			m.UnbondingStartEpochDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingStartEpochDay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDuration", wireType)
			}
			m.UnbondingDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lptoken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lptoken == nil {
				m.Lptoken = &types.Coin{}
			}
			if err := m.Lptoken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gaugelocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpPosition
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gaugelocks = append(m.Gaugelocks, &GaugeLockInfo{})
			if err := m.Gaugelocks[len(m.Gaugelocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLpPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLpPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLpPosition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLpPosition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLpPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLpPosition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLpPosition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLpPosition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLpPosition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLpPosition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLpPosition = fmt.Errorf("proto: unexpected end of group")
)
