// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: intergamm/tx.proto

// package advancedblockchain.intergamm.intergamm;

package types

import (
	context "context"
	fmt "fmt"
	balancer "github.com/abag/quasarnode/x/gamm/pool-models/balancer"
	types "github.com/abag/quasarnode/x/gamm/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSendIbcCreatePool struct {
	Creator          string                       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Port             string                       `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	ChannelID        string                       `protobuf:"bytes,3,opt,name=channelID,proto3" json:"channelID,omitempty"`
	TimeoutTimestamp uint64                       `protobuf:"varint,4,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	PoolParams       *balancer.BalancerPoolParams `protobuf:"bytes,5,opt,name=poolParams,proto3" json:"poolParams,omitempty"`
	PoolAssets       []types.PoolAsset            `protobuf:"bytes,6,rep,name=poolAssets,proto3" json:"poolAssets"`
	//repeated abag.quasarnode.osmosis.gamm.v1beta1.PoolAsset poolAssets = 6
	// [ (gogoproto.nullable) = false ];
	FuturePoolGovernor string `protobuf:"bytes,7,opt,name=future_pool_governor,json=futurePoolGovernor,proto3" json:"future_pool_governor,omitempty"`
}

func (m *MsgSendIbcCreatePool) Reset()         { *m = MsgSendIbcCreatePool{} }
func (m *MsgSendIbcCreatePool) String() string { return proto.CompactTextString(m) }
func (*MsgSendIbcCreatePool) ProtoMessage()    {}
func (*MsgSendIbcCreatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{0}
}
func (m *MsgSendIbcCreatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendIbcCreatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendIbcCreatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendIbcCreatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendIbcCreatePool.Merge(m, src)
}
func (m *MsgSendIbcCreatePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendIbcCreatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendIbcCreatePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendIbcCreatePool proto.InternalMessageInfo

func (m *MsgSendIbcCreatePool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendIbcCreatePool) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *MsgSendIbcCreatePool) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *MsgSendIbcCreatePool) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgSendIbcCreatePool) GetPoolParams() *balancer.BalancerPoolParams {
	if m != nil {
		return m.PoolParams
	}
	return nil
}

func (m *MsgSendIbcCreatePool) GetPoolAssets() []types.PoolAsset {
	if m != nil {
		return m.PoolAssets
	}
	return nil
}

func (m *MsgSendIbcCreatePool) GetFuturePoolGovernor() string {
	if m != nil {
		return m.FuturePoolGovernor
	}
	return ""
}

type MsgSendIbcCreatePoolResponse struct {
}

func (m *MsgSendIbcCreatePoolResponse) Reset()         { *m = MsgSendIbcCreatePoolResponse{} }
func (m *MsgSendIbcCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendIbcCreatePoolResponse) ProtoMessage()    {}
func (*MsgSendIbcCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{1}
}
func (m *MsgSendIbcCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendIbcCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendIbcCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendIbcCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendIbcCreatePoolResponse.Merge(m, src)
}
func (m *MsgSendIbcCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendIbcCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendIbcCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendIbcCreatePoolResponse proto.InternalMessageInfo

type MsgSendIbcJoinPool struct {
	Creator          string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Port             string                                 `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	ChannelID        string                                 `protobuf:"bytes,3,opt,name=channelID,proto3" json:"channelID,omitempty"`
	TimeoutTimestamp uint64                                 `protobuf:"varint,4,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	PoolId           uint64                                 `protobuf:"varint,5,opt,name=poolId,proto3" json:"poolId,omitempty"`
	ShareOutAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=shareOutAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shareOutAmount"`
	TokenInMaxs      []types1.Coin                          `protobuf:"bytes,7,rep,name=tokenInMaxs,proto3" json:"tokenInMaxs"`
}

func (m *MsgSendIbcJoinPool) Reset()         { *m = MsgSendIbcJoinPool{} }
func (m *MsgSendIbcJoinPool) String() string { return proto.CompactTextString(m) }
func (*MsgSendIbcJoinPool) ProtoMessage()    {}
func (*MsgSendIbcJoinPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{2}
}
func (m *MsgSendIbcJoinPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendIbcJoinPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendIbcJoinPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendIbcJoinPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendIbcJoinPool.Merge(m, src)
}
func (m *MsgSendIbcJoinPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendIbcJoinPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendIbcJoinPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendIbcJoinPool proto.InternalMessageInfo

func (m *MsgSendIbcJoinPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendIbcJoinPool) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *MsgSendIbcJoinPool) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *MsgSendIbcJoinPool) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgSendIbcJoinPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgSendIbcJoinPool) GetTokenInMaxs() []types1.Coin {
	if m != nil {
		return m.TokenInMaxs
	}
	return nil
}

type MsgSendIbcJoinPoolResponse struct {
}

func (m *MsgSendIbcJoinPoolResponse) Reset()         { *m = MsgSendIbcJoinPoolResponse{} }
func (m *MsgSendIbcJoinPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendIbcJoinPoolResponse) ProtoMessage()    {}
func (*MsgSendIbcJoinPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{3}
}
func (m *MsgSendIbcJoinPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendIbcJoinPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendIbcJoinPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendIbcJoinPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendIbcJoinPoolResponse.Merge(m, src)
}
func (m *MsgSendIbcJoinPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendIbcJoinPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendIbcJoinPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendIbcJoinPoolResponse proto.InternalMessageInfo

type MsgSendIbcExitPool struct {
	Creator          string                                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Port             string                                 `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	ChannelID        string                                 `protobuf:"bytes,3,opt,name=channelID,proto3" json:"channelID,omitempty"`
	TimeoutTimestamp uint64                                 `protobuf:"varint,4,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	PoolId           uint64                                 `protobuf:"varint,5,opt,name=poolId,proto3" json:"poolId,omitempty"`
	ShareInAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=shareInAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shareInAmount"`
	TokenOutMins     []types1.Coin                          `protobuf:"bytes,7,rep,name=tokenOutMins,proto3" json:"tokenOutMins"`
}

func (m *MsgSendIbcExitPool) Reset()         { *m = MsgSendIbcExitPool{} }
func (m *MsgSendIbcExitPool) String() string { return proto.CompactTextString(m) }
func (*MsgSendIbcExitPool) ProtoMessage()    {}
func (*MsgSendIbcExitPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{4}
}
func (m *MsgSendIbcExitPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendIbcExitPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendIbcExitPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendIbcExitPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendIbcExitPool.Merge(m, src)
}
func (m *MsgSendIbcExitPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendIbcExitPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendIbcExitPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendIbcExitPool proto.InternalMessageInfo

func (m *MsgSendIbcExitPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendIbcExitPool) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *MsgSendIbcExitPool) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *MsgSendIbcExitPool) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgSendIbcExitPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgSendIbcExitPool) GetTokenOutMins() []types1.Coin {
	if m != nil {
		return m.TokenOutMins
	}
	return nil
}

type MsgSendIbcExitPoolResponse struct {
}

func (m *MsgSendIbcExitPoolResponse) Reset()         { *m = MsgSendIbcExitPoolResponse{} }
func (m *MsgSendIbcExitPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendIbcExitPoolResponse) ProtoMessage()    {}
func (*MsgSendIbcExitPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{5}
}
func (m *MsgSendIbcExitPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendIbcExitPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendIbcExitPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendIbcExitPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendIbcExitPoolResponse.Merge(m, src)
}
func (m *MsgSendIbcExitPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendIbcExitPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendIbcExitPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendIbcExitPoolResponse proto.InternalMessageInfo

type MsgSendIbcWithdraw struct {
	Creator          string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Port             string        `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	ChannelID        string        `protobuf:"bytes,3,opt,name=channelID,proto3" json:"channelID,omitempty"`
	TimeoutTimestamp uint64        `protobuf:"varint,4,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	TransferPort     string        `protobuf:"bytes,5,opt,name=transferPort,proto3" json:"transferPort,omitempty"`
	TransferChannel  string        `protobuf:"bytes,6,opt,name=transferChannel,proto3" json:"transferChannel,omitempty"`
	Receiver         string        `protobuf:"bytes,7,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Assets           []types1.Coin `protobuf:"bytes,8,rep,name=assets,proto3" json:"assets"`
}

func (m *MsgSendIbcWithdraw) Reset()         { *m = MsgSendIbcWithdraw{} }
func (m *MsgSendIbcWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgSendIbcWithdraw) ProtoMessage()    {}
func (*MsgSendIbcWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{6}
}
func (m *MsgSendIbcWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendIbcWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendIbcWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendIbcWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendIbcWithdraw.Merge(m, src)
}
func (m *MsgSendIbcWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendIbcWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendIbcWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendIbcWithdraw proto.InternalMessageInfo

func (m *MsgSendIbcWithdraw) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendIbcWithdraw) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *MsgSendIbcWithdraw) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *MsgSendIbcWithdraw) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgSendIbcWithdraw) GetTransferPort() string {
	if m != nil {
		return m.TransferPort
	}
	return ""
}

func (m *MsgSendIbcWithdraw) GetTransferChannel() string {
	if m != nil {
		return m.TransferChannel
	}
	return ""
}

func (m *MsgSendIbcWithdraw) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgSendIbcWithdraw) GetAssets() []types1.Coin {
	if m != nil {
		return m.Assets
	}
	return nil
}

type MsgSendIbcWithdrawResponse struct {
}

func (m *MsgSendIbcWithdrawResponse) Reset()         { *m = MsgSendIbcWithdrawResponse{} }
func (m *MsgSendIbcWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendIbcWithdrawResponse) ProtoMessage()    {}
func (*MsgSendIbcWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{7}
}
func (m *MsgSendIbcWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendIbcWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendIbcWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendIbcWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendIbcWithdrawResponse.Merge(m, src)
}
func (m *MsgSendIbcWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendIbcWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendIbcWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendIbcWithdrawResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSendIbcCreatePool)(nil), "abag.quasarnode.intergamm.intergamm.MsgSendIbcCreatePool")
	proto.RegisterType((*MsgSendIbcCreatePoolResponse)(nil), "abag.quasarnode.intergamm.intergamm.MsgSendIbcCreatePoolResponse")
	proto.RegisterType((*MsgSendIbcJoinPool)(nil), "abag.quasarnode.intergamm.intergamm.MsgSendIbcJoinPool")
	proto.RegisterType((*MsgSendIbcJoinPoolResponse)(nil), "abag.quasarnode.intergamm.intergamm.MsgSendIbcJoinPoolResponse")
	proto.RegisterType((*MsgSendIbcExitPool)(nil), "abag.quasarnode.intergamm.intergamm.MsgSendIbcExitPool")
	proto.RegisterType((*MsgSendIbcExitPoolResponse)(nil), "abag.quasarnode.intergamm.intergamm.MsgSendIbcExitPoolResponse")
	proto.RegisterType((*MsgSendIbcWithdraw)(nil), "abag.quasarnode.intergamm.intergamm.MsgSendIbcWithdraw")
	proto.RegisterType((*MsgSendIbcWithdrawResponse)(nil), "abag.quasarnode.intergamm.intergamm.MsgSendIbcWithdrawResponse")
}

func init() { proto.RegisterFile("intergamm/tx.proto", fileDescriptor_a78c651f644a1267) }

var fileDescriptor_a78c651f644a1267 = []byte{
	// 728 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xcb, 0x6e, 0x13, 0x3b,
	0x18, 0xc7, 0x33, 0x6d, 0x4e, 0xda, 0xba, 0x3d, 0xa7, 0x07, 0xab, 0x42, 0x43, 0x54, 0x4d, 0xa3,
	0x20, 0x41, 0x84, 0xa8, 0x87, 0x16, 0xa4, 0x0a, 0xb1, 0x40, 0x49, 0xb8, 0x28, 0x48, 0x51, 0xab,
	0xa1, 0x02, 0x09, 0x16, 0x95, 0x33, 0x71, 0x27, 0xa3, 0x66, 0xec, 0x60, 0x7b, 0x4a, 0x78, 0x06,
	0x36, 0xf0, 0x24, 0x3c, 0x02, 0x0b, 0x36, 0x5d, 0x76, 0x89, 0x58, 0x54, 0xa8, 0xdd, 0xf2, 0x10,
	0xc8, 0x9e, 0x4b, 0x66, 0xd2, 0x82, 0x9a, 0xb2, 0x28, 0xab, 0xd8, 0xdf, 0xe5, 0xef, 0xcf, 0x3f,
	0xdb, 0x5f, 0x06, 0x40, 0x9f, 0x4a, 0xc2, 0x3d, 0x1c, 0x04, 0xb6, 0x1c, 0xa2, 0x01, 0x67, 0x92,
	0xc1, 0xeb, 0xb8, 0x83, 0x3d, 0xf4, 0x26, 0xc4, 0x02, 0x73, 0xca, 0xba, 0x04, 0xa5, 0x31, 0xa3,
	0x51, 0x79, 0xc9, 0x63, 0x1e, 0xd3, 0xf1, 0xb6, 0x1a, 0x45, 0xa9, 0x65, 0xcb, 0x65, 0x22, 0x60,
	0xc2, 0xee, 0x60, 0x41, 0xec, 0xfd, 0xb5, 0x0e, 0x91, 0x78, 0xcd, 0x76, 0x99, 0x4f, 0x63, 0xff,
	0x8a, 0x76, 0xfb, 0xc2, 0xd6, 0x2b, 0x26, 0x01, 0x03, 0xc6, 0xfa, 0x71, 0xc0, 0xbd, 0x5c, 0x80,
	0x72, 0xac, 0x06, 0xac, 0x4b, 0xfa, 0x4a, 0xb2, 0x8f, 0xa9, 0x4b, 0x78, 0x3a, 0xd8, 0x4a, 0xb3,
	0xaa, 0x3f, 0xa6, 0xc0, 0x52, 0x5b, 0x78, 0xcf, 0x09, 0xed, 0xb6, 0x3a, 0x6e, 0x93, 0x13, 0x2c,
	0x89, 0x72, 0x43, 0x13, 0xcc, 0xb8, 0x6a, 0xc6, 0xb8, 0x69, 0x54, 0x8c, 0xda, 0x9c, 0x93, 0x4c,
	0x21, 0x04, 0xc5, 0x01, 0xe3, 0xd2, 0x9c, 0xd2, 0x66, 0x3d, 0x86, 0xcb, 0x60, 0xce, 0xed, 0x61,
	0x4a, 0x49, 0xbf, 0xf5, 0xc8, 0x9c, 0xd6, 0x8e, 0x91, 0x01, 0xde, 0x02, 0xff, 0x4b, 0x3f, 0x20,
	0x2c, 0x94, 0xdb, 0x7e, 0x40, 0x84, 0xc4, 0xc1, 0xc0, 0x2c, 0x56, 0x8c, 0x5a, 0xd1, 0x39, 0x65,
	0x87, 0xaf, 0x01, 0x50, 0xb5, 0x6f, 0x61, 0x8e, 0x03, 0x61, 0xfe, 0x53, 0x31, 0x6a, 0xf3, 0xeb,
	0x0f, 0xd0, 0x38, 0xd7, 0x78, 0xaf, 0x48, 0xa3, 0x55, 0xf1, 0xd1, 0x56, 0x51, 0x23, 0xb3, 0xc3,
	0x48, 0xc2, 0xc9, 0xc8, 0xc1, 0x76, 0x24, 0x5e, 0x17, 0x82, 0x48, 0x61, 0x96, 0x2a, 0xd3, 0xb5,
	0xf9, 0xf5, 0x9b, 0xbf, 0x17, 0xdf, 0x4a, 0xe2, 0x1b, 0xc5, 0x83, 0xa3, 0x95, 0x82, 0x93, 0x11,
	0x80, 0x77, 0xc0, 0xd2, 0x6e, 0x28, 0x43, 0x4e, 0x76, 0x94, 0x71, 0xc7, 0x63, 0xfb, 0x84, 0x53,
	0xc6, 0xcd, 0x19, 0x0d, 0x00, 0x46, 0x3e, 0x25, 0xf0, 0x34, 0xf6, 0x54, 0x2d, 0xb0, 0x7c, 0x16,
	0x6d, 0x87, 0x88, 0x01, 0xa3, 0x82, 0x54, 0x3f, 0x4f, 0x01, 0x38, 0x0a, 0x78, 0xc6, 0x7c, 0x7a,
	0xa9, 0x87, 0x71, 0x15, 0x94, 0xd4, 0xce, 0x5a, 0x5d, 0x7d, 0x10, 0x45, 0x27, 0x9e, 0xc1, 0x17,
	0xe0, 0x3f, 0xd1, 0xc3, 0x9c, 0x6c, 0x86, 0xb2, 0x1e, 0xb0, 0x90, 0x4a, 0xb3, 0xa4, 0x96, 0x69,
	0x20, 0x85, 0xe8, 0xdb, 0xd1, 0xca, 0x0d, 0xcf, 0x97, 0xbd, 0xb0, 0x83, 0x5c, 0x16, 0xd8, 0xf1,
	0xbd, 0x8e, 0x7e, 0x56, 0x45, 0x77, 0xcf, 0x96, 0xef, 0x06, 0x44, 0xa0, 0x16, 0x95, 0xce, 0x98,
	0x0a, 0xac, 0x83, 0x79, 0xc9, 0xf6, 0x08, 0x6d, 0xd1, 0x36, 0x1e, 0x0a, 0x73, 0x46, 0x1f, 0xd0,
	0x35, 0x14, 0xe5, 0x22, 0xf5, 0x34, 0x50, 0x7c, 0xf3, 0x51, 0x93, 0xf9, 0x34, 0x3e, 0x92, 0x6c,
	0x4e, 0x75, 0x19, 0x94, 0x4f, 0x03, 0xfc, 0x05, 0xdf, 0xc7, 0x43, 0x5f, 0xfe, 0x95, 0x7c, 0xb7,
	0xc1, 0xbf, 0x9a, 0x4c, 0x8b, 0xfe, 0x11, 0xde, 0xbc, 0x08, 0x6c, 0x82, 0x05, 0x4d, 0x6a, 0x33,
	0x94, 0x6d, 0x9f, 0x9e, 0x1b, 0x6f, 0x2e, 0x29, 0xcf, 0x37, 0x01, 0x98, 0xf2, 0xfd, 0x94, 0xe3,
	0xfb, 0xd2, 0x97, 0xbd, 0x2e, 0xc7, 0x6f, 0x2f, 0x8d, 0x6f, 0x15, 0x2c, 0x48, 0x8e, 0xa9, 0xd8,
	0x55, 0x1d, 0x81, 0x4b, 0x4d, 0x79, 0xce, 0xc9, 0xd9, 0x60, 0x0d, 0x2c, 0x26, 0xf3, 0x66, 0xb4,
	0x48, 0x44, 0xdb, 0x19, 0x37, 0xc3, 0x32, 0x98, 0xe5, 0xc4, 0x25, 0xfe, 0x3e, 0x49, 0x9e, 0x78,
	0x3a, 0x87, 0x1b, 0xa0, 0x84, 0xa3, 0xae, 0x32, 0x7b, 0x3e, 0xaa, 0x71, 0x78, 0x9e, 0x67, 0x02,
	0x2c, 0xe1, 0xb9, 0xfe, 0xa5, 0x08, 0xa6, 0xdb, 0xc2, 0x83, 0x1f, 0x0d, 0x70, 0xe5, 0x74, 0x8f,
	0xbe, 0x8f, 0xce, 0xf1, 0x7f, 0x83, 0xce, 0x6a, 0x38, 0xe5, 0xfa, 0x85, 0x53, 0x93, 0xda, 0xe0,
	0x7b, 0x03, 0x2c, 0x8e, 0x37, 0xaa, 0x8d, 0x09, 0x65, 0x93, 0xc4, 0xf2, 0xc3, 0x0b, 0x26, 0x9e,
	0x55, 0x4d, 0xfa, 0xac, 0x27, 0xad, 0x26, 0x49, 0x9c, 0xb8, 0x9a, 0xf1, 0x77, 0x90, 0xad, 0x26,
	0x7d, 0x04, 0x93, 0x56, 0x93, 0x24, 0x4e, 0x5c, 0xcd, 0xf8, 0x2d, 0x6a, 0x3c, 0x39, 0x38, 0xb6,
	0x8c, 0xc3, 0x63, 0xcb, 0xf8, 0x7e, 0x6c, 0x19, 0x1f, 0x4e, 0xac, 0xc2, 0xe1, 0x89, 0x55, 0xf8,
	0x7a, 0x62, 0x15, 0x5e, 0xdd, 0xce, 0x74, 0x12, 0xb5, 0x88, 0x3d, 0x5a, 0xc4, 0x1e, 0xda, 0x99,
	0x2f, 0x1c, 0xd5, 0x53, 0x3a, 0x25, 0xfd, 0xcd, 0x70, 0xf7, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x61, 0xa7, 0xc8, 0x86, 0xfb, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendIbcCreatePool(ctx context.Context, in *MsgSendIbcCreatePool, opts ...grpc.CallOption) (*MsgSendIbcCreatePoolResponse, error)
	SendIbcJoinPool(ctx context.Context, in *MsgSendIbcJoinPool, opts ...grpc.CallOption) (*MsgSendIbcJoinPoolResponse, error)
	SendIbcExitPool(ctx context.Context, in *MsgSendIbcExitPool, opts ...grpc.CallOption) (*MsgSendIbcExitPoolResponse, error)
	SendIbcWithdraw(ctx context.Context, in *MsgSendIbcWithdraw, opts ...grpc.CallOption) (*MsgSendIbcWithdrawResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendIbcCreatePool(ctx context.Context, in *MsgSendIbcCreatePool, opts ...grpc.CallOption) (*MsgSendIbcCreatePoolResponse, error) {
	out := new(MsgSendIbcCreatePoolResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.intergamm.intergamm.Msg/SendIbcCreatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendIbcJoinPool(ctx context.Context, in *MsgSendIbcJoinPool, opts ...grpc.CallOption) (*MsgSendIbcJoinPoolResponse, error) {
	out := new(MsgSendIbcJoinPoolResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.intergamm.intergamm.Msg/SendIbcJoinPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendIbcExitPool(ctx context.Context, in *MsgSendIbcExitPool, opts ...grpc.CallOption) (*MsgSendIbcExitPoolResponse, error) {
	out := new(MsgSendIbcExitPoolResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.intergamm.intergamm.Msg/SendIbcExitPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendIbcWithdraw(ctx context.Context, in *MsgSendIbcWithdraw, opts ...grpc.CallOption) (*MsgSendIbcWithdrawResponse, error) {
	out := new(MsgSendIbcWithdrawResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.intergamm.intergamm.Msg/SendIbcWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendIbcCreatePool(context.Context, *MsgSendIbcCreatePool) (*MsgSendIbcCreatePoolResponse, error)
	SendIbcJoinPool(context.Context, *MsgSendIbcJoinPool) (*MsgSendIbcJoinPoolResponse, error)
	SendIbcExitPool(context.Context, *MsgSendIbcExitPool) (*MsgSendIbcExitPoolResponse, error)
	SendIbcWithdraw(context.Context, *MsgSendIbcWithdraw) (*MsgSendIbcWithdrawResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendIbcCreatePool(ctx context.Context, req *MsgSendIbcCreatePool) (*MsgSendIbcCreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIbcCreatePool not implemented")
}
func (*UnimplementedMsgServer) SendIbcJoinPool(ctx context.Context, req *MsgSendIbcJoinPool) (*MsgSendIbcJoinPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIbcJoinPool not implemented")
}
func (*UnimplementedMsgServer) SendIbcExitPool(ctx context.Context, req *MsgSendIbcExitPool) (*MsgSendIbcExitPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIbcExitPool not implemented")
}
func (*UnimplementedMsgServer) SendIbcWithdraw(ctx context.Context, req *MsgSendIbcWithdraw) (*MsgSendIbcWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIbcWithdraw not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendIbcCreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendIbcCreatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendIbcCreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.intergamm.intergamm.Msg/SendIbcCreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendIbcCreatePool(ctx, req.(*MsgSendIbcCreatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendIbcJoinPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendIbcJoinPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendIbcJoinPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.intergamm.intergamm.Msg/SendIbcJoinPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendIbcJoinPool(ctx, req.(*MsgSendIbcJoinPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendIbcExitPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendIbcExitPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendIbcExitPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.intergamm.intergamm.Msg/SendIbcExitPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendIbcExitPool(ctx, req.(*MsgSendIbcExitPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendIbcWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendIbcWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendIbcWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.intergamm.intergamm.Msg/SendIbcWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendIbcWithdraw(ctx, req.(*MsgSendIbcWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "abag.quasarnode.intergamm.intergamm.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendIbcCreatePool",
			Handler:    _Msg_SendIbcCreatePool_Handler,
		},
		{
			MethodName: "SendIbcJoinPool",
			Handler:    _Msg_SendIbcJoinPool_Handler,
		},
		{
			MethodName: "SendIbcExitPool",
			Handler:    _Msg_SendIbcExitPool_Handler,
		},
		{
			MethodName: "SendIbcWithdraw",
			Handler:    _Msg_SendIbcWithdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intergamm/tx.proto",
}

func (m *MsgSendIbcCreatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendIbcCreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendIbcCreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FuturePoolGovernor) > 0 {
		i -= len(m.FuturePoolGovernor)
		copy(dAtA[i:], m.FuturePoolGovernor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FuturePoolGovernor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PoolAssets) > 0 {
		for iNdEx := len(m.PoolAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.PoolParams != nil {
		{
			size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendIbcCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendIbcCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendIbcCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendIbcJoinPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendIbcJoinPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendIbcJoinPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenInMaxs) > 0 {
		for iNdEx := len(m.TokenInMaxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenInMaxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.ShareOutAmount.Size()
		i -= size
		if _, err := m.ShareOutAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x28
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendIbcJoinPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendIbcJoinPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendIbcJoinPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendIbcExitPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendIbcExitPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendIbcExitPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOutMins) > 0 {
		for iNdEx := len(m.TokenOutMins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenOutMins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.ShareInAmount.Size()
		i -= size
		if _, err := m.ShareInAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x28
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendIbcExitPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendIbcExitPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendIbcExitPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendIbcWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendIbcWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendIbcWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TransferChannel) > 0 {
		i -= len(m.TransferChannel)
		copy(dAtA[i:], m.TransferChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferChannel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TransferPort) > 0 {
		i -= len(m.TransferPort)
		copy(dAtA[i:], m.TransferPort)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransferPort)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendIbcWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendIbcWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendIbcWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendIbcCreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.PoolParams != nil {
		l = m.PoolParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PoolAssets) > 0 {
		for _, e := range m.PoolAssets {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.FuturePoolGovernor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendIbcCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendIbcJoinPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = m.ShareOutAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.TokenInMaxs) > 0 {
		for _, e := range m.TokenInMaxs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSendIbcJoinPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendIbcExitPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = m.ShareInAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.TokenOutMins) > 0 {
		for _, e := range m.TokenOutMins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSendIbcExitPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendIbcWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	l = len(m.TransferPort)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransferChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSendIbcWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendIbcCreatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendIbcCreatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendIbcCreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolParams == nil {
				m.PoolParams = &balancer.BalancerPoolParams{}
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAssets = append(m.PoolAssets, types.PoolAsset{})
			if err := m.PoolAssets[len(m.PoolAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuturePoolGovernor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuturePoolGovernor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendIbcCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendIbcCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendIbcCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendIbcJoinPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendIbcJoinPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendIbcJoinPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareOutAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareOutAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInMaxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenInMaxs = append(m.TokenInMaxs, types1.Coin{})
			if err := m.TokenInMaxs[len(m.TokenInMaxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendIbcJoinPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendIbcJoinPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendIbcJoinPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendIbcExitPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendIbcExitPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendIbcExitPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareInAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareInAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutMins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOutMins = append(m.TokenOutMins, types1.Coin{})
			if err := m.TokenOutMins[len(m.TokenOutMins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendIbcExitPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendIbcExitPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendIbcExitPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendIbcWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendIbcWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendIbcWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, types1.Coin{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendIbcWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendIbcWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendIbcWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
